<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja">
  <title>さんちゃのblog</title>
  
  <link href="https://dawn.hateblo.jp/"/>
  <updated>2021-02-28T19:20:26+09:00</updated>
  <author>
    <name>threetea0407</name>
  </author>
  <generator uri="https://blog.hatena.ne.jp/" version="ee225e7a735063c512e4a0caffd647a8">Hatena::Blog</generator>
  <id>hatenablog://blog/10328749687251073169</id>

  
    
    
    <entry>
        <title> 「はじめて学ぶソフトウェアのテスト技法」を読んだ</title>
        <link href="https://dawn.hateblo.jp/entry/2021/02/28/192026"/>
        <id>hatenablog://entry/26006613697541538</id>
        <published>2021-02-28T19:20:26+09:00</published>
        <updated>2021-02-28T19:20:26+09:00</updated>        <summary type="html">よく考えてみたら「テスト」について勉強したことなかったなと思って、本を読んでみた。 はじめて学ぶソフトウェアのテスト技法作者:リー・コープランド発売日: 2005/11/03メディア: 単行本 本の解説 「はじめて学ぶソフトウェアのテスト技法」は、バグを効率的に発見するためにテストをどう行えばよいかという問に答える本だ。 テストコードの保守性を上げるにはどうしたらよいか、という問には答えてくれないので、その問題意識を持つ人は別の本をあたったほうが良いと思う(良い本があったら教えてください)。 本書は、以下のブラックボックステストの技法を解説している。 同値クラステスト 境界値テスト デシジョン…</summary>
        <content type="html">&lt;p&gt;よく考えてみたら「テスト」について勉強したことなかったなと思って、本を読んでみた。&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/exec/obidos/ASIN/4822282511/genya040704-22%20/&quot;&gt;&lt;img src=&quot;https://m.media-amazon.com/images/I/51JSRX31MSL.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;はじめて学ぶソフトウェアのテスト技法&quot; title=&quot;はじめて学ぶソフトウェアのテスト技法&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;https://www.amazon.co.jp/exec/obidos/ASIN/4822282511/genya040704-22%20/&quot;&gt;はじめて学ぶソフトウェアのテスト技法&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt;&lt;a href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A1%BC%A1%A6%A5%B3%A1%BC%A5%D7%A5%E9%A5%F3%A5%C9&quot; class=&quot;keyword&quot;&gt;リー・コープランド&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2005/11/03&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 単行本&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;本の解説&lt;/h2&gt;

&lt;p&gt; 「はじめて学ぶソフトウェアのテスト技法」は、&lt;b&gt;バグを効率的に発見するためにテストをどう行えばよいか&lt;/b&gt;という問に答える本だ。
テストコードの保守性を上げるにはどうしたらよいか、という問には答えてくれないので、その問題意識を持つ人は別の本をあたったほうが良いと思う(良い本があったら教えてください)。&lt;/p&gt;

&lt;p&gt;本書は、以下の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9%A5%C6%A5%B9%A5%C8&quot;&gt;ブラックボックステスト&lt;/a&gt;の技法を解説している。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;テスト&lt;/li&gt;
&lt;li&gt;境界値テスト&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%B7%A5%B8%A5%E7%A5%F3%A5%C6%A1%BC%A5%D6%A5%EB&quot;&gt;デシジョンテーブル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;状態遷移テスト&lt;/li&gt;
&lt;li&gt;ペア構成テスト&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;ドメイン&lt;/a&gt;分析テスト&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9&quot;&gt;ユースケース&lt;/a&gt;テスト&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;我々がテストを書くときに無意識に実践している項目もある。例えば「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;テスト」は、ほとんどの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC&quot;&gt;プログラマー&lt;/a&gt;は無意識にやっているはず。
ただ、他のテスト技法に関しては、実践したことのないものばかりだった。&lt;/p&gt;

&lt;p&gt;これまでは、テストでバグを発見できる気がしなくてすごく気持ち悪かったんだけど、この本を読んだことである程度自信を持ってやれそうな気がしてきた。&lt;/p&gt;

&lt;p&gt;あと、すごく重要なことなんですが、この本はかなり&lt;u&gt;読みやすい&lt;/u&gt;です。
昔似たような本を読んだときはとにかく退屈で、10ページぐらい読んでやめてしまったんだけど、この本は一人でもサクサク読みすすめられました。&lt;/p&gt;

&lt;h2&gt;面白かったところ&lt;/h2&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;・境界値&lt;/h3&gt;

&lt;p&gt;個人的には&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;と境界値が大事な発想だと思った。&lt;/p&gt;

&lt;p&gt;テストっていうのは、原始的にはありうる全ての入力パターンを試して正しく動くことを担保しないといけないと思うんだけど、現実的にはそれは無理だ。
入力が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/enum&quot;&gt;enum&lt;/a&gt;とかで有限のパターンしか取らないなら可能かもしれないけど、整数とか実数が入力パラメータに入ってくるとオシマイだ。
そこで導入される考え方が「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;テスト」と「境界値テスト」だ。&lt;/p&gt;

&lt;p&gt;振る舞いが「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C8%F3%C0%FE%B7%C1&quot;&gt;非線形&lt;/a&gt;」に変化する領域ごとに入力をグルーピングして、そのグループの「端の値」と「代表的な値」をテストしましょうね、というのが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;・境界値テストだと自分は理解した。
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;・境界値の発想を理解することで、整数とか実数とかの、無数の値を取る入力に対しても網羅的にテストが書けることになる。
このことによって、逆に「網羅的にテストを書こう」という気持ちになれることを発見した。&lt;/p&gt;

&lt;p&gt;これまでテストを書くときは、以下のパターンでテストを書くことが多かった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;網羅性を気にせず、ド正常系を1つと、思いつく限りの異常系をテストする&lt;/li&gt;
&lt;li&gt;正常系に属する範囲から入力をランダムに選んでテストする&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;これは、どうせ網羅的にはテストを書けないのだから網羅性を担保するのを諦める、という発想が根底にある。&lt;/p&gt;

&lt;p&gt;網羅的にテストを行う手法を理解したことで、網羅的にテストを書こうという気持ちになれる。&lt;/p&gt;

&lt;p&gt;また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;と境界値を前提として様々なテスト技法が存在している。
例えば、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%B7%A5%B8%A5%E7%A5%F3%A5%C6%A1%BC%A5%D6%A5%EB&quot;&gt;デシジョンテーブル&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;と境界値を前提として入力の網羅性を担保したいときに使う技法だし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;ドメイン&lt;/a&gt;分析テストは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;・境界値の拡張だ。
そういう意味でも、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C6%B1%C3%CD%A5%AF%A5%E9%A5%B9&quot;&gt;同値クラス&lt;/a&gt;と境界値を理解することは重要な雰囲気を感じる。&lt;/p&gt;

&lt;h3&gt;ペア構成テスト&lt;/h3&gt;

&lt;p&gt;ペア構成テストも面白い。
これは、単体では問題なく動く&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;同士を組み合わせたときにバグるのを発見する手法だ。
組み合わせる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の種類に対して、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の組み合わせの数は指数的に増えていく。
そのため、全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の組み合わせパターンをテストするのは実質的に不可能だ。
この問題を解決するために導入される手法がペア構成テストだ。&lt;/p&gt;

&lt;p&gt;経験則として「組み合わせでバグるのは、2つの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を組み合わせたときにバグるのがほとんどで、3つ以上の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;を組み合わせたときだけバグるというのはほとんどない」ということが知られているらしい。
つまり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の全組み合わせを調べる必要はなく、全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;がペアを組んだことがあるような組み合わせに絞ってテストをすれば、それだけでかなりの確率でバグを発見できる、ということだ。&lt;/p&gt;

&lt;p&gt;「全ての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;がペアを組んだことがあるような組み合わせ」を生成するソフトウェアが世の中には存在するので、それを使ってテストする組み合わせをリストアップすればいい。
これによって、全組み合わせをテストするのに比べて格段にテスト対象を減らすことができる。&lt;/p&gt;

&lt;p&gt;ただ、自動テストをするという観点からは、多くの場合は全組み合わせをテストすることは可能だと思う。特に正常系をざっとみるだけであれば、テストケースを自動生成してエラーがthrowしないことをチェックするのは簡単なはずだ。
一方で、各組み合わせに対して詳しい挙動をチェックしようと思ったら、ペア構成テストは自動テストにおいても有効な手法だと思う。&lt;/p&gt;

&lt;h3&gt;状態遷移テスト&lt;/h3&gt;

&lt;p&gt;これまで状態遷移をテストしたことなかったけど、いざやることになったら多分どこから手を付けたらいいかわからんとなっていたと思う。
この本には状態遷移をテストする方法がいくつか紹介されていて、それぞれどのぐらい偉いテストなのかということが書いてあってよかった。
重要な状態遷移なら気合を入れて偉いテストを書き、どうでもいいやつならざっくりテストを書く、ということができると思う。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt; 「はじめて学ぶソフトウェアのテスト技法」は面白い本だった。
雑にテストを書いてるソフトウェア開発者の人は一度読んでみると面白いと思う。&lt;/p&gt;

&lt;p&gt;それはそれとして「いいテストコードの書き方」「テストが書きやすい設計をする方法」とかの知見はこの本からは得られないので、オススメの本がある人は教えてください(クリーン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3&quot;&gt;アーキテクチャ&lt;/a&gt;は読みました)。&lt;/p&gt;

&lt;p&gt;これは読書ノートです： &lt;a href=&quot;https://scrapbox.io/genya0407/%E5%88%9D%E3%82%81%E3%81%A6%E5%AD%A6%E3%81%B6%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E6%8A%80%E6%B3%95&quot;&gt;&amp;#x521D;&amp;#x3081;&amp;#x3066;&amp;#x5B66;&amp;#x3076;&amp;#x30BD;&amp;#x30D5;&amp;#x30C8;&amp;#x30A6;&amp;#x30A7;&amp;#x30A2;&amp;#x306E;&amp;#x30C6;&amp;#x30B9;&amp;#x30C8;&amp;#x6280;&amp;#x6CD5; - genya0407&amp;#x306E;&amp;#x30E1;&amp;#x30E2;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;NOTE:&lt;/h2&gt;

&lt;p&gt;本書は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9%A5%C6%A5%B9%A5%C8&quot;&gt;ブラックボックステスト&lt;/a&gt;の手法だけでなく、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%DC%A5%C3%A5%AF%A5%B9%A5%C6%A5%B9%A5%C8&quot;&gt;ホワイトボックステスト&lt;/a&gt;の手法も取り上げています。
しかし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%DC%A5%C3%A5%AF%A5%B9%A5%C6%A5%B9%A5%C8&quot;&gt;ホワイトボックステスト&lt;/a&gt;の扱いは小さいし、「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DB%A5%EF%A5%A4%A5%C8%A5%DC%A5%C3%A5%AF%A5%B9%A5%C6%A5%B9%A5%C8&quot;&gt;ホワイトボックステスト&lt;/a&gt;に拘るな」みたいな記述があったし、本体コードにゴリゴリに依存したテストコードの保守性はものすごく低いことが予測され、実際に業務で書くことはあまり無いだろうと思ったので、読み飛ばした。&lt;/p&gt;

&lt;p&gt;とはいえ、「この分岐ってテストされてないけど大丈夫かな」のような発想でテストケースに気づけることもあると思うので、なんとなく意識するぐらいのことはしてもいいのかなと思った。&lt;/p&gt;
</content>        
        <link rel="enclosure" href="https://m.media-amazon.com/images/I/51JSRX31MSL.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Rubyで設定を書けるLinux用キーマッパー 「rumap」をRustで作った</title>
        <link href="https://dawn.hateblo.jp/entry/rumap"/>
        <id>hatenablog://entry/26006613661416222</id>
        <published>2020-12-08T00:00:00+09:00</published>
        <updated>2020-12-08T16:50:12+09:00</updated>        <summary type="html">この記事は、 CAMPHOR- アドベントカレンダー 2020の8日目の記事です。

Rubyで設定を書けるLinux用のキーマッパーをRustで実装した話をします。</summary>
        <content type="html">&lt;p&gt;この記事は、 &lt;a href=&quot;https://advent.camph.net/&quot;&gt;CAMPHOR- アドベントカレンダー 2020&lt;/a&gt;の8日目の記事です。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;で設定を書ける&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;用のキーマッパーをRustで実装した話をします。&lt;/p&gt;

&lt;h2&gt;Rumap&lt;/h2&gt;

&lt;p&gt;Rumap は &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;で設定を書ける&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;用のキーマッパーです(正確には&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/X%20Window%20System&quot;&gt;X Window System&lt;/a&gt;用)。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fgenya0407%2Frumap&quot; title=&quot;genya0407/rumap&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/genya0407/rumap&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;キーマッパーとは何かというと、karabinarみたいなやつです。
つまり、キーボードの入力をなにか別の入力に変換するアプリケーションです。&lt;/p&gt;

&lt;p&gt;例えば、以下のような設定ファイルを書いたとします。&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;remap &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Control-BackSpace&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;これを rumap に食わせて起動すると、 Control と BackSpace を同時押しすると、代わりにDeleteが入力されるようになります。&lt;/p&gt;

&lt;p&gt;また、キー入力を変換するだけでなく、キー入力をトリガーにしてコマンドを実行することもできます。
例えば以下のように書くことで、Alt と Shift と 4を同時押しすると &lt;code&gt;gnome-screenshot -a -d 0&lt;/code&gt; が実行されます。&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;remap &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alt-Shift-4&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: execute(&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;gnome-screenshot -a -d 0&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;


&lt;p&gt;詳しい使い方やインストール方法は、&lt;a href=&quot;https://github.com/genya0407/rumap&quot;&gt;README&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h2&gt;設定ファイルが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;である&lt;/h2&gt;

&lt;p&gt;rumapの設定ファイルは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;なので、いろいろと便利なことができます。&lt;/p&gt;

&lt;p&gt;例えばこういうことができます。&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synSpecial&quot;&gt;%w[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;r z x c v w t f Return&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;.each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;key&lt;/span&gt;|
  remap &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Alt-&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;key&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;C-&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;#{&lt;/span&gt;key&lt;span class=&quot;synSpecial&quot;&gt;}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この設定ファイルを使うと、Alt と r や z や x...を同時押ししたとき、 &lt;strong&gt;Ctrlとの同時押し&lt;/strong&gt; に変換されます。&lt;/p&gt;

&lt;p&gt;このように&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;を設定用の言語とすることで、複雑な設定も短く書き下すことができます。&lt;/p&gt;

&lt;h2&gt;なぜ作ったのか&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;で動いて、かつ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;で設定ファイルを書くことができるキーマッパーがなかったので作りました...なら理由としてカッコいいですが、実はそのようなキーマッパーは存在します。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fk0kubun.hatenablog.com%2Fentry%2Fxkremap&quot; title=&quot;Linux向けの最強のキーリマッパーを作った - k0kubun&amp;#39;s blog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://k0kubun.hatenablog.com/entry/xkremap&quot;&gt;k0kubun.hatenablog.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;もほぼ同じです(というかrumapの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;はxremapのパクリです)。一時期は僕もxremapを使っていました。&lt;/p&gt;

&lt;p&gt;ではなぜ作ったのかという話なんですが、xremap には with_modifier オプションが当時存在しなかったからです(今はあるかも)。&lt;/p&gt;

&lt;h3&gt;with_modifier オプション&lt;/h3&gt;

&lt;p&gt;with_modifier オプションの説明をするために、with_modifier オプションがない&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%A4%B3%A6%C0%FE&quot;&gt;世界線&lt;/a&gt;の話をします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl+hjkl&lt;/code&gt; で矢印キーを入力したい気持ちになることが人類にはよくあると思います&lt;a href=&quot;#f-268e28f8&quot; name=&quot;fn-268e28f8&quot; title=&quot;矢印キーまで指を伸ばすのはだるいので&quot;&gt;*1&lt;/a&gt;。
これをxremapの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;で表現するとどうなるでしょうか&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;remap &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Control-h&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
remap &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Control-j&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Down&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
remap &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Control-k&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Up&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
remap &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Control-l&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;こうなります。&lt;/p&gt;

&lt;p&gt;これでめでたく&lt;code&gt;Ctrl+hjkl&lt;/code&gt;で矢印キーが入力できるようになったわけですが、ところでテキストを編集するときにマウスを使わずに範囲選択をしたくなることは、人類にはよくあります。
&lt;code&gt;Ctrl+hjkl&lt;/code&gt; のことを考えなければ、 &lt;strong&gt;Shiftを押しながら矢印キーを押してカーソルを移動する&lt;/strong&gt; ことで、上記を実現できます。&lt;/p&gt;

&lt;p&gt;「Shiftを押しながら」 なんだか怪しい雰囲気がしてきました。&lt;/p&gt;

&lt;p&gt;実際、当時のxremapで、 &lt;code&gt;Ctrl+hjkl&lt;/code&gt; の設定を入れた状態でShiftを押しながら&lt;code&gt;Ctrl+j&lt;/code&gt;を入力すると何が起こったかというと、何も起こりませんでした。
上の設定は &lt;code&gt;Ctrl+j&lt;/code&gt; の設定であって、 &lt;code&gt;Ctrl+Shift+j&lt;/code&gt; の設定ではないからですね。&lt;/p&gt;

&lt;p&gt;xremapの動作をもう少し詳しく説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xremapは起動時に、Xのサーバーに対して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/watch&quot;&gt;watch&lt;/a&gt;するキーの組み合わせを設定する&lt;/li&gt;
&lt;li&gt;Xは、設定された組み合わせのキーが入力されたとき、その旨をxremapに通知する&lt;/li&gt;
&lt;li&gt;xremapはキー入力の通知を受けると、キーを変換してXに入力する&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;のように動作するのですが、上の設定だと &lt;code&gt;Ctrl+j&lt;/code&gt; の組み合わせしか&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/watch&quot;&gt;watch&lt;/a&gt;しないので、&lt;code&gt;Ctrl+Shift+j&lt;/code&gt;が入力されてもxremapに通知が来ません。&lt;/p&gt;

&lt;p&gt;これを解決するために、rumapで導入したのが with_modifier オプションです。&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;remap &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Control-h&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;to&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;with_modifier&lt;/span&gt;: &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;Shift&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
...
&lt;/pre&gt;


&lt;p&gt;このように &lt;code&gt;with_modifier: &#39;Shift&#39;&lt;/code&gt; を指定すると、rumapは立ち上げ時に、&lt;code&gt;Ctrl+h&lt;/code&gt; に加えて &lt;code&gt;Ctrl+Shift+h&lt;/code&gt; も&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/watch&quot;&gt;watch&lt;/a&gt;します。そして、 &lt;code&gt;Ctrl+h&lt;/code&gt; を &lt;code&gt;←&lt;/code&gt; に変換し、&lt;code&gt;Shift&lt;/code&gt;も押されていた場合は &lt;code&gt;Shift+←&lt;/code&gt; に変換します。つまり、 &lt;code&gt;Ctrl+h (+Shift)&lt;/code&gt; を &lt;code&gt;← (+Shift)&lt;/code&gt; に変換します。&lt;/p&gt;

&lt;p&gt;これによって、 &lt;code&gt;Ctrl+Shift+hjkl&lt;/code&gt; を同時押しすることで、テキストの範囲選択が可能になります。&lt;/p&gt;

&lt;h3&gt;なんで本家にcontributeせえへんねん&lt;/h3&gt;

&lt;p&gt;当初は、xremapにpatchを当てることによって上記の問題を解決しようとしており。PRも出すには出しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/k0kubun/xremap/pull/36&quot;&gt;Pass unmatched modifiers by genya0407 &amp;middot; Pull Request #36 &amp;middot; k0kubun/xremap &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この実装は、上で説明した with_modifier オプションとは違って、 全ての modifier の組み合わせを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/watch&quot;&gt;watch&lt;/a&gt;します。
そして、通知されてきた入力のうち、設定されている部分について変換処理をします。&lt;/p&gt;

&lt;p&gt;例えば、 &lt;code&gt;remap &#39;Control-h&#39;, to: &#39;Left&#39;&lt;/code&gt; と設定していたら、&lt;code&gt;h&lt;/code&gt;を含む全ての入力(&lt;code&gt;h&lt;/code&gt;、&lt;code&gt;Ctrl+h&lt;/code&gt;、&lt;code&gt;Ctrl+Shift+h&lt;/code&gt;、&lt;code&gt;Ctrl+Alt+h&lt;/code&gt;、、、)を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/watch&quot;&gt;watch&lt;/a&gt;し、&lt;code&gt;Ctrl+Alt+j&lt;/code&gt; が入力されてきたら、 &lt;code&gt;Alt+↓&lt;/code&gt;に変換する、といった感じです。&lt;/p&gt;

&lt;p&gt;これは設定が短くて済むという利点はあるのですが、PRを出した直後にバグに気づいたのでPRを取り下げました。&lt;/p&gt;

&lt;p&gt;もう記憶があんまりないのですが、たしか &lt;code&gt;Alt+j&lt;/code&gt; → &lt;code&gt;Ctrl+j&lt;/code&gt; みたいな設定をしていると、変換後の &lt;code&gt;Ctrl+j&lt;/code&gt; も &lt;code&gt;j&lt;/code&gt; を含んでいるため通知が飛んできて、xremapが無限ループして死ぬ、というようなバグだったと思います。&lt;/p&gt;

&lt;p&gt;この問題を解決するには、上で説明したような with_modifier オプションを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;に導入すればよいのですが&lt;a href=&quot;#f-cc59fa96&quot; name=&quot;fn-cc59fa96&quot; title=&quot;厳密には、Ctrl+h → Ctrl+h みたいな設定をしてると無限ループは回避できないけど、そんな設定をする人類はいないと仮定する&quot;&gt;*2&lt;/a&gt;、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;の文法についての交渉をするのが面倒だった&lt;a href=&quot;#f-7a5f639d&quot; name=&quot;fn-7a5f639d&quot; title=&quot;よく考えると、後方互換性を保ったままDSLを拡張できるので割とすんなり行けたんじゃないかって気はする&quot;&gt;*3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;既存のコードをいい感じに修正するのが大変そうだった(たしか)&lt;/li&gt;
&lt;li&gt;xremapをコードリーディングして実装を概ね把握したことで、勉強も兼ねて自分で一から実装したくなった&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;などの理由から自分で実装することにしました。&lt;/p&gt;

&lt;h2&gt;その他、考えたことなど&lt;/h2&gt;

&lt;p&gt;作ってるときに考えたことなどをつらつらと書いていきます&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/x11&quot;&gt;x11&lt;/a&gt;ライブラリ&lt;/h3&gt;

&lt;p&gt;Xの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を叩くために、&lt;a href=&quot;https://github.com/erlepereira/x11-rs&quot;&gt;x11&lt;/a&gt;というライブラリを使いました。これはXlibの非常に薄いラッパーで、Cの関数を呼ぶのでunsafeな操作ばかりです&lt;a href=&quot;#f-1f09a14a&quot; name=&quot;fn-1f09a14a&quot; title=&quot;余談ですが、unsafeな操作は上で説明したコアロジックには存在しません。なぜなら、unsafeな操作をするのはX依存のモジュールだけだからです。&quot;&gt;*4&lt;/a&gt;。ただ、薄いラッパーであることによって、Xlibのドキュメントがそのまま使えたのは助かりました。&lt;/p&gt;

&lt;p&gt;一番困ったのはXlibのドキュメント(というか&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB&quot;&gt;チュートリアル&lt;/a&gt;)がないことで、仕方がないので xremap の実装を何度も読み返しました。&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;以外のOSに(理論上)拡張できるようにした&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;以外のOSに拡張できるように、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;(X)に依存する部分と、そうでない &quot;コアロジック&quot; を分離するようにしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;X依存の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;: &lt;a href=&quot;https://github.com/genya0407/rumap/tree/master/linux&quot;&gt;rumap/linux at master &amp;middot; genya0407/rumap &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;コア&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;: &lt;a href=&quot;https://github.com/genya0407/rumap/tree/master/mapper&quot;&gt;rumap/mapper at master &amp;middot; genya0407/rumap &amp;middot; GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;これによって、(理論上は)例えば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;や&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/macOS&quot;&gt;macOS&lt;/a&gt;でも使えるように、rumapを拡張できるはずです&lt;a href=&quot;#f-fa17d6d5&quot; name=&quot;fn-fa17d6d5&quot; title=&quot;実際には、X固有だと思ってたロジックがコアロジックだったとか、他の環境だとコアロジックが使い物にならん、みたいなのはあるとは思いますが、そのあたりはやってみないとわからない&quot;&gt;*5&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ただ、コアロジックと環境依存&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;をうまく分離できていないのか、あるいは分離の仕方が悪いからかもしれませんが、コア&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;のコードに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9&quot;&gt;ジェネリクス&lt;/a&gt;が大量に発生してしまい、非常に読みづらく、また&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9&quot;&gt;ジェネリクス&lt;/a&gt;関連のコピペが多くなっています。&lt;/p&gt;

&lt;p&gt;他環境にも拡張しないとただ単にコードの複雑性を増しただけになってしまうので拡張していきたい。しかし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/mac&quot;&gt;mac&lt;/a&gt;にはkarabinarがあるし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;を使うことは基本的にないし、なかなかモチベーションが生まれないというのが正直なところです。&lt;/p&gt;

&lt;h3&gt;Cargoのworkspaceが便利&lt;/h3&gt;

&lt;p&gt;上に説明した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8&quot;&gt;コンポーネント&lt;/a&gt;の分離を実現するために、Cargoのworkspace機能を使ったのですが結構便利でした。&lt;/p&gt;

&lt;p&gt;レポジトリを見てもらうと、 &lt;code&gt;linux&lt;/code&gt; と &lt;code&gt;mapper&lt;/code&gt; という2つの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&quot;&gt;ディレクト&lt;/a&gt;リが存在し、それぞれが1つのcrateになっています&lt;a href=&quot;#f-d8da9e85&quot; name=&quot;fn-d8da9e85&quot; title=&quot;Cargo.tomlもそれぞれ持っている&quot;&gt;*6&lt;/a&gt;&lt;a href=&quot;#f-6c108e88&quot; name=&quot;fn-6c108e88&quot; title=&quot;linuxがX依存部分、mapperがコアロジック&quot;&gt;*7&lt;/a&gt;。
そして、Cargo.tomlに以下のように記述することで、1つのworkspaceとしてまとめています。&lt;/p&gt;

&lt;pre class=&quot;code toml&quot; data-lang=&quot;toml&quot; data-unlink&gt;[workspace]
members = [
  &amp;#34;mapper&amp;#34;,
  &amp;#34;linux&amp;#34;,
]&lt;/pre&gt;


&lt;p&gt;この設定により、それぞれのcrateを、依存関係をもたせながら独立にビルドすることができます。&lt;/p&gt;

&lt;p&gt;例えば、 &lt;code&gt;linux/Cargo.toml&lt;/code&gt; に以下のように記述することで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/linux&quot;&gt;linux&lt;/a&gt; crateからmapper crateを利用することができます。&lt;/p&gt;

&lt;pre class=&quot;code toml&quot; data-lang=&quot;toml&quot; data-unlink&gt;[dependencies]
mapper = { path = &amp;#34;../mapper&amp;#34; }&lt;/pre&gt;


&lt;p&gt;また、以下のようにすることで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/linux&quot;&gt;linux&lt;/a&gt; crate (と、それが依存するmapper crate)のみをビルドすることができます。&lt;/p&gt;

&lt;pre class=&quot;code shell&quot; data-lang=&quot;shell&quot; data-unlink&gt;$ cd linux
$ cargo build&lt;/pre&gt;


&lt;p&gt;今回の例では全てのcrateがビルドされてしまうのでありがたみがないですが、例えば &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/macos&quot;&gt;macos&lt;/a&gt; crate を追加したとき、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;上では &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/macos&quot;&gt;macos&lt;/a&gt; crate のビルドが通らないとしても、 &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/linux&quot;&gt;linux&lt;/a&gt; crate のみをビルドすることが可能です。&lt;/p&gt;

&lt;p&gt;共通機能を持ちつつもそれを利用したアプリケーションが複数あるような場合に、とても便利そうだなと思いました。&lt;/p&gt;

&lt;h3&gt;外部の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;コマンドに依存するのをやめたい&lt;/h3&gt;

&lt;p&gt;xremap の「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;で設定が書ける」という特徴は革命的に便利なので、rumapでもこの特徴は引き継ぎたいと思っていました。xremapはmrubyで実装しているから&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ruby&quot;&gt;ruby&lt;/a&gt;のコードを評価するのは簡単ですが、Rustでそれをどう実現すればよいでしょうか。&lt;/p&gt;

&lt;p&gt;なんとrumapは、 &lt;strong&gt;外部の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;コマンドを実行する&lt;/strong&gt; ことで、設定ファイルを評価しています。具体的には、引数に指定されたファイルをinstance_evalして結果を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;文字列にする&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;を書いて、rumap起動時にその&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;を起動して設定ファイルを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;に変換し、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を元にrumapを初期化するようにしています&lt;a href=&quot;#f-ec1f6d16&quot; name=&quot;fn-ec1f6d16&quot; title=&quot;JSONを作れるならなんでもいいので、例えばPythonのDSLを作って組み込むことも可能なはずです。&quot;&gt;*8&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;外部の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;コマンドに依存するのはダサいし、外部要因で動いたり動かなかったりするのはつらいので、どうにかしたいと思っています。
この記事を書いてるときに見つけた以下のcrateを使えば、いい感じにできるはず。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fanima-engine%2Fmrusty&quot; title=&quot;anima-engine/mrusty&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/anima-engine/mrusty&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;で設定を書ける&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;用のキーマッパーを作りました。ほとんど xremap のパクりですが、微妙に機能が増えています。&lt;/p&gt;

&lt;p&gt;いろいろと実装上の反省点はあるのですが、自分が便利に使えているのでひとまずはいいかなと思っています。&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-268e28f8&quot; name=&quot;f-268e28f8&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;矢印キーまで指を伸ばすのはだるいので&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-cc59fa96&quot; name=&quot;f-cc59fa96&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;厳密には、Ctrl+h → Ctrl+h みたいな設定をしてると無限ループは回避できないけど、そんな設定をする人類はいないと仮定する&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-7a5f639d&quot; name=&quot;f-7a5f639d&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;よく考えると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B8%E5%CA%FD%B8%DF%B4%B9&quot;&gt;後方互換&lt;/a&gt;性を保ったまま&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;を拡張できるので割とすんなり行けたんじゃないかって気はする&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-1f09a14a&quot; name=&quot;f-1f09a14a&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;余談ですが、unsafeな操作は上で説明したコアロジックには存在しません。なぜなら、unsafeな操作をするのはX依存のモジュールだけだからです。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-fa17d6d5&quot; name=&quot;f-fa17d6d5&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;実際には、X固有だと思ってたロジックがコアロジックだったとか、他の環境だとコアロジックが使い物にならん、みたいなのはあるとは思いますが、そのあたりはやってみないとわからない&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-d8da9e85&quot; name=&quot;f-d8da9e85&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;Cargo.tomlもそれぞれ持っている&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-6c108e88&quot; name=&quot;f-6c108e88&quot; class=&quot;footnote-number&quot;&gt;*7&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/linux&quot;&gt;linux&lt;/a&gt;がX依存部分、mapperがコアロジック&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-ec1f6d16&quot; name=&quot;f-ec1f6d16&quot; class=&quot;footnote-number&quot;&gt;*8&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を作れるならなんでもいいので、例えば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;を作って組み込むことも可能なはずです。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="Rust" label="Rust" />
        
        <category term="Ruby" label="Ruby" />
        
        <link rel="enclosure" href="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>標準入力からヒストグラムを描画するCLIツールを作った</title>
        <link href="https://dawn.hateblo.jp/entry/2020/09/24/235949"/>
        <id>hatenablog://entry/26006613632069181</id>
        <published>2020-09-24T23:59:49+09:00</published>
        <updated>2020-10-08T22:11:29+09:00</updated>        <summary type="html">標準入力をいい感じにヒストグラムにするCLIツールを作りました。 GitHub - genya0407/hist インストール Releases · genya0407/hist · GitHub からお好きなバイナリをダウンロードして、適当なパスに展開してください 使い方 なんかこういう感じのテキストファイルがあるとする。 $ cat example.txt 4.486107060301375 4.400612185880518 3.1836054290123 1.8814038706949097 3.367418962291763 2.5550752855238943 2.76469696…</summary>
        <content type="html">&lt;p&gt;標準入力をいい感じに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D2%A5%B9%A5%C8%A5%B0%A5%E9%A5%E0&quot;&gt;ヒストグラム&lt;/a&gt;にする&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CLI&quot;&gt;CLI&lt;/a&gt;ツールを作りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/genya0407/hist&quot;&gt;GitHub - genya0407/hist&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;インストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/genya0407/hist/releases&quot;&gt;Releases &amp;middot; genya0407/hist &amp;middot; GitHub&lt;/a&gt; からお好きなバイナリをダウンロードして、適当なパスに展開してください&lt;/p&gt;

&lt;h2&gt;使い方&lt;/h2&gt;

&lt;p&gt;なんかこういう感じのテキストファイルがあるとする。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat example.txt
4.486107060301375
4.400612185880518
3.1836054290123
1.8814038706949097
3.367418962291763
2.5550752855238943
2.7646969681590603
4.099374705165457
4.765991107086257
3.1929965581891215
...（略）&lt;/pre&gt;


&lt;p&gt;これをhistコマンドの標準入力に食わせると、以下のようなAAが出力される。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;cat example.txt | hist
466.1|
468.3|
470.5|
472.7|
474.9|**
477.1|**
479.3|****
481.4|********
483.6|*************
485.8|************************
488.0|******************************
490.2|******************************************
492.4|*****************************************************
494.6|*******************************************************************
496.8|**********************************************************************
499.0|********************************************************************************
501.1|***************************************************************************
503.3|*************************************************************************
505.5|*****************************************************************
507.7|*******************************************************
509.9|**************************************
512.1|***********************************
514.3|*******************
516.5|***************
518.6|*********
520.8|*****
523.0|**
525.2|*
527.4|
529.6|
531.8|
     +--------------------------------------------------------------------------------+ 995 times
     +----------------------------------------+ 497 times&lt;/pre&gt;


&lt;p&gt;縦軸が「値」で、横軸が「頻度」です。上の例だと、500ぐらいの値が出る頻度が一番高くて、その頻度は1000回ぐらいであることがわかります。&lt;/p&gt;

&lt;p&gt;ちなみに、横軸の高さを調整するオプションや、値をグルーピングする単位(いわゆる &lt;b&gt;bin&lt;/b&gt;)を調整するオプションもあります。&lt;/p&gt;

&lt;p&gt;contributionは大歓迎です。あと、入力の行数が少ないときにバグっぽい挙動をするので注意してください。&lt;/p&gt;

&lt;h2&gt;モチベーション&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B9%A5%ED%A5%B0&quot;&gt;アクセスログ&lt;/a&gt;とかDBの中身を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D2%A5%B9%A5%C8%A5%B0%A5%E9%A5%E0&quot;&gt;ヒストグラム&lt;/a&gt;にしたいことは稀によくある。例えば「ユーザーあたりのブログポスト数ってどういう分布になってるのかな？」みたいなのを知りたいなど。&lt;/p&gt;

&lt;p&gt;継続的に見ていきたいメトリクスならGrafanaとかのキチンとしたツールで見たほうが良いと思うんですが、&lt;b&gt;今この瞬間&lt;/b&gt;サッと見れるだけでいいんだけど、というニーズも少なからずあります。そういうときにいちいちjupyter notebookを立ち上げて、seabornの書き方を調べながら、フォント環境が壊れててイライラしたり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gnuplot&quot;&gt;gnuplot&lt;/a&gt;でいい感じに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D2%A5%B9%A5%C8%A5%B0%A5%E9%A5%E0&quot;&gt;ヒストグラム&lt;/a&gt;を書こうとして四苦八苦するのは不毛です&lt;a href=&quot;#f-6be7ad52&quot; name=&quot;fn-6be7ad52&quot; title=&quot;もちろん、使い慣れてる人ならそんなに大変じゃないとは思いますけど、僕はあんまり使い慣れてないので...&quot;&gt;*1&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;見たい対象のデータがどこにあるのかによっても違ってきますけど&lt;a href=&quot;#f-2f6a6339&quot; name=&quot;fn-2f6a6339&quot; title=&quot;例えば、elasticsearchにアクセスログが入ってるケースとかは、histコマンドで取り扱うのには不適切かも。素直にkibanaを導入したほうが良さそう。&quot;&gt;*2&lt;/a&gt;、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B9%A5%ED%A5%B0&quot;&gt;アクセスログ&lt;/a&gt;をテキストファイル形式で扱う場合や、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;にクエリを打ってデータ取ってくるときは、シェルからデータが生まれてくるわけで、シェルのなかでグラフ描画までできたら楽でいいですよね。&lt;/p&gt;

&lt;p&gt;というわけで、「シェルから生まれてきた数字列をそれっぽい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D2%A5%B9%A5%C8%A5%B0%A5%E9%A5%E0&quot;&gt;ヒストグラム&lt;/a&gt;AAに起こす」という処理を例によって&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EF%A5%F3%A5%E9%A5%A4%A5%CA%A1%BC&quot;&gt;ワンライナー&lt;/a&gt;で毎度毎度書いてたんですが、ちゃんとした&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D2%A5%B9%A5%C8%A5%B0%A5%E9%A5%E0&quot;&gt;ヒストグラム&lt;/a&gt;を書くのは意外にめんどくさいので&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CLI&quot;&gt;CLI&lt;/a&gt;ツールにしちゃおと思ったのが、今回histコマンドを作ろうと思ったきっかけです。&lt;/p&gt;

&lt;h2&gt;メイキング&lt;/h2&gt;

&lt;h3&gt;Rustの良いところ&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CLI&quot;&gt;CLI&lt;/a&gt;ツールがいい感じに作れてすごかった(小並感)。&lt;/p&gt;

&lt;p&gt;この argopt ってcrateがめっちゃ便利。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftanakh.hatenablog.com%2Fentry%2F2020%2F08%2F31%2F032946&quot; title=&quot;argopt: Rust向けの宣言的なコマンドライン引数パーザー - 純粋関数型雑記帳&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://tanakh.hatenablog.com/entry/2020/08/31/032946&quot;&gt;tanakh.hatenablog.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;詳しくは上のリンクを読んでもらったら良いんですけど、例えば以下のように書いて&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;して実行すると、&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;argopt&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;cmd;

&lt;span class=&quot;synPreProc&quot;&gt;#[cmd]&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;(
    &lt;span class=&quot;synPreProc&quot;&gt;#[opt(short = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;, long = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;bin&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)]&lt;/span&gt; bin: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
    &lt;span class=&quot;synPreProc&quot;&gt;#[opt(short = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;, long = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;bar-length&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;, default_value = &lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;80&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)]&lt;/span&gt; bar_length: &lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;,
) {
  &lt;span class=&quot;synComment&quot;&gt;// 略&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;以下のような出力が得られます。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ hist --help
hist 0.1.0

USAGE:
    hist [OPTIONS]

FLAGS:
    -h, --help       Prints help information
    -V, --version    Prints version information

OPTIONS:
    -l, --bar-length &amp;lt;bar-length&amp;gt;     [default: 80]
    -b, --bin &amp;lt;bin&amp;gt;      &lt;/pre&gt;


&lt;p&gt;もちろんmain関数の引数にはいい感じに引数が渡ってきます。これはちょっと感動的に便利ですよね。
今回Rustで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CLI&quot;&gt;CLI&lt;/a&gt;作ろうと思ったきっかけの1/4ぐらいは、argoptの紹介記事を読んだことです。&lt;/p&gt;

&lt;p&gt;余談ですが、最新のバージョン(v0.1.1)のargoptは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/dependency&quot;&gt;dependency&lt;/a&gt;としてargoptを指定するだけじゃ動かなくて、structoptも指定してあげないとダメっぽかったので、issueを立てて報告しました(英語が拙い)。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Ftanakh%2Fargopt%2Fissues%2F1&quot; title=&quot;Did not compile without structopt crate · Issue #1 · tanakh/argopt&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/tanakh/argopt/issues/1&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Github&quot;&gt;Github&lt;/a&gt; Actionsがべんり&lt;/h3&gt;

&lt;p&gt;これもすごかった。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fmotemen.hatenablog.com%2Fentry%2F2019%2F11%2Fgithub-actions-crossbuild-rust&quot; title=&quot;GitHub ActionsでRustプロジェクトをクロスビルドしてリリースする - 詩と創作・思索のひろば&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://motemen.hatenablog.com/entry/2019/11/github-actions-crossbuild-rust&quot;&gt;motemen.hatenablog.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;この記事を真似するだけで、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タグをpushすると&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/macOS&quot;&gt;macOS&lt;/a&gt;/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;用バイナリのビルドが走り&lt;/li&gt;
&lt;li&gt;各種プラットフォーム向けのバイナリ一覧を含んだリリースが作成される&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という魔法みたいな状態を構築することができます。当然ビルドされたバイナリは展開してPATHに置くだけで実行できる。シングルバイナリ最高です。今まで僕が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CLI&quot;&gt;CLI&lt;/a&gt;作って配布方法をウンウン悩んでたのは何だったんだろう...&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;標準入力から&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D2%A5%B9%A5%C8%A5%B0%A5%E9%A5%E0&quot;&gt;ヒストグラム&lt;/a&gt;を描画する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CLI&quot;&gt;CLI&lt;/a&gt;ツールをRustで作りました。Rustは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CLI&quot;&gt;CLI&lt;/a&gt;ツールを作成・配布する上でとても楽な選択肢であり、オススメです。&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-6be7ad52&quot; name=&quot;f-6be7ad52&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;もちろん、使い慣れてる人ならそんなに大変じゃないとは思いますけど、僕はあんまり使い慣れてないので...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-2f6a6339&quot; name=&quot;f-2f6a6339&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;例えば、elasticsearchに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B9%A5%ED%A5%B0&quot;&gt;アクセスログ&lt;/a&gt;が入ってるケースとかは、histコマンドで取り扱うのには不適切かも。素直にkibanaを導入したほうが良さそう。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <link rel="enclosure" href="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>scanコマンドというcliツールを作った</title>
        <link href="https://dawn.hateblo.jp/entry/2020/06/17/235709"/>
        <id>hatenablog://entry/26006613586386940</id>
        <published>2020-06-17T23:57:09+09:00</published>
        <updated>2020-10-08T22:08:50+09:00</updated>        <summary type="html">scanコマンドというcliツールを作った。 GitHub - genya0407/scan scanコマンドは、標準入力の各行に対して正規表現を適用し、ほしい部分を取り出すコマンドだ。使い方は以下の通り。 $ scan --help Usage: scan [options] OUTPUT_FORMAT -p [PATTERN] specify regexp -d [DELIMITER] specify delimiter 使用例を見てもらったほうが早いだろう。 使用例 正規表現を適用する例 例えばこういうファイルがあったとする。 $ cat data.txt hogehoge_nyan h…</summary>
        <content type="html">&lt;p&gt;scanコマンドという&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/cli&quot;&gt;cli&lt;/a&gt;ツールを作った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/genya0407/scan&quot;&gt;GitHub - genya0407/scan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;scanコマンドは、標準入力の各行に対して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を適用し、ほしい部分を取り出すコマンドだ。使い方は以下の通り。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ scan --help
Usage: scan [options] OUTPUT_FORMAT
    -p [PATTERN]                     specify regexp
    -d [DELIMITER]                   specify delimiter&lt;/pre&gt;


&lt;p&gt;使用例を見てもらったほうが早いだろう。&lt;/p&gt;

&lt;h2&gt;使用例&lt;/h2&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を適用する例&lt;/h3&gt;

&lt;p&gt;例えばこういうファイルがあったとする。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat data.txt
hogehoge_nyan
hohho_nyan&lt;/pre&gt;


&lt;p&gt;これに対して、アンダースコアの左だけを取り出す&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を適用するには、以下のようにする。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat data.txt | scan -p &amp;#34;(.+?)_.+&amp;#34; {1}
hogehoge
hohho&lt;/pre&gt;


&lt;p&gt;アンダースコアの左と右を、 &lt;code&gt;,&lt;/code&gt; で繋いで出力したいときは以下のようにする。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat data.txt | scan -p &amp;#34;(.+?)_(.+)&amp;#34; {1},{2}
hogehoge,nyan
hohho,nyan&lt;/pre&gt;


&lt;p&gt;複雑な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を適用するときは、名前付きキャプチャも使用できる。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat data.txt | scan -p &amp;#34;(?&amp;lt;name1&amp;gt;.+?)_(?&amp;lt;name2&amp;gt;.+)&amp;#34; {name1}:{name2}
hogehoge:nyan
hohho:nyan&lt;/pre&gt;


&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;エンジンは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;標準のものをそのまま使っているので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;の詳しい仕様についてはリファレンスをあたってください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/ja/latest/doc/spec=2fregexp.html&quot;&gt;&amp;#x6B63;&amp;#x898F;&amp;#x8868;&amp;#x73FE; (Ruby 2.7.0 &amp;#x30EA;&amp;#x30D5;&amp;#x30A1;&amp;#x30EC;&amp;#x30F3;&amp;#x30B9;&amp;#x30DE;&amp;#x30CB;&amp;#x30E5;&amp;#x30A2;&amp;#x30EB;)&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;区切り文字を指定する例&lt;/h3&gt;

&lt;p&gt;また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を使うのではなく、区切り文字を指定することもできる。&lt;/p&gt;

&lt;p&gt;例えばこういうファイルがあったとする。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat hoge.csv
aaa,bbb,ccc
xxx,yyy,zzz&lt;/pre&gt;


&lt;p&gt;このとき、区切り文字として &lt;code&gt;,&lt;/code&gt; を指定して、左から3番目のフィールドを切り出すためには以下のようにする。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat hoge.csv | scan -d , {3}
ccc
zzz&lt;/pre&gt;


&lt;p&gt;また、scanコマンドに何もオプションを指定しない場合、区切り文字として &lt;code&gt;\s+&lt;/code&gt; つまり「1つ以上連続する空白文字列」が指定されていると解釈される。&lt;/p&gt;

&lt;p&gt;例えばこういうファイルがあるとする。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat hoge.tsv
aaa     bbb     ccc
xxx     yyy     zzz&lt;/pre&gt;


&lt;p&gt;このファイルを、オプションを何も指定しないscanコマンドに食わせると、空白文字を区切りと解釈して左からn番目の文字列を取り出すことができる。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat hoge.tsv | scan {2}
bbb
yyy&lt;/pre&gt;


&lt;h2&gt;インストール方法&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt; 2.6.3 以上が動く環境を前提として、以下のファイルをパスが通った場所に配置して、実行権限を付与すれば動く。依存ライブラリとかはなく、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;があれば動きます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/genya0407/scan/blob/master/scan&quot;&gt;scan/scan at master &amp;middot; genya0407/scan &amp;middot; GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もう少しいい感じのインストール方法を模索していますが、ひとまずはこれで許してください。&lt;/p&gt;

&lt;h2&gt;なぜこのコマンドを作ったのか&lt;/h2&gt;

&lt;p&gt;仕事柄(?)、バグが出たときとかにサーバーのログを漁る必要にかられることがよくある。そういうときに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;は便利だ。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat server.log | (アクセスしたユーザーのIDをいい感じに取り出す正規表現) | sort | uniq -c
100 user_id_111 # user_id_111 が100回もアクセスしているのがわかる
 10 user_id_222
..&lt;/pre&gt;


&lt;p&gt;しかし、&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;をシュッと書いて値を抜き出す適用するツール&lt;/b&gt;が見当たらなかった&lt;a href=&quot;#f-732f754d&quot; name=&quot;fn-732f754d&quot; title=&quot;古参のエンジニアの皆さんはおすすめの正規表現ツールでも書いててください&quot;&gt;*1&lt;/a&gt;。多分&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/awk&quot;&gt;awk&lt;/a&gt;とか&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/perl&quot;&gt;perl&lt;/a&gt;とかの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EF%A5%F3%A5%E9%A5%A4%A5%CA%A1%BC&quot;&gt;ワンライナー&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;をかけるとは思うのだが、僕は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/awk&quot;&gt;awk&lt;/a&gt;も&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/perl&quot;&gt;perl&lt;/a&gt;も使い方がわからないし、言語ごとに存在すると思われる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;の方言を覚えるのもなんだかなあという気持ちだった。&lt;/p&gt;

&lt;p&gt;僕が一番使える&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC&quot;&gt;プログラミング言語&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;なので、一時期は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EF%A5%F3%A5%E9%A5%A4%A5%CA%A1%BC&quot;&gt;ワンライナー&lt;/a&gt;を書くということをやっていた。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ cat server.log | ruby -ne &amp;#39;puts $_[/user_id: (.+)\s+/, 1]&amp;#39; | sort | uniq -c&lt;/pre&gt;


&lt;p&gt;これも割といい線行ってるとは思うが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;で値を抜き出したいだけなのに &lt;code&gt;ruby -ne&lt;/code&gt; とか &lt;code&gt;puts&lt;/code&gt; とか &lt;code&gt;$_&lt;/code&gt; とか書くのはイケてない。&lt;/p&gt;

&lt;p&gt;次に使ってたのはrargsというツールで、これは限りなく正解に近い。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lotabout/rargs&quot;&gt;GitHub - lotabout/rargs: xargs + awk with pattern matching support. `ls *.bak | rargs -p &amp;#39;(.*)\.bak&amp;#39; mv {0} {1}`&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;rargsは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を指定して文字列を抜き出すことができ、抜き出した文字列を使ったコマンドを実行することができる。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;の代わりに区切り文字を指定することもできる。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ ls *.bak | rargs -p &amp;#39;(.*)\.bak&amp;#39; mv {0} {1}
$ cat hoge.csv | rargs -d , echo {2}&lt;/pre&gt;


&lt;p&gt;しかし、rargsはコマンドを実行する都合上、入力される行の数だけプロセスを立ち上げる必要がある。環境にもよるが、プロセスの立ち上げはそこそこヘビーな処理で、業務で使っている&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MacBook%20Pro&quot;&gt;MacBook Pro&lt;/a&gt;ではここがものすごく重かった&lt;a href=&quot;#f-80f1c753&quot; name=&quot;fn-80f1c753&quot; title=&quot;Instrumentsでプロファイルしたらposix_nspawnでめちゃめちゃ時間喰ってた。おそらくMacBook Proが悪いのではなく、セキュリティソフトかなにかが原因で遅いのではないかと疑っている。お家で使ってるThinkipad上のLinuxでは全然重くなかった。&quot;&gt;*2&lt;/a&gt;。そのため、長めのログファイルをrargsに食わせると、ちょっと現実的ではないぐらい集計に時間がかかってしまう状態になっていた。&lt;/p&gt;

&lt;p&gt;私が望む用途(=ログの集計)ではコマンドを実行する必要はない。そのため、rargsからコマンド実行の機能を削り、高速に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;を適用するだけのコマンドを作ればよいだろう、という発想に至った。&lt;/p&gt;

&lt;p&gt;そして、今回説明したscanコマンドを作った。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;標準入力に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;をシュッと適用して、好きなフォーマットに整形して出力するコマンドである &lt;code&gt;scan&lt;/code&gt; を作った。これは、ログの集計・整形などに使うことができ、実用的なレベルには高速であり、自身も便利に使っている。&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-732f754d&quot; name=&quot;f-732f754d&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;古参のエンジニアの皆さんはおすすめの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD&quot;&gt;正規表現&lt;/a&gt;ツールでも書いててください&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-80f1c753&quot; name=&quot;f-80f1c753&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;Instrumentsでプロファイルしたら&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/posix&quot;&gt;posix&lt;/a&gt;_nspawnでめちゃめちゃ時間喰ってた。おそらく&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MacBook%20Pro&quot;&gt;MacBook Pro&lt;/a&gt;が悪いのではなく、セキュリティソフトかなにかが原因で遅いのではないかと疑っている。お家で使ってるThinkipad上の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Linux&quot;&gt;Linux&lt;/a&gt;では全然重くなかった。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <link rel="enclosure" href="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>画像入りzipを人物認識してエクセルに変換する「マイクロサービス」を作った</title>
        <link href="https://dawn.hateblo.jp/entry/2020/05/24/122350"/>
        <id>hatenablog://entry/26006613572814310</id>
        <published>2020-05-24T12:23:50+09:00</published>
        <updated>2020-10-08T22:09:08+09:00</updated>        <summary type="html">概要 例の建築家の同期が、動画に映る人の位置を1秒ごとに目視で認識するという虚無作業をしていたので、自動化するWebアプリ的なものを作りました。 github.com 使い方 まず、人物認識したい動画をお好みの間隔(1秒毎とか)で画像に切り出し、適当なフォルダにいれてzip圧縮します。 そして、今回作ったWebアプリを開きます。以下はWebアプリのスクリーンショットです。 GCPのアクセストークンを頑張って取得して、「アクセストークン」という入力欄にコピペします。そして、先程のzipファイルを選択します。最後に「変換」ボタンを押すと、以下のようなエクセルファイルがダウンロードされます。 左端の…</summary>
        <content type="html">&lt;h3&gt;概要&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://dawn.hateblo.jp/entry/teach-how-to-write-html&quot;&gt;例の建築家の同期&lt;/a&gt;が、動画に映る人の位置を1秒ごとに目視で認識するという虚無作業をしていたので、自動化するWebアプリ的なものを作りました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fgenya0407%2Fboxboxbox&quot; title=&quot;genya0407/boxboxbox&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/genya0407/boxboxbox&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h3&gt;使い方&lt;/h3&gt;

&lt;p&gt;まず、人物認識したい動画をお好みの間隔(1秒毎とか)で画像に切り出し、適当なフォルダにいれてzip圧縮します。
そして、今回作ったWebアプリを開きます。以下はWebアプリの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A1%BC%A5%F3%A5%B7%A5%E7%A5%C3%A5%C8&quot;&gt;スクリーンショット&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524011510.png&quot; alt=&quot;f:id:threetea0407:20200524011510p:plain&quot; title=&quot;f:id:threetea0407:20200524011510p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GCP&quot;&gt;GCP&lt;/a&gt;のアクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンを頑張って取得して、「アクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ン」という入力欄にコピペします。そして、先程のzipファイルを選択します。最後に「変換」ボタンを押すと、以下のようなエクセルファイルがダウンロードされます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524010137.png&quot; alt=&quot;f:id:threetea0407:20200524010137p:plain&quot; title=&quot;f:id:threetea0407:20200524010137p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;左端の列が画像ファイルの名前を表し、その隣の2列は人物を囲う長方形の左上の点の座標を表し、その隣の2列は右下の点の座標を表しています。これによって、画像の中のどの位置に人間が写っているのかを知ることができます。&lt;/p&gt;

&lt;p&gt;イメージとしては、以下のような写真を入れると２つの赤丸の座標が取れるという感じです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524012615.png&quot; alt=&quot;f:id:threetea0407:20200524012615p:plain&quot; title=&quot;f:id:threetea0407:20200524012615p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;どうやって実現しているのか&lt;/h3&gt;

&lt;p&gt;Cloud &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vision&quot;&gt;Vision&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;というのが世の中にはあって、物体認識をしてくれます。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcloud.google.com%2Fvision%2Fdocs%2Freference%2Frest%2Fv1%2Ffiles%2Fannotate&quot; title=&quot;Method: files.annotate  |  Cloud Vision API  |  Google Cloud&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://cloud.google.com/vision/docs/reference/rest/v1/files/annotate&quot;&gt;cloud.google.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;今回作ったWebアプリがやってるのは、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;zipを解凍して画像を取り出し&lt;/li&gt;
&lt;li&gt;画像を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;に埋め込んで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を叩き&lt;/li&gt;
&lt;li&gt;返ってきたデータを若干加工して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSV&quot;&gt;CSV&lt;/a&gt;にする&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という処理だけです。つまり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC&quot;&gt;機械学習&lt;/a&gt;的なものを自分で実装したわけではありません。&lt;/p&gt;

&lt;h3&gt;工夫した点&lt;/h3&gt;

&lt;h4&gt;動画から画像への変換をやらない&lt;/h4&gt;

&lt;p&gt;もともと同期の人がやりたかったことは、「ある街に定点カメラをおいて、その動画の中で人がどう動いているかを調べる」ということでした。&lt;/p&gt;

&lt;p&gt;今回は、動画から画像への変換はユーザーにやってもらい、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9&quot;&gt;Webサービス&lt;/a&gt;は画像入りzipから人物を認識するだけ、というインターフェースを採用しました。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;ユーザーが動画から画像を切り出す必要がある&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524021034.png&quot; alt=&quot;f:id:threetea0407:20200524021034p:plain&quot; title=&quot;f:id:threetea0407:20200524021034p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;ユーザーが動画から画像を切り出す必要がある&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;しかしこれを例えば、ユーザーに動画をアップロードさせて、それをWebアプリ側で画像に変換し、その画像に対して人物認識をする、というようなインターフェースにすることも可能です。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;動画を直接変換できる&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524021105.png&quot; alt=&quot;f:id:threetea0407:20200524021105p:plain&quot; title=&quot;f:id:threetea0407:20200524021105p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;動画を直接変換できる&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;後者のほうがユーザーの仕事が減り、一見すると便利なように見えます。しかし、このインターフェースには問題があります。&lt;/p&gt;

&lt;p&gt;例えば、今までは1秒ごとに画像を切り出していたけど、5秒ごとに切り出すようにしたい、というような要望が出てくることは容易に想像されます。そのたびに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;に手を入れてパラメータを修正するのは不毛です。そのようなパラメータをWebアプリ上で設定可能にすることも考えられますが、その場合は設定項目が無数に増えていくことになるでしょう&lt;a href=&quot;#f-888a240b&quot; name=&quot;fn-888a240b&quot; title=&quot;しかもそれらの設定項目のうち実際に使われるのは極少数であると予想します&quot;&gt;*1&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;また、一般にこの手の物体検出は、画像の中における物体の相対的な大きさによって、検出精度が大きく変わるようです&lt;a href=&quot;#f-fad8f014&quot; name=&quot;fn-fad8f014&quot; title=&quot;この場合、画質の粗さは問題とならず、純粋に画像全体のなかで物体が相対的にどのぐらいの大きさで写っているのかというのが重要っぽい&quot;&gt;*2&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;右奥に写った小さな人物は認識されない&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524114452.png&quot; alt=&quot;f:id:threetea0407:20200524114452p:plain&quot; title=&quot;f:id:threetea0407:20200524114452p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;右奥に写った小さな人物は認識されない&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;右奥を拡大すると認識されるようになる&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524114522.png&quot; alt=&quot;f:id:threetea0407:20200524114522p:plain&quot; title=&quot;f:id:threetea0407:20200524114522p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;右奥を拡大すると認識されるようになる&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: right;&quot;&gt;
&lt;span style=&quot;font-size: 80%&quot;&gt;&lt;a href=&quot;https://pixabay.com/ja/users/Joergelman-241223/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=347468&quot;&gt;Jörg Möller&lt;/a&gt;による&lt;a href=&quot;https://pixabay.com/ja/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=347468&quot;&gt;Pixabay&lt;/a&gt;からの画像&lt;/span&gt;
&lt;/p&gt;


&lt;p&gt;そのため、「大きな画像に沢山の人が小さく写っている」というような画像を対象にするときは、画像を適当なサイズに分割して検出にかけた上で、その結果を統合する処理が必要になります。その場合、どのような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;で画像を分割するか、またどのような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;で結果を統合するか、ということを考える必要があります。&lt;/p&gt;

&lt;p&gt;このように「動画を画像に変換する」という領域は、要求が変化しやすい上に、真面目に考えるとかなり複雑です。&lt;/p&gt;

&lt;p&gt;こうしたことを考え、動画から画像への変換方法に自由度を持たせ、かつアプリケーションの複雑度を下げるため、現行のような「画像をzipで固めてアップロードする」というインターフェースを採用しました。これによって、「動画を画像に変換する」という処理はこのソフトウェアの対象領域外となり、実装も使い方も非常に簡単になりました。&lt;/p&gt;

&lt;p&gt;また、「動画を1秒ごとに画像に切り出す」というような処理は、それ用のソフトウェアがすでに存在します。そのため、このようなインターフェースを採用しても、ユーザーの手間はそれほど変わりません。&lt;/p&gt;

&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;形式で出す&lt;/h4&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;で開けるというのはかなり重要です&lt;a href=&quot;#f-81ce4884&quot; name=&quot;fn-81ce4884&quot; title=&quot;Excelではなく正確にはCSVファイルを出力している&quot;&gt;*3&lt;/a&gt;。というのも、同期の人が使っているビジュアルプログラミング環境である&lt;a href=&quot;https://www.applicraft.com/products/rhinoceros/grasshopper/&quot;&gt;Grasshopper&lt;/a&gt;に、「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;からコピペでデータを貼り付けられるブロック」というのがあるからです&lt;a href=&quot;#f-31f00958&quot; name=&quot;fn-31f00958&quot; title=&quot;一般的に、Excelからコピペでデータを貼り付けられるソフトウェアは結構多い&quot;&gt;*4&lt;/a&gt;。これにより、認識した人物の座標をGrasshopper上で処理することができます。&lt;/p&gt;

&lt;p&gt;また、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;で開ける形式であるため、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C9%BD%B7%D7%BB%BB&quot;&gt;表計算&lt;/a&gt;によるデータの加工が可能です。例えば、画像ファイルに含まれる連番の番号を文字列処理で取り出して、「この人物は動画の何秒目に写っていたのか」というデータを取り出すことができます。プログラミングに不慣れな人にとっては、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C9%BD%B7%D7%BB%BB&quot;&gt;表計算&lt;/a&gt;のほうが敷居が低いため、これも便利な点です。&lt;/p&gt;

&lt;p&gt;同期の人がGrasshopper上で処理した例が以下です。これは、街並みの3Dモデル上に動画上の人物の位置を投影し、三次元空間上での人間の動きを分析したものです。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;やっとプログラムが完成したのだけど、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Google&quot;&gt;Google&lt;/a&gt;が提供する&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B3%D8%BD%AC&quot;&gt;機械学習&lt;/a&gt;のサービスや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B0%A5%E9%A5%B9%A5%DB%A5%C3%A5%D1%A1%BC&quot;&gt;グラスホッパー&lt;/a&gt;などを使って、固定カメラの動画から人を検出し、３D モデル上でユーザーの位置を特定することで、場所の使われ方を、より正確で多量な空間・時間の情報から分析できるようになった! &lt;a href=&quot;https://t.co/lTRuBNxeZU&quot;&gt;pic.twitter.com/lTRuBNxeZU&lt;/a&gt;&lt;/p&gt;&amp;mdash; Tomi (@T0m12345) &lt;a href=&quot;https://twitter.com/T0m12345/status/1263474486390722569?ref_src=twsrc%5Etfw&quot;&gt;May 21, 2020&lt;/a&gt;&lt;/blockquote&gt;


&lt;p&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GCP&quot;&gt;GCP&lt;/a&gt;のアクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンを入力させる&lt;/h4&gt;

&lt;p&gt;これはCloud &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vision&quot;&gt;Vision&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の利用料金を、利用者である同期に支払わせるための仕組みです。Cloud &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vision&quot;&gt;Vision&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;は非常に廉価に利用できますが、それでも60分の動画を1秒ごとに切り出した画像を全部物体検出する、みたいな処理をすると、無視できない料金が発生します。その料金を僕が負担するのは筋違いなので、何らかの手段で同期の人に料金を支払わせる必要があります。定期的に現金ないしはLINE Payとかでお金をやり取りしても良いですが煩雑です。&lt;/p&gt;

&lt;p&gt;そこで考え出したのが「アクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンを入力させる」というやり方で、これによって&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;の利用料金は同期の人のクレジットカードに直接請求されるため、私とのお金のやり取りが発生せずに済みます。なお、アクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンはサーバー上で保存しておらず、変換処理を行うたびに入力する必要があります&lt;a href=&quot;#f-8faa3840&quot; name=&quot;fn-8faa3840&quot; title=&quot;実際にはブラウザの機能で自動入力されるようです&quot;&gt;*5&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;技術的に特筆すべきこと&lt;/h3&gt;

&lt;h4&gt;Steepを使ってみた&lt;/h4&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;に型をつける技術というのが最近できつつあるのですが、それを使ってみました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fsoutaro%2Fsteep&quot; title=&quot;soutaro/steep&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/soutaro/steep&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;上のレポジトリから例をコピーしてきますが、以下のような型定義ファイルを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;とは別に書いて、テストみたいな感じで型チェックを回すという感じになります。&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@name&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@contacts&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Email&lt;/span&gt; | &lt;span class=&quot;synType&quot;&gt;Phone&lt;/span&gt;]

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; initialize: (&lt;span class=&quot;synConstant&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;) -&amp;gt; untyped
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; name: -&amp;gt; &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; contacts: -&amp;gt; &lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Email&lt;/span&gt; | &lt;span class=&quot;synType&quot;&gt;Phone&lt;/span&gt;]
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; guess_country: -&amp;gt; (&lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt; | &lt;span class=&quot;synConstant&quot;&gt;nil&lt;/span&gt;)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;今回書いた型定義ファイルは以下のような感じです(抜粋)。&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;interface _BoxLocalizer
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; localize: (&lt;span class=&quot;synConstant&quot;&gt;images&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Boxboxbox&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;BinaryImage&lt;/span&gt;]) -&amp;gt; ::&lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Boxboxbox&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Box&lt;/span&gt;]
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Boxboxbox&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;BoxLocalizer&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;GoogleVisionApiOnline&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@access_token&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@max_results&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Integer&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@min_percentage&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Float&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@max_retry&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Integer&lt;/span&gt;
  &lt;span class=&quot;synIdentifier&quot;&gt;@logger&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; initialize: (&lt;span class=&quot;synConstant&quot;&gt;access_token&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;max_results&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;min_percentage&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Float&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;max_retry&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Integer&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;?logger&lt;/span&gt;: &lt;span class=&quot;synType&quot;&gt;Logger&lt;/span&gt;) -&amp;gt; untyped

  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; localize: (&lt;span class=&quot;synConstant&quot;&gt;images&lt;/span&gt;: ::&lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Boxboxbox&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;BinaryImage&lt;/span&gt;]) -&amp;gt; ::&lt;span class=&quot;synType&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;synType&quot;&gt;Boxboxbox&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Box&lt;/span&gt;]

  (略)
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;_BoxLocalizer&lt;/code&gt; というインターフェースがあって、その実装として &lt;code&gt;Boxboxbox::BoxLocalizer::GoogleVisionApiOnline&lt;/code&gt; というのがある、という気持ちです&lt;a href=&quot;#f-cdb55afa&quot; name=&quot;fn-cdb55afa&quot; title=&quot;duck typingなので、明示的にinterfaceを実装しなくても、interfaceを満たしていれば実装したことになる&quot;&gt;*6&lt;/a&gt;。ここでI/Fを切ったのは、Cloud &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vision&quot;&gt;Vision&lt;/a&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;を叩くときに叩き方がいくつかあるし、他の物体検出系のサービスもあるので、そこを差し替えられるようにしたかったからです。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fgenya0407%2Fboxboxbox%2Ftree%2Fmaster%2Fsig&quot; title=&quot;genya0407/boxboxbox&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/genya0407/boxboxbox/tree/master/sig&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Steepを使ってみた感想は以下です&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;クラスの階層を全て明示した形で書かなきゃいけないので若干見づらい(型定義のネストができない)&lt;/li&gt;
&lt;li&gt;private methodも型定義書かなきゃいけないのでつらい&lt;/li&gt;
&lt;li&gt;標準ライブラリも型定義が存在しないものがあり、自分で書く必要があったりした&lt;/li&gt;
&lt;li&gt;型を書いてるとき、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;ファイルと独立した全然関係ないファイルを書くことになるので、地味に虚無な気持ちになる(慣れの問題かも)&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のダックタイピングをかなりいい感じに型に落とし込めてるという印象&lt;/li&gt;
&lt;li&gt;型がないライブラリを使うときに、自分で適当にシュッと型をつけてしまえるのは結構体験が良かった &lt;a href=&quot;https://github.com/genya0407/boxboxbox/blob/v1.0.6/sig/json.rbs&quot;&gt;例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;型がないライブラリの実装から型定義ファイルを自動生成するやつというのがあって、大体のケースはそれを使うとなんとなく型がついてくれるんだけど、たまになんか無理なやつがあってつらい (concurrent-&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/ruby&quot;&gt;ruby&lt;/a&gt;というgemは無理だった)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Steepを使う際には&lt;a href=&quot;https://ruby-jp.github.io/&quot;&gt;ruby-jp&lt;/a&gt;の#typeチャンネルの皆さんに大変お世話になりました。ありがとうございました。&lt;/p&gt;

&lt;h3&gt;今後の課題的な&lt;/h3&gt;

&lt;p&gt;同期の人の要件を満たすソフトウェアは作れたので一旦は満足なんですが、一般に公開したら誰かしら使いたがる人はいる気がしていて、公開したいという気持ちがあります。ただ、いろいろ気になるところがあって公開を見送っています。&lt;/p&gt;

&lt;p&gt;例えば現状の実装だと、アップロードされてきたzipファイルはそのまま/tmp&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&quot;&gt;ディレクト&lt;/a&gt;リ以下に書き込まれるようになっており、大容量のファイルが送られてきたり、利用者が増えてきたりすると問題になりそうです。/tmp&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&quot;&gt;ディレクト&lt;/a&gt;リに置くのをやめてS3に上げるのも考えられるんですが、そうなるとファイルサイズに対して従量で料金がかかってくるわけで、テロされて&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/AWS&quot;&gt;AWS&lt;/a&gt;破産みたいな話もあり得るわけです。&lt;/p&gt;

&lt;p&gt;あとは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GCP&quot;&gt;GCP&lt;/a&gt;のアクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンをサーバーに送信させてるわけですが、これって大丈夫なんだっけみたいな話はあって、僕個人との信頼関係がない人が、ここにアクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンを書き込みたいとは思わないでしょう。そもそも、Webでこれをやる必要は一切なくて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt;のデスクトップアプリとして公開すれば良いはずです。今回サーバーサイドアプリケーションとして実装したのは、単純に僕にデスクトップアプリを作る技術がないからです。&lt;/p&gt;

&lt;p&gt;ただ、デスクトップアプリとして公開する場合も、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GCP&quot;&gt;GCP&lt;/a&gt;のアクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンの取得手続きは利用者に踏んでもらう必要があり、ユーザーに一定程度難易度の高いタスクを要求することになります。そう考えると、サーバーでその処理をまるっと隠蔽してあげるというのはありうる選択肢で、ユーザーに対して適切に料金を課す手段が見つかってないことが問題なのだと考えることもできます。&lt;/p&gt;

&lt;p&gt;というわけで、今後あり得る展開としては&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;フリーのデスクトップアプリにして一般公開する(アクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンは自分で取得させる)&lt;/li&gt;
&lt;li&gt;ユーザーに料金を課すスキームを確立し、一般公開する(アクセス&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A1%BC%A5%AF&quot;&gt;トーク&lt;/a&gt;ンの取得をさせない)&lt;/li&gt;
&lt;li&gt;需要がないためこれ以上何もしない。現実は非情である。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;という感じです。雑にユーザーに課金させるシステムをどなたかご存知でしたら教えてください。よろしくおねがいします。&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-888a240b&quot; name=&quot;f-888a240b&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;しかもそれらの設定項目のうち実際に使われるのは極少数であると予想します&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-fad8f014&quot; name=&quot;f-fad8f014&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;この場合、画質の粗さは問題とならず、純粋に画像全体のなかで物体が相対的にどのぐらいの大きさで写っているのかというのが重要っぽい&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-81ce4884&quot; name=&quot;f-81ce4884&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;ではなく正確には&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSV&quot;&gt;CSV&lt;/a&gt;ファイルを出力している&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-31f00958&quot; name=&quot;f-31f00958&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;一般的に、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;からコピペでデータを貼り付けられるソフトウェアは結構多い&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-8faa3840&quot; name=&quot;f-8faa3840&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;実際にはブラウザの機能で自動入力されるようです&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-cdb55afa&quot; name=&quot;f-cdb55afa&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;duck typingなので、明示的にinterfaceを実装しなくても、interfaceを満たしていれば実装したことになる&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="Ruby" label="Ruby" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20200524/20200524114452.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>駆け出し建築家にHTMLの書き方を教えた話</title>
        <link href="https://dawn.hateblo.jp/entry/teach-how-to-write-html"/>
        <id>hatenablog://entry/26006613485834786</id>
        <published>2019-12-19T00:00:00+09:00</published>
        <updated>2019-12-19T00:00:38+09:00</updated>        <summary type="html">この記事は CAMPHOR- Advent Calendar 2019 19日目の記事です。 &quot;駆け出し建築家&quot; にWebサイトの作り方を教えた話をします。</summary>
        <content type="html">&lt;p&gt;この記事は &lt;a href=&quot;https://advent.camph.net/&quot;&gt;CAMPHOR- Advent Calendar&lt;/a&gt; 2019 19日目の記事です。&lt;/p&gt;

&lt;p&gt;&quot;駆け出し建築家&quot; にWebサイトの作り方を教えた話をします。&lt;/p&gt;

&lt;h2&gt;背景&lt;/h2&gt;

&lt;p&gt;僕にはTという友人がいる。高校生の時からの付き合いになる。彼は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%EC%B5%FE%B7%DD%C2%E7&quot;&gt;東京芸大&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%FA%C3%DB%B3%D8&quot;&gt;建築学&lt;/a&gt;科で勉強していた人で、今は海外の大学院に留学している。このTという人が、Webサイトの作り方を教えてほしいという話を持ちかけてきた。&lt;/p&gt;

&lt;p&gt;Tは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%FA%C3%DB%B3%D8&quot;&gt;建築学&lt;/a&gt;科の学生だ。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%FA%C3%DB%B3%D8&quot;&gt;建築学&lt;/a&gt;科の学生は授業で「これこれのようなテーマで建築を考えなさい」というような課題をたくさん出されるらしい。そして彼らは、建築の模型やスケッチ、その説明文を制作して提出する。Tは、これらの模型の写真やスケッチ、文章を公開するためのWebサイトを作りたい、またそれとは別に、自分が書いた建築批評文や紀行文も公開したい、と考えていた。そして重要なことに、このWebサイトを作る際には、既存のブログサービスやWebサイト構築サービスは使いたくないというのだ。&lt;/p&gt;

&lt;p&gt;Tはすでにいくつかの文章をWeb上に公開していた。例えば&lt;a href=&quot;https://issuu.com/&quot;&gt;issuu&lt;/a&gt;というPDF公開サイトで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DD%A1%BC%A5%C8%A5%D5%A5%A9%A5%EA%A5%AA&quot;&gt;ポートフォリオ&lt;/a&gt;を公開したり、&lt;a href=&quot;https://note.com/&quot;&gt;note&lt;/a&gt;で批評文を書いたりしていた。そして、それらを一新し統合したいという気持ちから、&lt;a href=&quot;https://ja.wix.com/&quot;&gt;Wix&lt;/a&gt;を使ってホームページを作った。しかし、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Wix&quot;&gt;Wix&lt;/a&gt;では十分にデザインがコン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C8%A5%ED%A1%BC%A5%EB&quot;&gt;トロール&lt;/a&gt;できず、また有料プランに入らないと広告が表示されてしまうことから、納得行くWebサイトを作れずに悩んでいたのである。&lt;/p&gt;

&lt;p&gt;そのころ僕は、会社の同期の影響を受けて、「エモい図形」を創作するという遊びをしていた。そして創作した「エモい図形」を公開するために、以下のようなWebサイトを作っていた。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Femogallery.netlify.com%2F&quot; title=&quot;Emotional Graphics&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://emogallery.netlify.com/&quot;&gt;emogallery.netlify.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;見てもらえばわかるが、このWebサイトは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;などによる装飾のほとんどない、素のHTMLの無骨なデザインである&lt;a href=&quot;#f-da1d1091&quot; name=&quot;fn-da1d1091&quot; title=&quot;私はデザインセンス、特に色彩に関するセンスが欠けているため、苦肉の策としてこのようなデザインを好んで使う&quot;&gt;*1&lt;/a&gt;。これを見たTは、凝った作りをしなくてもデザインとして成立させることができるのだから&lt;a href=&quot;#f-25cbcaa5&quot; name=&quot;fn-25cbcaa5&quot; title=&quot;確か、このようなデザインのWebサイトを作るのはどのぐらい大変なのか、と事前に聞かれたような記憶がある&quot;&gt;*2&lt;/a&gt;、自分でHTMLを書くことでWebサイトを作ることも可能なのではないかと考え、僕に相談を持ちかけた&lt;a href=&quot;#f-262de406&quot; name=&quot;fn-262de406&quot; title=&quot;T本人の言葉を借りると『(私の「エモい図形」のページに可能性を感じたのは)「ざっくり書いたな」という見た目そのままでも、デザインとして成立しているなと思ったから。逆の例としては、いかにホームページ作成サービスで「シンプル」で「ストイック」な見た目のものを作っても、そのコード（建築的にいうなれば工法）がシンプルでないことがあり、結果としてなにか嘘くさいものになってしまうように感じた。』&quot;&gt;*3&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;考えたこと&lt;/h2&gt;

&lt;p&gt;僕はこの相談を受けて、ITに詳しくない人間に上記の条件を満たすWebサイトを作らせるにはどうしたら良いだろうか、ということを考えた。&lt;/p&gt;

&lt;p&gt;既存のサービスを利用するのが嫌だということなので、最終的には何らかの手段によってHTMLを生成して、Webサーバーにアップロードする必要があるだろう。継続的に記事を更新したいとのことなので、僕ならHTMLを全部手書きするのではなく、例えば&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;を使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Markdown&quot;&gt;Markdown&lt;/a&gt;からHTMLを生成する仕組みを作っておいて、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Markdown&quot;&gt;Markdown&lt;/a&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GitHub&quot;&gt;GitHub&lt;/a&gt;にpushするとビルドが走ってWebサイトが更新されるようにするだろう。&lt;/p&gt;

&lt;p&gt;しかし、Tは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%FA%C3%DB%B3%D8&quot;&gt;建築学&lt;/a&gt;科の学生であって、ITは専門外だ。一般的な人に比べればITのスキルはある方だとはいえ&lt;a href=&quot;#f-c2894db5&quot; name=&quot;fn-c2894db5&quot; title=&quot;最近の建築学科の学生はプログラミングをしたり3Dプリンタを触ったりするらしい&quot;&gt;*4&lt;/a&gt;、我々Web&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC&quot;&gt;プログラマー&lt;/a&gt;と同じ技能を仮定してはいけない。彼の持ち物である&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Windows&quot;&gt;Windows&lt;/a&gt; PCで、どうやってJekyllを動かすというのか。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;は誰がインストールするのか。そもそもプログラミングができない人がJekyllをセットアップすることって可能なんだっけ？&lt;/p&gt;

&lt;p&gt;もしセットアップを僕が変わりにやってあげたとしたら、その手順はTには再現不可能なものとなり、Webサイトが存続する限り僕がメンテナンスする必要がある。いまJekyllのセットアップをしてあげるのは簡単だが、保守する責任が生まれ、将来に渡って僕の負担になる。これを防ぐために、Webサイトの保守責任はTにある、ということから出発して考え始めるべきだ。つまり、Tに理解可能な範囲の知識のみによって、Webサイトを構築する必要がある。&lt;a href=&quot;#f-4840e79a&quot; name=&quot;fn-4840e79a&quot; title=&quot;Jekyllを使ってGitHub PagesでWebサイトを公開するには、Ruby、HTML、CSS、テンプレートエンジンという概念、Git、GitHubなどの知識が必要であり、これらをTに１から教えるのは現実的ではない。&quot;&gt;*5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;よくよく考えてみると、当たり前のことながら、Webサイトを公開するのにJekyllもGitもプログラミングも必要ない。必要な知識は「HTMLと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;の書き方」と「HTMLファイルをWebに公開する方法」だけだ。HTMLと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を手書きすることと、手動でHTMLをアップロードすることさえ厭わなければ、最小限の知識によってWebサイトを構築することができる。そしてその場合、Tから見て理解不可能な部分が少ないため、何かが壊れたとしても(基本的には)自分でトラブルシュートすることができるだろう。&lt;/p&gt;

&lt;p&gt;このようなことを考え、「多少の手作業は許容し、Tが理解できる知識の中でWebサイトを作る。HTMLと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;の書き方、HTMLファイルを公開する方法だけは僕が１から教える。」という方針で、Webサイトの作り方を考えることにした。&lt;/p&gt;

&lt;h2&gt;Webサイトの作り方&lt;/h2&gt;

&lt;p&gt;HTMLをまず教えた。タグというのがあって、例えばリンクを作りたかったら &lt;code&gt;a&lt;/code&gt; タグに &lt;code&gt;href&lt;/code&gt; を指定して文章を囲めばよいとか、&lt;code&gt;h3&lt;/code&gt; タグというのがあって見出しにはこれを使うとか、画像を貼りたかったら &lt;code&gt;img&lt;/code&gt; タグをつかって &lt;code&gt;src&lt;/code&gt; に画像のURLを指定するとか。そして次に、URLの構造を教えた。まず&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/https&quot;&gt;https&lt;/a&gt;/httpという文字列から始まり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;ドメイン&lt;/a&gt;名というのが入り、後ろのスラッシュにより区切られた文字列は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8&quot;&gt;ディレクト&lt;/a&gt;リ構造と対応している、相対リンクと絶対リンクというのがあって...などなど。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;はHTMLのタグの中の &lt;code&gt;style&lt;/code&gt; 属性の中に直書きしてもいいし、 &lt;code&gt;style&lt;/code&gt; タグの中にまとめて書いてもいい。HTMLタグには &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;class&lt;/code&gt; というのを指定できて...云々。&lt;/p&gt;

&lt;p&gt;こうして書いたHTMLと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;を、&lt;a href=&quot;https://www.netlify.com/&quot;&gt;netlify&lt;/a&gt; にアップロードして公開する方法も教えた。netlifyには、フォルダをドラッグ・アンド・ドロップで投げ込むと、それをそのまま公開してくれる機能があるので、Tはドラッグ・アンド・ドロップするだけで、Webサイトの動作確認もできるし、Webサイトを公開することもできる&lt;a href=&quot;#f-4383fb4c&quot; name=&quot;fn-4383fb4c&quot; title=&quot;ステージング環境とかそういう難しいことは考えない&quot;&gt;*6&lt;/a&gt;。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GitHub&quot;&gt;GitHub&lt;/a&gt; Pagesにあるような、ブランチとかコミットとかの小難しい概念はない。&lt;/p&gt;

&lt;p&gt;自明かつ素朴だが、現代においては廃れてしまったように見える、古式ゆかしい &quot;ホームページ&quot; の作り方である。&lt;/p&gt;

&lt;p&gt;こうして苦労しながらも、TはWebサイトの作り方を学習し、Webサイトが公開された。&lt;/p&gt;

&lt;h2&gt;できたもの&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://archi-tecture.netlify.com/works/works002&quot;&gt;&amp;#x3059;&amp;#x304D;&amp;#x307E;&amp;#x306E;&amp;#x30D3;&amp;#x30EB;&lt;/a&gt;は、Tが授業の課題で設計したビルの解説だ。写真がそれっぽいとWebサイトがそれっぽくなるということがわかる。この他にも、&lt;a href=&quot;https://archi-tecture.netlify.com/works/works001&quot;&gt;&amp;#x3061;&amp;#x3050;&amp;#x306F;&amp;#x3050;&amp;#x306A;&amp;#x30EA;&amp;#x30A2;&amp;#x30EB;&lt;/a&gt;、&lt;a href=&quot;https://archi-tecture.netlify.com/works/works011&quot;&gt;&amp;#x6C5A;&amp;#x308C;&amp;#x3068;&amp;#x6B20;&amp;#x3051;&lt;/a&gt;など、Tが制作したものが公開されている。制作物の一覧ページもちゃんと作ってある：&lt;a href=&quot;https://archi-tecture.netlify.com/&quot;&gt;Archi-tecture&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;また、建築作品とは別に、&lt;a href=&quot;https://archi-pelago.netlify.com/articles/hk01&quot;&gt;&amp;#x5197;&amp;#x9577;&amp;#x306A;&amp;#x90FD;&amp;#x5E02;&amp;#x3001;&amp;#x6301;&amp;#x7D9A;&amp;#x3059;&amp;#x308B;&amp;#x904B;&amp;#x52D5;&lt;/a&gt;、&lt;a href=&quot;https://archi-pelago.netlify.com/articles/hk02&quot;&gt;&amp;#x6C34;&amp;#x306E;&amp;#x3088;&amp;#x3046;&amp;#x306A;&amp;#x3082;&amp;#x306E;&amp;#x306B;&amp;#x6D78;&amp;#x308B;&amp;#x8857;&lt;/a&gt;など、ブログのようなもの(紀行文？)も書き始めたようだ。この記事は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;を通じて &quot;建築家界隈&quot; に割と広く読まれたらしく、反響もそれなりにあったとのことだ。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt; cardも設定してあって(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;にリンクを貼って確かめてみよう！)、気合を感じる。&lt;/p&gt;

&lt;p&gt;全体的に、これはどうなんやというコードや、レイアウト崩れなどが散見されるが、動いてるしこれでよいのだと思う&lt;a href=&quot;#f-c2a8ce95&quot; name=&quot;fn-c2a8ce95&quot; title=&quot;プログラマーは普通の人間に比べてtypo-sensitivityが高いということがわかる&quot;&gt;*7&lt;/a&gt;。Tはこれからもコンスタントに紀行文を書いていくつもりで、今は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Markdown&quot;&gt;Markdown&lt;/a&gt;で３つ目の文章を書くことに挑戦中らしい。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このように、駆け出し建築家でありITの素人であるところの友人TにWebサイトの作り方を教えた。プログラミングができない人でもHTMLを手書きしてWebサイトを書けるようになるし、それは意義があることだ、という当たり前のことを再確認する結果となった。利便性を得るために既存のサービスを利用するのもよいが、自由を手に入れるという観点からは、このような基礎的な手法に立ち返るのも良いのではないかと思った。&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-da1d1091&quot; name=&quot;f-da1d1091&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;私はデザインセンス、特に色彩に関するセンスが欠けているため、苦肉の策としてこのようなデザインを好んで使う&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-25cbcaa5&quot; name=&quot;f-25cbcaa5&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;確か、このようなデザインのWebサイトを作るのはどのぐらい大変なのか、と事前に聞かれたような記憶がある&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-262de406&quot; name=&quot;f-262de406&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;T本人の言葉を借りると『(私の「エモい図形」のページに可能性を感じたのは)「ざっくり書いたな」という見た目そのままでも、デザインとして成立しているなと思ったから。逆の例としては、いかにホームページ作成サービスで「シンプル」で「ストイック」な見た目のものを作っても、そのコード（建築的にいうなれば工法）がシンプルでないことがあり、結果としてなにか嘘くさいものになってしまうように感じた。』&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-c2894db5&quot; name=&quot;f-c2894db5&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;最近の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%FA%C3%DB%B3%D8&quot;&gt;建築学&lt;/a&gt;科の学生はプログラミングをしたり&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/3D%A5%D7%A5%EA%A5%F3%A5%BF&quot;&gt;3Dプリンタ&lt;/a&gt;を触ったりするらしい&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-4840e79a&quot; name=&quot;f-4840e79a&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;Jekyllを使って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GitHub&quot;&gt;GitHub&lt;/a&gt; PagesでWebサイトを公開するには、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;、HTML、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;、テンプレートエンジンという概念、Git、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GitHub&quot;&gt;GitHub&lt;/a&gt;などの知識が必要であり、これらをTに１から教えるのは現実的ではない。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-4383fb4c&quot; name=&quot;f-4383fb4c&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;ステージング環境とかそういう難しいことは考えない&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-c2a8ce95&quot; name=&quot;f-c2a8ce95&quot; class=&quot;footnote-number&quot;&gt;*7&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC&quot;&gt;プログラマー&lt;/a&gt;は普通の人間に比べて&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/typo&quot;&gt;typo&lt;/a&gt;-sensitivityが高いということがわかる&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <link rel="enclosure" href="https://emogallery.netlify.com/images/ogp.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>ブログを移転し、ブログを集約するページを作った</title>
        <link href="https://dawn.hateblo.jp/entry/2019/05/26/215044"/>
        <id>hatenablog://entry/17680117127169703512</id>
        <published>2019-05-26T21:50:44+09:00</published>
        <updated>2020-10-08T22:10:46+09:00</updated>        <summary type="html">ブログを移転した ブログを移転しました。 https://genya0407.github.io/ Atomフィードもあるので、僕のブログを継続的に読みたい人がいたらRSSリーダーに登録してください*1。 https://genya0407.github.io/feed.xml この新しいブログは、JekyllとGitHub Pagesで作られています。 静的サイトであり広告などもないので、かなり高速にページを表示できています。 PageSpeed Insightsでトップページのスコアを算出すると100点でした。 新しいブログのスコア すでにいくつか記事も書いていますが、記事の作成に関しても…</summary>
        <content type="html">&lt;h2&gt;ブログを移転した&lt;/h2&gt;

&lt;p&gt;ブログを移転しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://genya0407.github.io/&quot;&gt;https://genya0407.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Atom%A5%D5%A5%A3%A1%BC%A5%C9&quot;&gt;Atomフィード&lt;/a&gt;もあるので、僕のブログを継続的に読みたい人がいたら&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSS%A5%EA%A1%BC%A5%C0%A1%BC&quot;&gt;RSSリーダー&lt;/a&gt;に登録してください&lt;a href=&quot;#f-a0547529&quot; name=&quot;fn-a0547529&quot; title=&quot;そういえば2019年の現在にRSSリーダー使ってる人ってどのぐらいいるんですかね。僕は一応使ってますが、周囲の人が使ってる印象があんまりない。&quot;&gt;*1&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://genya0407.github.io/feed.xml&quot;&gt;https://genya0407.github.io/feed.xml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この新しいブログは、Jekyllと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GitHub&quot;&gt;GitHub&lt;/a&gt; Pagesで作られています。
静的サイトであり広告などもないので、かなり高速にページを表示できています。
PageSpeed Insightsでトップページのスコアを算出すると100点でした。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;新しいブログのスコア&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190526/20190526214433.png&quot; alt=&quot;f:id:threetea0407:20190526214433p:plain&quot; title=&quot;f:id:threetea0407:20190526214433p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;新しいブログのスコア&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;すでにいくつか記事も書いていますが、記事の作成に関しても不便を感じたことはないです&lt;a href=&quot;#f-4902dc84&quot; name=&quot;fn-4902dc84&quot; title=&quot;markdownで記事を書いてgithubにpushするとすぐに反映される&quot;&gt;*2&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;移転の理由&lt;/h2&gt;

&lt;p&gt;ブログを移転した理由ですが、一番大きかったのは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0&quot;&gt;はてなブログ&lt;/a&gt;の表示が遅いということです。
遅いと言っても十分実用可能なレベルの遅さだとは思いますが、動作がキビキビしているとは言えません&lt;a href=&quot;#f-7297eb39&quot; name=&quot;fn-7297eb39&quot; title=&quot;これははてな社の努力不足とかそういう話ではなくて、広告を表示したりしているのでその分遅くなるのは仕方がない。&quot;&gt;*3&lt;/a&gt;。
気にならない人が大半だとは思いますが、僕は結構気になっていました。&lt;/p&gt;

&lt;p&gt;実際、PageSpeed Insightsでスコアを算出しても、33点という低いスコアになります。&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;このブログのスコア&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190526/20190526214523.png&quot; alt=&quot;f:id:threetea0407:20190526214523p:plain&quot; title=&quot;f:id:threetea0407:20190526214523p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;このブログのスコア&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2&gt;ブログを集約するページ&lt;/h2&gt;

&lt;p&gt;そういうわけでブログを新しく作り、今のところは満足しているわけなんですが、将来的にはまた別の理由が発生してブログを移転したくなるかもしれません。移転するというか、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0&quot;&gt;はてなブログ&lt;/a&gt;には&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0&quot;&gt;はてなブログ&lt;/a&gt;の、Qiita には Qiita の、JekyllにはJekyllのいいところがあるので、使い分けていきたいという気持ちがあります。&lt;/p&gt;

&lt;p&gt;しかし、こういうことを繰り返すと、自分の書いた記事が色んな所に分散することになってしまいます。僕は自分の書いた記事の一覧をどこかに持っておきたいので、これは好ましくありません 。&lt;/p&gt;

&lt;p&gt;そういうわけで、僕が書いた記事を集約するページを作りました&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://articles.kuminecraft.xyz/&quot;&gt;genya0407&amp;#39;s articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;裏では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSS&quot;&gt;RSS&lt;/a&gt;/&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Atom&quot;&gt;Atom&lt;/a&gt;のフィードがいくつか登録してあって、これを15分毎にクロールしてページを更新するようになっています。
現状ではこのブログと、新しく作ったブログと、Qiitaのフィードが登録してあって、これらのブログサイトの記事が一覧で表示されます。
新しいブログを開設したとしても、そのブログのフィードを登録すればこのページに表示されるので、記事の分散を防ぐことができます。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0&quot;&gt;はてなブログ&lt;/a&gt;が遅いということに不満を抱き、Jekyllで高速なブログを開設しました。
またそれに合わせて、僕の書いた記事がブログをまたいで一覧表示されるページを作りました。&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-a0547529&quot; name=&quot;f-a0547529&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;そういえば2019年の現在に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RSS%A5%EA%A1%BC%A5%C0%A1%BC&quot;&gt;RSSリーダー&lt;/a&gt;使ってる人ってどのぐらいいるんですかね。僕は一応使ってますが、周囲の人が使ってる印象があんまりない。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-4902dc84&quot; name=&quot;f-4902dc84&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/markdown&quot;&gt;markdown&lt;/a&gt;で記事を書いて&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/github&quot;&gt;github&lt;/a&gt;にpushするとすぐに反映される&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-7297eb39&quot; name=&quot;f-7297eb39&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;これは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA&quot;&gt;はてな&lt;/a&gt;社の努力不足とかそういう話ではなくて、広告を表示したりしているのでその分遅くなるのは仕方がない。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190526/20190526214433.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>CAMPHOR-についてここらでひとこと言っておくか</title>
        <link href="https://dawn.hateblo.jp/entry/2019/03/27/220638"/>
        <id>hatenablog://entry/17680117126999521434</id>
        <published>2019-03-27T22:06:38+09:00</published>
        <updated>2019-03-29T01:06:49+09:00</updated>        <summary type="html">京都のIT系学生コミュニティ「CAMPHOR-(カンファー)」に私が出入りするようになったのは2016年の冬なので，足掛け4年ほどCAMPHOR-に関わっていたことになります． この記事では，CAMPHOR-について説明した後，私がCAMPHOR-に感じた魅力を語ります． ※この記事はポエムです</summary>
        <content type="html">&lt;p&gt;京都のIT系学生コミュニティ「CAMPHOR-(カンファー)」に私が出入りするようになったのは2016年の冬なので，足掛け4年ほどCAMPHOR-に関わっていたことになります．&lt;/p&gt;

&lt;p&gt;この記事では，CAMPHOR-について説明した後，私がCAMPHOR-に感じた魅力を語ります．&lt;/p&gt;

&lt;p&gt;※この記事はポエムです&lt;/p&gt;

&lt;h2&gt;CAMPHOR-とは何か&lt;/h2&gt;

&lt;p&gt;CAMPHOR-とは，京都のIT系学生のコミュニティです．ここで「IT系学生」とは，主にエンジニアやデザイナーのことを指します&lt;a href=&quot;#f-e0eb9cdb&quot; name=&quot;fn-e0eb9cdb&quot; title=&quot;歴史的にはこれに加えて「起業家」というロールの学生も多くいたようですが，ここ数年はあまり見かけません．というか，近頃の起業家を目指す学生はエンジニアになりがちという話な気もする．&quot;&gt;*1&lt;/a&gt;．
コミュニティの活動の場として，京大のすぐ近くにある町家を利用して，&lt;a href=&quot;https://camph.net/#house&quot;&gt;CAMPHOR- HOUSE&lt;/a&gt;という空間を提供しています&lt;a href=&quot;#f-6225d0c2&quot; name=&quot;fn-6225d0c2&quot; title=&quot;京大のすぐ近くに拠点があるとはいっても，CAMPHOR-は京大生限定の団体ではありません．実際に，京都大学以外の大学の学生も多く出入りしています(See members)．&quot;&gt;*2&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;CAMPHOR- HOUSEは，週に2~3日ぐらい，大体15:00~18:00ぐらいの時間帯に開館しており&lt;a href=&quot;#f-a62e9e37&quot; name=&quot;fn-a62e9e37&quot; title=&quot;2019年3月現在&quot;&gt;*3&lt;/a&gt;，学生なら誰でも，事前の連絡なく自由に出入りできます．
開館時間には学生がやってきて，自分の作業をしたり，ITに関して雑談&lt;a href=&quot;#f-9f978bb9&quot; name=&quot;fn-9f978bb9&quot; title=&quot;最近流行りの技術，最近作ったアプリケーションの話，分からない所を聞くなど&quot;&gt;*4&lt;/a&gt;をしたりします．&lt;/p&gt;

&lt;h2&gt;私がCAMPHOR-に関わるようになった経緯&lt;/h2&gt;

&lt;p&gt;私がCAMPHOR-に関わるようになった直接的な理由は，シバニャン（&lt;a href=&quot;https://twitter.com/_6v_&quot;&gt;@_6v_&lt;/a&gt;）に誘われたことです．&lt;/p&gt;

&lt;p&gt;当時僕は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Haskell&quot;&gt;Haskell&lt;/a&gt;にハマっていて，&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2016/&quot;&gt;熊野寮祭の公式Webページ&lt;/a&gt;を&lt;a href=&quot;https://jaspervdj.be/hakyll/&quot;&gt;Hakyll&lt;/a&gt;という静的サイトジェネレーターで作っていました．
これがCAMPHOR-のSlackの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Haskell&quot;&gt;Haskell&lt;/a&gt;チャンネルで話題になり，どうやらこれを作った奴はシバニャンの知り合いらしいということで，開館日に連れてこられました．&lt;/p&gt;

&lt;p&gt;初めてCAMPHOR-に行った日は人が沢山いて楽しくお話をしたのですが，その中でも特に &lt;a href=&quot;https://twitter.com/ymyzk&quot;&gt;@ymyzk&lt;/a&gt; が見せてくれた &lt;a href=&quot;https://blog.ymyzk.com/2018/12/how-wsgi-lineprof-works/&quot;&gt;wsgi_lineprof&lt;/a&gt;に衝撃を受けました．
それまで僕は簡単なWebアプリケーションぐらいは作ったことがありましたが，ライブラリは作ったことがなく，ましてやそれを人々が使える形で公開したことなどありませんでした．
さらに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/wsgi&quot;&gt;wsgi&lt;/a&gt;_lineprof はCの拡張で記述されており，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;が書ける自分でも内容が全く理解できませんでした．
こんな高度な技術力を持つ人がいて凄いコミュニティだなあと素朴に感動したのを覚えています．&lt;/p&gt;

&lt;p&gt;また，これとは別に，プログラミングについて語り合えるコミュニティが欲しいと考えていた時期でもありました．
というのも，それまで僕は一人でずっとプログラミングをやっていて，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC&quot;&gt;プログラマー&lt;/a&gt;の知り合いというのがほとんどいなかったからです．
そのため，自分がやってることが正しいのかわからないし，面白そうな技術について議論することもできないので，フラストレーションが溜まっていました．&lt;/p&gt;

&lt;p&gt;プログラミングのアルバイトもやっていて，色々教えてもらえて非常にためになりました&lt;a href=&quot;#f-215a9df8&quot; name=&quot;fn-215a9df8&quot; title=&quot;雇ってくれた株式会社Spookies様には本当に感謝しています&quot;&gt;*5&lt;/a&gt;が，業務範囲外のことについて教えてもらえるわけではなかったし，アルバイト先の社員さんは社会人で基本的に忙しいので，満足がいくまでプログラミングについて語り合えるわけではありませんでした．&lt;/p&gt;

&lt;p&gt;そうした中でCAMPHOR-というコミュニティに誘ってもらい，強く興味を持ちました．
そして，忘年会に参加したりして親交を深めた後，色々あって運営メンバーになりました．&lt;/p&gt;

&lt;h2&gt;CAMPHOR-の魅力&lt;/h2&gt;

&lt;p&gt;これは，人間の興味一般に言えることだと思いますが，人間の興味というのは，もともと自分ができたことや興味があったこと以外には広がりません&lt;a href=&quot;#f-61240a85&quot; name=&quot;fn-61240a85&quot; title=&quot;少なくとも自分はそう&quot;&gt;*6&lt;/a&gt;．
そして人間は，興味が無いことを自発的に勉強しようとは思いません．
新しいことに手を出すときというのは，何かしらの「外部の力」が働いたときです．
CAMPHOR-は，そのような「外部の力」を僕に及ぼしてくれました．&lt;/p&gt;

&lt;p&gt;CAMPHOR-の魅力は，&lt;strong&gt;HOUSEでの雑談&lt;/strong&gt; と &lt;strong&gt;個人での活動&lt;/strong&gt; がいい感じに影響を及ぼしあって，結果としてコミュニティ自体も参加する個人もレベルが上っていくという構造にあると思います．&lt;/p&gt;

&lt;p&gt;実際に僕も，CAMPHOR-での雑談から様々な影響を受けました．例えば僕は， &lt;a href=&quot;https://twitter.com/tomoyat1&quot;&gt;@tomoyat1&lt;/a&gt; に影響を受け，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%D7%A5%ED&quot;&gt;システムプロ&lt;/a&gt;グラミングに興味を持ち，学びはじめました．その成果が表れたのが先日の「&lt;a href=&quot;https://www.slideshare.net/yusukesangenya/ss-135407412&quot;&gt;入門 シェル&lt;/a&gt;」というタイトルの発表で&lt;a href=&quot;#f-40383101&quot; name=&quot;fn-40383101&quot; title=&quot; CAMPHOR- DAY 2019 &quot;&gt;*7&lt;/a&gt;，主にOSの仕組みという観点から，シェルの作り方について解説しました．&lt;/p&gt;

&lt;p&gt;他にも，&lt;a href=&quot;https://twitter.com/yu_i9&quot;&gt;@yu-i9&lt;/a&gt; に影響されて言語処理系に興味を持ち，&lt;a href=&quot;https://github.com/genya0407/mal&quot;&gt;LISP方言の処理系を実装&lt;/a&gt;したり&lt;a href=&quot;#f-3b5937d8&quot; name=&quot;fn-3b5937d8&quot; title=&quot;中途半端なところで終わっていますが...&quot;&gt;*8&lt;/a&gt;．&lt;a href=&quot;https://twitter.com/ishiy1993&quot;&gt;@ishiy&lt;/a&gt; や &lt;a href=&quot;https://twitter.com/ymyzk&quot;&gt;@ymyzk&lt;/a&gt;の影響で&lt;a href=&quot;http://dawn.hateblo.jp/entry/2019/03/13/185112&quot;&gt;Rustを使うようになった&lt;/a&gt;り，&lt;a href=&quot;http://tomokortn.hatenablog.com/&quot;&gt;@tomokortn&lt;/a&gt; に&lt;a href=&quot;https://www.sbcr.jp/products/4797351422.html&quot;&gt;良い入門書&lt;/a&gt;を教えてもらってデザインを学んでみたり，と様々な影響を得て，自身の学習に繋げることができました．&lt;/p&gt;

&lt;p&gt;逆に，僕がCAMPHOR-に及ぼした影響&lt;a href=&quot;#f-2beca8d5&quot; name=&quot;fn-2beca8d5&quot; title=&quot;ここに関しては完全に僕の想像なので，向こうがどう思ってるかはわからない．僕に何かしらの影響を受けたと思ってる人はその内容をブログに書いてほしい．&quot;&gt;*9&lt;/a&gt;としては，Web開発の知見を共有したということがあります．
特に，初心者がどうやってWeb開発を始めるべきか，ということについてかなりアド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9&quot;&gt;バイス&lt;/a&gt;できたと思います．
例えば，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;から始めて挫折してしまった人に，Webアプリを構成する要素 ― HTML，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt;，DB，HTTP，プログラミング ― を学んだ後に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;を学ぶべきだと伝えたり&lt;a href=&quot;#f-3311ee69&quot; name=&quot;fn-3311ee69&quot; title=&quot;その順序でないとRailsは理解できないと考えているため&quot;&gt;*10&lt;/a&gt;，実現したい要件によっては，静的サイトジェネレータの存在を教えたり，単に静的なHTMLファイルを作るところから始めてはどうかとアド&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9&quot;&gt;バイス&lt;/a&gt;したりしました．&lt;/p&gt;

&lt;h2&gt;CAMPHOR-の魅力を伝えることの難しさ&lt;/h2&gt;

&lt;p&gt;上でも書いたとおり，CAMPHOR-の魅力というのは，魅力的な学生の関係性から繰り出される雑談にあると思うんですが，これを説明するのって難しいんですよね．公式HPが分かりづらいっていう話はいろいろ聞いてはいるんですが，そもそもCAMPHOR-の活動自体が分かりづらいので仕方がない．&lt;/p&gt;

&lt;p&gt;だって「魅力的な学生の関係性から繰り出される雑談を活動として行っています」なんて公式HPに書けなくないですか？もともとデザインがシャレオツ過ぎて一部の人間に&lt;a href=&quot;https://zunda3rd.hatenablog.com/entry/spiral_book&quot;&gt;抵抗感を引き起こしている&lt;/a&gt;ところに，「魅力的な学生の関係性から繰り出される雑談を活動として行っています」なんて書いたら，一発で意識高い系団体だと思われちゃうじゃないですかやだー&lt;a href=&quot;#f-f991adef&quot; name=&quot;fn-f991adef&quot; title=&quot;実際大昔にCAMPHOR-の公式HPを見たことがあるのだが，その時は意識高い系団体がなんかやっとるなぐらいにしか思ってなかった&quot;&gt;*11&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;でも絶対いい場所だと思うんですよ，CAMPHOR-．B4とかM2になって来月から就職ですなんてタイミングで訪問してきて「もっと早く来ればよかった」って言う人も結構いるし，それはとても残念だと思ってます&lt;a href=&quot;#f-e429a924&quot; name=&quot;fn-e429a924&quot; title=&quot;最近も新しいメンバーが一気に増えてきてさらに面白い感じになってきてるんですが，僕は4月から就職なのでもう関われないのが悲しいです．一周回って腹が立ってくる．2年前にやれ&quot;&gt;*12&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;CAMPHOR-を正しく理解してもらって，こういう悲劇をなくしていきたい．そのためには，CAMPHOR-のメンバーが自分が感じたCAMPHOR-の魅力を自分の言葉で発信していくというのが大事だと思う&lt;a href=&quot;#f-beee103a&quot; name=&quot;fn-beee103a&quot; title=&quot;CAMPHOR-にはこういう人がおるでというのを知らせる意味でも個人の発信は大事(=ブランディング) &quot;&gt;*13&lt;/a&gt;．そういう気持ちで今このブログを書いてる．&lt;/p&gt;

&lt;p&gt;でも結局CAMPHOR-の良さみたいなのは一回来てもらわなきゃわからんだろうという気持ちも一方ではあるんですよね．一回来てもらうための手段としてCAMPHOR-のメンバーの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;ブランディング&lt;/a&gt;をやっていくというのは非常に有効な手段ではあると思うのだけれど．&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;そういうわけでCAMPHOR-に興味を持った学生の皆さん，是非一度遊びに来てください！
CAMPHOR- HOUSEの場所は&lt;a href=&quot;https://www.google.com/maps/place/CAMPHOR-+HOUSE/@35.0249122,135.7766559,20.04z/data=!4m5!3m4!1s0x60010858be12d1a3:0x33f52187b90d65a4!8m2!3d35.024888!4d135.776916&quot;&gt;ここ&lt;/a&gt;で，開館時間は&lt;a href=&quot;https://camph.net/schedule/&quot;&gt;こんな感じ&lt;/a&gt;です．&lt;/p&gt;

&lt;p&gt;どんな人がいるのか気になるという人は，&lt;a href=&quot;https://camph.net/members/&quot;&gt;Members&lt;/a&gt;や&lt;a href=&quot;https://camph.net/members_blog/&quot;&gt;Members&#39; Blog&lt;/a&gt;をチェックしてみてください．
きっと興味の近い学生がいると思います．&lt;/p&gt;

&lt;p&gt;CAMPHOR-よいとこ一度はおいで．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fcamph.net%2F&quot; title=&quot;CAMPHOR- カンファー : 京都のIT系学生コミュニティ&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://camph.net/&quot;&gt;camph.net&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-e0eb9cdb&quot; name=&quot;f-e0eb9cdb&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;歴史的にはこれに加えて「起業家」というロールの学生も多くいたようですが，ここ数年はあまり見かけません．というか，近頃の起業家を目指す学生はエンジニアになりがちという話な気もする．&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-6225d0c2&quot; name=&quot;f-6225d0c2&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;京大のすぐ近くに拠点があるとはいっても，CAMPHOR-は京大生限定の団体ではありません．実際に，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%FE%C5%D4%C2%E7%B3%D8&quot;&gt;京都大学&lt;/a&gt;以外の大学の学生も多く出入りしています(See &lt;a href=&quot;https://camph.net/members/&quot;&gt;members&lt;/a&gt;)．&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-a62e9e37&quot; name=&quot;f-a62e9e37&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;2019年3月現在&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-9f978bb9&quot; name=&quot;f-9f978bb9&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;最近流行りの技術，最近作ったアプリケーションの話，分からない所を聞くなど&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-215a9df8&quot; name=&quot;f-215a9df8&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;雇ってくれた&lt;a href=&quot;https://www.spookies.co.jp/&quot;&gt;株式会社Spookies様&lt;/a&gt;には本当に感謝しています&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-61240a85&quot; name=&quot;f-61240a85&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;少なくとも自分はそう&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-40383101&quot; name=&quot;f-40383101&quot; class=&quot;footnote-number&quot;&gt;*7&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt; &lt;a href=&quot;https://blog.camph.net/event/camphor-day-2019/&quot;&gt;CAMPHOR- DAY 2019&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-3b5937d8&quot; name=&quot;f-3b5937d8&quot; class=&quot;footnote-number&quot;&gt;*8&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;中途半端なところで終わっていますが...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-2beca8d5&quot; name=&quot;f-2beca8d5&quot; class=&quot;footnote-number&quot;&gt;*9&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;ここに関しては完全に僕の想像なので，向こうがどう思ってるかはわからない．僕に何かしらの影響を受けたと思ってる人はその内容をブログに書いてほしい．&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-3311ee69&quot; name=&quot;f-3311ee69&quot; class=&quot;footnote-number&quot;&gt;*10&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;その順序でないと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Rails&quot;&gt;Rails&lt;/a&gt;は理解できないと考えているため&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-f991adef&quot; name=&quot;f-f991adef&quot; class=&quot;footnote-number&quot;&gt;*11&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;実際大昔にCAMPHOR-の公式HPを見たことがあるのだが，その時は意識高い系団体がなんかやっとるなぐらいにしか思ってなかった&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-e429a924&quot; name=&quot;f-e429a924&quot; class=&quot;footnote-number&quot;&gt;*12&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;最近も新しいメンバーが一気に増えてきてさらに面白い感じになってきてるんですが，僕は4月から就職なのでもう関われないのが悲しいです．一周回って腹が立ってくる．2年前にやれ&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-beee103a&quot; name=&quot;f-beee103a&quot; class=&quot;footnote-number&quot;&gt;*13&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;CAMPHOR-にはこういう人がおるでというのを知らせる意味でも個人の発信は大事(=&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0&quot;&gt;ブランディング&lt;/a&gt;) &lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="CAMPHOR-" label="CAMPHOR-" />
        
        <category term="ポエム" label="ポエム" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190327/20190327220813.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>質問箱クローンをRustで作った話</title>
        <link href="https://dawn.hateblo.jp/entry/2019/03/13/185112"/>
        <id>hatenablog://entry/10257846132656070019</id>
        <published>2019-03-13T18:51:12+09:00</published>
        <updated>2019-03-31T11:31:25+09:00</updated>        <summary type="html">1年ぐらい前に質問箱(peing.net)を真似て匿名質問サービスを作成しました． これに関して技術的な話と技術的でない話をします．技術的な話というのはRustでWebサービスを作る知見で，技術的でない話というのは質問箱を自分で運用するとどういう感じになるかという知見です．</summary>
        <content type="html">&lt;p&gt;1年ぐらい前に質問箱(peing.net)を真似て匿名質問サービスを作成しました．
これに関して技術的な話と技術的でない話をします．技術的な話というのはRustで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9&quot;&gt;Webサービス&lt;/a&gt;を作る知見で，技術的でない話というのは質問箱を自分で運用するとどういう感じになるかという知見です．&lt;/p&gt;

&lt;ul class=&quot;table-of-contents&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#作ったもの&quot;&gt;作ったもの&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#背景&quot;&gt;背景&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#技術的な話&quot;&gt;技術的な話&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#仕様策定&quot;&gt;仕様策定&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#実装&quot;&gt;実装&lt;/a&gt;&lt;ul&gt;
                    &lt;li&gt;&lt;a href=&quot;#Webフレームワーク-Rocket-に関する所感&quot;&gt;Webフレームワーク &quot;Rocket&quot; に関する所感&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;#ORM-Diesel-に関する所感&quot;&gt;ORM &quot;Diesel&quot; に関する所感&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;#画像の生成&quot;&gt;画像の生成&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#デプロイ&quot;&gt;デプロイ&lt;/a&gt;&lt;ul&gt;
                    &lt;li&gt;&lt;a href=&quot;#Heroku&quot;&gt;Heroku&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;#さくらのVPS&quot;&gt;さくらのVPS&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#速度について&quot;&gt;速度について&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#オマケ技術的でない話&quot;&gt;オマケ：技術的でない話&lt;/a&gt;&lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;#質問してくるユーザーの数は非常に少ない&quot;&gt;質問してくるユーザーの数は非常に少ない&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;#自演するやつがいる&quot;&gt;自演するやつがいる&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#追記20190319&quot;&gt;追記(2019/03/19)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;作ったもの&quot;&gt;作ったもの&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Freing.kuminecraft.xyz%2F&quot; title=&quot;Reing&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;質問お待ちしてます！！！&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fgenya0407%2Freing&quot; title=&quot;genya0407/reing&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;ソースは公開しており，気持ち程度にREADMEも書いてあるので，あなたも自分の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;を立てることができます．&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;当初は &lt;a href=&quot;https://peing.net/ja/genya0407&quot;&gt;&quot;本家質問箱&quot;&lt;/a&gt; を使っていたんですが，2018年の5月ぐらいにクッソ動作が重くなってストレスがすごく，また当時はRustでなんか作りたいという気持ちがあり，自前で作ったら快適になりそうだと思って作りました．&lt;/p&gt;

&lt;h2 id=&quot;技術的な話&quot;&gt;技術的な話&lt;/h2&gt;

&lt;h3 id=&quot;仕様策定&quot;&gt;仕様策定&lt;/h3&gt;

&lt;p&gt;私が作った質問箱には以下のような機能を実装しました．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;匿名で質問をPOSTする機能&lt;/li&gt;
&lt;li&gt;質問投稿の通知をメールで私に投げる機能&lt;/li&gt;
&lt;li&gt;回答者(=私)のログイン機能&lt;/li&gt;
&lt;li&gt;回答する機能&lt;/li&gt;
&lt;li&gt;回答されたときに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;にツイートする機能&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;この質問箱は，1つのサーバーに複数人の回答者を登録するということができないように作っています．つまり，&lt;b&gt;1つのサーバーには回答者は1人(=管理者)しかいません&lt;/b&gt;．
この方針により，例えばユーザー登録機能を作らなくて良かったりするなど，機能の複雑度が大幅に下がっています．&lt;/p&gt;

&lt;h3 id=&quot;実装&quot;&gt;実装&lt;/h3&gt;

&lt;p&gt;Rustでサーバーサイドを作りました．RustでWebアプリを作るといいことがあるのかという話はもちろんあるが，そこについてはあまり考えずにやる．俺はRustが書きたかったんだよ！！！
まあ真面目な話をすると，速いアプリケーションにしたかったが，Goは宗教上の理由で使えないのでRustになったという側面もあります．&lt;/p&gt;

&lt;p&gt;WebフレームワークとしてはRocket，ORMとしては&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Diesel&quot;&gt;Diesel&lt;/a&gt;を使用しました．また，質問文の画像を生成する部分は特に頑張って自作しました．&lt;/p&gt;

&lt;h4 id=&quot;Webフレームワーク-Rocket-に関する所感&quot;&gt;Webフレームワーク &quot;Rocket&quot; に関する所感&lt;/h4&gt;

&lt;p&gt;RocketはfastでsecureなWebフレームワークですが，flexibility, usability, type safetyも犠牲にせんぞということだそうです．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Frocket.rs%2F&quot; title=&quot;Rocket - Simple, Fast, Type-Safe Web Framework for Rust&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://rocket.rs/&quot;&gt;rocket.rs&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;大体こういう感じでエンドポイントが生やせます：&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#[get(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/hello/&amp;lt;name&amp;gt;/&amp;lt;age&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;hello&lt;/span&gt;(name: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;, age: &lt;span class=&quot;synType&quot;&gt;u8&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt; {
    &lt;span class=&quot;synPreProc&quot;&gt;format!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Hello, {} year old named {}!&amp;quot;&lt;/span&gt;, age, name)
}

&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synPreProc&quot;&gt;rocket&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;ignite&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;mount&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synPreProc&quot;&gt;routes!&lt;/span&gt;[hello]).&lt;span class=&quot;synIdentifier&quot;&gt;launch&lt;/span&gt;();
}
&lt;/pre&gt;


&lt;p&gt;URLのパラメーターをシュッと関数の引数に入れてくれるのが面白いですね．
ここには書いてないですけど，POSTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トのbodyをいい感じにパースして構造体に入れてくれたりもします．
どちらの場合も，型が合致しないときはマッチする他のエンドポイントを見に行くようになっています．&lt;/p&gt;

&lt;p&gt;テンプレートエンジンのサポートがあるので，古典的にHTMLをサーバーサイドで合成して返すこともできるし，もちろん&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を返して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;として使うこともできるようになってます．
テンプレートエンジンは&lt;a href=&quot;https://github.com/Keats/tera&quot;&gt;Tera&lt;/a&gt;というのを使うことができて，こういう感じで書けます&lt;a href=&quot;#f-ae3c5f9d&quot; name=&quot;fn-ae3c5f9d&quot; title=&quot;teraのREADMEから引用&quot;&gt;*1&lt;/a&gt;．&lt;/p&gt;

&lt;pre class=&quot;code lang-django&quot; data-lang=&quot;django&quot; data-unlink&gt;&amp;lt;ul&amp;gt;
&lt;span class=&quot;synPreProc&quot;&gt;{% &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; user &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; users %}&lt;/span&gt;
  &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&lt;span class=&quot;synPreProc&quot;&gt;{{ user.url }}&lt;/span&gt;&amp;quot;&amp;gt;&lt;span class=&quot;synPreProc&quot;&gt;{{ user.username }}&lt;/span&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&lt;span class=&quot;synPreProc&quot;&gt;{% &lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt; %}&lt;/span&gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;


&lt;p&gt;このときコントローラはこういう感じになっているとします．&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#[derive(Serialize)]&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;User&lt;/span&gt; {
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; url: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;,
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; username: &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;
}

&lt;span class=&quot;synPreProc&quot;&gt;#[derive(Serialize)]&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;Index&lt;/span&gt; {
    &lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; users: &lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;User&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;
}

&lt;span class=&quot;synPreProc&quot;&gt;#[get(&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;index&lt;/span&gt;() &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; Template {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; users &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;fetch_users&lt;/span&gt;();
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; context &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; Index { users: users };
    &lt;span class=&quot;synPreProc&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;context)
}
&lt;/pre&gt;


&lt;p&gt;完全にJinja2リスペクトだというのがわかります&lt;a href=&quot;#f-27a3a93a&quot; name=&quot;fn-27a3a93a&quot; title=&quot;Teraという名前もJinja(神社)に対するTera(寺)ということなのだろう．そういえばTemplateってTemple(寺院)っぽい綴りですね．なんという偶然！&quot;&gt;*2&lt;/a&gt;．
&lt;code&gt;Template::render&lt;/code&gt; 関数には &lt;a href=&quot;https://docs.rs/serde/1.0.89/serde/trait.Serialize.html&quot;&gt;Serialize&lt;/a&gt; traitを実装しているものなら何でも &lt;code&gt;context&lt;/code&gt; として渡せるようです．
今回は構造体を定義してSerializeをderiveしたものを渡していますが，普通にHashMapとかも渡せます．&lt;/p&gt;

&lt;p&gt;この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;は速いのかということに関しては普通に高速だと思います．そもそも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3&quot;&gt;ドメイン&lt;/a&gt;ロジックが少ないしDB呼び出しも少ないから遅くなりようがないんですが...．
ただ，RocketはRustの&lt;b&gt;nightly&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;を前提&lt;/b&gt;にしているので，そこがちょっとつらいです．
2ヶ月ぶりに機能を追加しようと思ったら&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9&quot;&gt;コンパイラ&lt;/a&gt;のインストールから始まるみたいなのつらくないですか？僕はつらいです．&lt;/p&gt;

&lt;h4 id=&quot;ORM-Diesel-に関する所感&quot;&gt;ORM &quot;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Diesel&quot;&gt;Diesel&lt;/a&gt;&quot; に関する所感&lt;/h4&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Diesel&quot;&gt;Diesel&lt;/a&gt;はRustのORMです．今回は主にmigrationが欲しくて使いました．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdiesel.rs%2F&quot; title=&quot;Diesel&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://diesel.rs/&quot;&gt;diesel.rs&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;DBアクセスをこんな感じで書ける&lt;a href=&quot;#f-006716d4&quot; name=&quot;fn-006716d4&quot; title=&quot;http://diesel.rs/ より引用&quot;&gt;*3&lt;/a&gt;．&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#[derive(Insertable)]&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;#[table_name=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;users&amp;quot;&lt;/span&gt;&lt;span class=&quot;synPreProc&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;NewUser&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;a&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; {
    name: &lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;a&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;str&lt;/span&gt;,
    hair_color: &lt;span class=&quot;synType&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;a&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; new_users &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;vec!&lt;/span&gt;[
    NewUser { name: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Sean&amp;quot;&lt;/span&gt;, hair_color: &lt;span class=&quot;synConstant&quot;&gt;Some&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt;) },
    NewUser { name: &lt;span class=&quot;synConstant&quot;&gt;&amp;quot;Gordon&amp;quot;&lt;/span&gt;, hair_color: &lt;span class=&quot;synConstant&quot;&gt;None&lt;/span&gt; },
];

&lt;span class=&quot;synIdentifier&quot;&gt;insert_into&lt;/span&gt;(users)
    .&lt;span class=&quot;synIdentifier&quot;&gt;values&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;new_users)
    .&lt;span class=&quot;synIdentifier&quot;&gt;execute&lt;/span&gt;(&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;connection);
&lt;/pre&gt;


&lt;p&gt;あとmigrationがあったり，複雑なクエリが書ける&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;があったり，型安全だったり，&lt;b&gt;データベースからテーブルの定義を導出&lt;/b&gt;してくれたりという感じで結構便利です．&lt;/p&gt;

&lt;p&gt;一方で，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時に生成されるので，ドキュメントが検索しづらいという問題があります．あと導入が若干面倒です．
また，Rocketと組み合わせて使うためにはコネクションプールをいい感じに取り扱ってやる必要があって，そこはかなり面倒でした．
具体的には，&lt;a href=&quot;https://github.com/diesel-rs/r2d2-diesel&quot;&gt;r2d2-diesel&lt;/a&gt;というライブラリがあるので，これとRocketの&lt;a href=&quot;https://rocket.rs/v0.4/guide/state/&quot;&gt;state&lt;/a&gt;を組みわせることで，Rocketで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/diesel&quot;&gt;diesel&lt;/a&gt;を使うことができます．&lt;/p&gt;

&lt;h4 id=&quot;画像の生成&quot;&gt;画像の生成&lt;/h4&gt;

&lt;p&gt;質問文を画像に埋め込んでポストするというのを実現したいというのがあって，これは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;の140字制限を回避しつつ質問文を全てツイートに入れたいからですね．
つまり，こういう画像を生成したいわけです：&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190313/20190313154853.jpg&quot; alt=&quot;f:id:threetea0407:20190313154853j:plain&quot; title=&quot;f:id:threetea0407:20190313154853j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;この機能はRustの&lt;a href=&quot;https://docs.rs/image/0.21.0/image/&quot;&gt;image&lt;/a&gt;というクレートで画像を生成することで実現しました．
素朴に質問文を一文字一文字画像に埋め込んでいます．
文字の折返しもちゃんとやるようになっていて&lt;a href=&quot;#f-611c9211&quot; name=&quot;fn-611c9211&quot; title=&quot;禁則処理は実装してないです&quot;&gt;*4&lt;/a&gt;，これが一番面倒だった．&lt;/p&gt;

&lt;p&gt;また，この部分だけは別のレポジトリに切り出していて，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3&quot;&gt;コマンドライン&lt;/a&gt;から文字画像を生成できるようになっています．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fgenya0407%2Freing_text2image&quot; title=&quot;genya0407/reing_text2image&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/genya0407/reing_text2image&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;こうすると&lt;/p&gt;

&lt;pre class=&quot;code console&quot; data-lang=&quot;console&quot; data-unlink&gt;$ cargo run -- &amp;#39;5000兆円欲しい！！&amp;#39; --brand &amp;#34;ぼくがかんがえたさいきょうの質問サービス&amp;#34; --rgb 00,00,00&lt;/pre&gt;


&lt;p&gt;こうなる&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190313/20190313161632.jpg&quot; alt=&quot;f:id:threetea0407:20190313161632j:plain&quot; title=&quot;f:id:threetea0407:20190313161632j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;こういう感じで，テキスト，枠色，ロゴなどを自由に変えられるので，自分で質問箱を作りたいという方は使って下さい．&lt;/p&gt;

&lt;h3 id=&quot;デプロイ&quot;&gt;デプロイ&lt;/h3&gt;

&lt;p&gt;もともとHerokuでやってたんですが，高速化を試みていくとHerokuへの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B9%BB%FE%B4%D6&quot;&gt;アクセス時間&lt;/a&gt;のせいで主に遅くなってるっぽかったので，途中から&lt;b&gt;さくらの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VPS&quot;&gt;VPS&lt;/a&gt;&lt;/b&gt;に載せ替えました．&lt;/p&gt;

&lt;h4 id=&quot;Heroku&quot;&gt;Heroku&lt;/h4&gt;

&lt;p&gt;HerokuにRustのアプリケーションをデプロイするには，これを使っていました．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Femk%2Fheroku-buildpack-rust&quot; title=&quot;emk/heroku-buildpack-rust&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/emk/heroku-buildpack-rust&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;Herokuへの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%B9%BB%FE%B4%D6&quot;&gt;アクセス時間&lt;/a&gt;が長いのは，FreeプランだとUSにあるサーバーを使うことになるからですね．
金を払えばTokyoリージョンのHerokuも使えるらしいが...&lt;/p&gt;

&lt;h4 id=&quot;さくらのVPS&quot;&gt;さくらの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VPS&quot;&gt;VPS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;フツーに80番ポートでnginxでリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを受けて，アプリケーションが待ち受ける別のポートにリダイレクトしています．
Dockerとかもほとんど使ってない&lt;a href=&quot;#f-b0b67774&quot; name=&quot;fn-b0b67774&quot; title=&quot;このサーバーはArchLinuxなんですが，ArchのパッケージマネージャでPostgreSQLを入れると勝手にバージョンアップされて悲惨なことになるので，PostgreSQLのバージョンを固定するためだけにDockerを使っている．&quot;&gt;*5&lt;/a&gt;．古き良きWebアプリケーションという感じ．&lt;/p&gt;

&lt;p&gt;さくらの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VPS&quot;&gt;VPS&lt;/a&gt;は(日本国内からの)アクセス速度が速いです．具体的な数字は忘れたんですが，Herokuからさくらに移行しただけでめっちゃ速くなったので感動した記憶がある．&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xe4f9d58)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;さくらの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/VPS&quot;&gt;VPS&lt;/a&gt;にreing移転してからやたら早くなったなと思って計測したら、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/https&quot;&gt;https&lt;/a&gt;のレスポンス受け取るまでの速度がだいたい10倍ぐらい速くなってた。&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1011073082448941056?ref_src=twsrc%5Etfw&quot;&gt;June 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;速度について&quot;&gt;速度について&lt;/h3&gt;

&lt;p&gt;速いの？→速いぞ！！！&lt;/p&gt;

&lt;p&gt;まずこれがpeing.netの&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?hl=ja&quot;&gt;PageSpeed Insights&lt;/a&gt;のスコアです．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;peing.netのPageSpeed Insightsの結果&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190313/20190313170310.png&quot; alt=&quot;f:id:threetea0407:20190313170310p:plain&quot; title=&quot;f:id:threetea0407:20190313170310p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;peing.netのPageSpeed Insightsの結果&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;そしてこれが私が作った質問サービスのスコアです．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;私が作った質問箱のPageSpeed Insightsの結果&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190313/20190313170246.png&quot; alt=&quot;f:id:threetea0407:20190313170246p:plain&quot; title=&quot;f:id:threetea0407:20190313170246p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;私が作った質問箱のPageSpeed Insightsの結果&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;まずRustで書いてるので速いというのと，あとpeing.netの方は質問の画像を表示しているのですが，こっちは質問文は文章だけを表示しており，画像は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;に投稿するときだけ使うようにしています．これらが主に速度に寄与していると思います．&lt;/p&gt;

&lt;p&gt;とはいえ，広告なし，利用者1人でやってたら早くなるのは当たり前ですね．&lt;/p&gt;

&lt;h2 id=&quot;オマケ技術的でない話&quot;&gt;オマケ：技術的でない話&lt;/h2&gt;

&lt;p&gt;質問してくるユーザーの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;を保存するようにしているんですが，それによっていくつかわかったことがあります&lt;/p&gt;

&lt;h3 id=&quot;質問してくるユーザーの数は非常に少ない&quot;&gt;質問してくるユーザーの数は非常に少ない&lt;/h3&gt;

&lt;p&gt;このサービスを作成してから大体2900件ぐらいの質問が来てるんですが，これは色んな人からまんべんなく質問が来てるわけではなくて，少数のユーザーからの質問が主であるということがわかっています&lt;a href=&quot;#f-63f51d74&quot; name=&quot;fn-63f51d74&quot; title=&quot;人にもよると思うが&quot;&gt;*6&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;例えば，質問してきた数が多い順に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;を並べて質問数の累積和を取ると，上から10個目ぐらいで質問数が75%に達し，35個目ぐらいで90%を超えます．
つまり，よく質問する35人で90%以上の質問をしているということになります&lt;a href=&quot;#f-19290c41&quot; name=&quot;fn-19290c41&quot; title=&quot;IPアドレスの数自体は218ぐらいあるので，割と綺麗にパレートの法則を満たしている気がします&quot;&gt;*7&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;質問数の集計結果(IPアドレスは一応モザイク)&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190313/20190313174720.jpg&quot; alt=&quot;f:id:threetea0407:20190313174720j:plain&quot; title=&quot;f:id:threetea0407:20190313174720j:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;質問数の集計結果(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;は一応モザイク)&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;つまり，質問してくるユーザーの数は少なく，一部の熱心なユーザーが大量の質問をポストしてくるという構造がありそうということがわかります．&lt;/p&gt;

&lt;h3 id=&quot;自演するやつがいる&quot;&gt;自演するやつがいる&lt;/h3&gt;

&lt;p&gt;匿名インターネットで自演は当たり前のことなんですが，綺麗に自演が判明したことがあったので共有します．&lt;/p&gt;

&lt;p&gt;一時期女叩きするやつにめっちゃ粘着されてた時期がありました．&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xd981958)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;「Aという考えが存在するのでAだ」というのを本気で主張してるんだとしたら、流石にそれは「バカ」以外の何者でもないと思うんですけど、流石にネタですよね？ &lt;a href=&quot;https://twitter.com/hashtag/reing?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#reing&lt;/a&gt; &lt;a href=&quot;https://t.co/eIG65keEnk&quot;&gt;https://t.co/eIG65keEnk&lt;/a&gt; &lt;a href=&quot;https://t.co/Agp74xHxkh&quot;&gt;pic.twitter.com/Agp74xHxkh&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1023196069004337153?ref_src=twsrc%5Etfw&quot;&gt;July 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xe4f9d58)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;そんなものないでしょ。「Aというデータが存在しないので¬Aだ」という論法は成り立ちませんからね。 &lt;a href=&quot;https://twitter.com/hashtag/reing?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#reing&lt;/a&gt; &lt;a href=&quot;https://t.co/cjhOVdDx6N&quot;&gt;https://t.co/cjhOVdDx6N&lt;/a&gt; &lt;a href=&quot;https://t.co/KdGmfCn3J1&quot;&gt;pic.twitter.com/KdGmfCn3J1&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1023213023341600770?ref_src=twsrc%5Etfw&quot;&gt;July 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xd981958)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;あなた女叩きの投稿を繰り返してますけど、こういうのは「ネチネチ根に持つ」とか「女々しい」とかって言わないんですかね。&lt;br&gt;それとも自分が「少数派」だという自覚があるんでしょうか？ &lt;a href=&quot;https://twitter.com/hashtag/reing?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#reing&lt;/a&gt; &lt;a href=&quot;https://t.co/hMqlzuDAJv&quot;&gt;https://t.co/hMqlzuDAJv&lt;/a&gt; &lt;a href=&quot;https://t.co/2j2M1HDVQf&quot;&gt;pic.twitter.com/2j2M1HDVQf&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1023215868392554496?ref_src=twsrc%5Etfw&quot;&gt;July 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xd981958)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;なるほど &lt;a href=&quot;https://twitter.com/hashtag/reing?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#reing&lt;/a&gt; &lt;a href=&quot;https://t.co/AsNseiPCmR&quot;&gt;https://t.co/AsNseiPCmR&lt;/a&gt; &lt;a href=&quot;https://t.co/9hnSbs2MYV&quot;&gt;pic.twitter.com/9hnSbs2MYV&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1023217073084743680?ref_src=twsrc%5Etfw&quot;&gt;July 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;この5倍ぐらい質問がPOSTされてたんですが多すぎるので割愛します．
僕は飛んできた質問はなるべく返すようにしているんですが流石ウンザリしてきたタイミングでした．
ちなみにこれ全部同じ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;から飛んできた質問です．&lt;/p&gt;

&lt;p&gt;このような質問に紛れて，以下のような質問が飛んできました&lt;a href=&quot;#f-c5dc6986&quot; name=&quot;fn-c5dc6986&quot; title=&quot;もはや質問でもない&quot;&gt;*8&lt;/a&gt;．&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;当方女ですが、女の方が悪いです。 当然です。 男の人が優しい人が多い理由として、 男の人は 『他人から良い評価を得られる事に生き甲斐を感じている』 からでしょう。 男の人は周りからの目線をよく気にします。 どう、思われてるかな？ モテたい、出世したいなど だから、人に対して優しく出来たり、 だから、義理人情に熱い人が多い →よって、自ずと性格の優しい人が増えるのだと思います。 対して女が性格悪いと言われる理由に 『いかに自分がお姫様扱いされるか』 に生き甲斐を感じれる人が多いからでしょう。 だから大して自分から動きもせずに 楽がしたい、 甘やかされてるから我が儘も言い放題だから その証拠に、 彼氏にしたい人=会話が面白い人でぇ～ 結婚したい人=年収500万以上でぇ～ なんていう私利私欲の極みと言えるゲス、ばっかりですよね。 だから男の人は性格が優しい だから女は全員性格が悪い そう叩かれるのは当然の結果だと思います。 女も良く思われたいなら努力しろ！！ 女だからって甘ったれんな！！ これを見てる人で自信を持って 『私はそんな事無い！！』 と言い切れるなら、 聞き流してくれて良いですよ。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;突然女性を名乗る匿名の人からの質問が飛んできましたね．
「当方女ですが」の破壊力が高いのはさておいて，こんなこと言う女性おるんかいなという気持ちに当然なります&lt;a href=&quot;#f-7fc029ba&quot; name=&quot;fn-7fc029ba&quot; title=&quot;これは女性は悪口言わないだろうみたいな話ではなく，同性のことをここまで悪し様に描写して異性を持ち上げるやつおるか？という気持ちでした．最近ではそのような男性・女性はしばしばいるということがわかってきたのでなんやという感じですが...&quot;&gt;*9&lt;/a&gt;．
そこで質問者の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;を見ると，この質問は上に貼った&lt;b&gt;女叩きの質問の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;と同じ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;から投稿されている&lt;/b&gt;ということがわかりました．
女叩きの中で「自分は男である」と言っているので，これは明らかな自演です．&lt;/p&gt;

&lt;p&gt;そのことを回答で指摘したところ，女叩きの質問はピタッと止まりました&lt;a href=&quot;#f-3108078c&quot; name=&quot;fn-3108078c&quot; title=&quot;ちなみにこのIPアドレスはその後もいくつか質問をしているのだが，「明日手術を受けるのですが、怖くてたまりません。何か勇気の出る言葉をください」という質問を最後に質問をしなくなっています．&quot;&gt;*10&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xd981958)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;自演失敗してますよ。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;がさっき自分を女々しい男だと言ってたやつとおんなじなんだよね。 &lt;a href=&quot;https://twitter.com/hashtag/reing?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#reing&lt;/a&gt; &lt;a href=&quot;https://t.co/HeQdZeklPq&quot;&gt;https://t.co/HeQdZeklPq&lt;/a&gt; &lt;a href=&quot;https://t.co/wDFCQ53MF6&quot;&gt;pic.twitter.com/wDFCQ53MF6&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1023228796000907265?ref_src=twsrc%5Etfw&quot;&gt;July 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;みなさんも自演するときはプロキシなどを通して身元がばれないようにしましょうね．&lt;/p&gt;

&lt;h2 id=&quot;追記20190319&quot;&gt;追記(2019/03/19)&lt;/h2&gt;

&lt;p&gt;このブログを公開した後，以下のような質問が来た．&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xd981958)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;こんなのあるんすね〜。直します。 &lt;a href=&quot;https://twitter.com/hashtag/reing?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#reing&lt;/a&gt; &lt;a href=&quot;https://t.co/iXUi7EaQDi&quot;&gt;https://t.co/iXUi7EaQDi&lt;/a&gt; &lt;a href=&quot;https://t.co/7SV9pmRb4V&quot;&gt;pic.twitter.com/7SV9pmRb4V&lt;/a&gt;&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1105990967469830145?ref_src=twsrc%5Etfw&quot;&gt;March 14, 2019&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://observatory.mozilla.org/analyze/reing.kuminecraft.xyz&quot;&gt;https://observatory.mozilla.org/analyze/reing.kuminecraft.xyz&lt;/a&gt;は，ウェブサイトをチェックしてどこを直せばセキュリティが向上するか教えてくれるというサービスらしい．
この質問が投げられたときは安全性は &lt;strong&gt;F&lt;/strong&gt; というクッソ低いスコアだったんですが，nginxの設定をいじったりした結果，&lt;strong&gt;A+&lt;/strong&gt;まで改善することができました．わいわい！&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190319/20190319221215.png&quot; alt=&quot;f:id:threetea0407:20190319221215p:plain&quot; title=&quot;f:id:threetea0407:20190319221215p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-ae3c5f9d&quot; name=&quot;f-ae3c5f9d&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a href=&quot;https://github.com/Keats/tera&quot;&gt;teraのREADME&lt;/a&gt;から引用&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-27a3a93a&quot; name=&quot;f-27a3a93a&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;Teraという名前もJinja(神社)に対するTera(寺)ということなのだろう．そういえばTemplateってTemple(寺院)っぽい綴りですね．なんという偶然！&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-006716d4&quot; name=&quot;f-006716d4&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a href=&quot;http://diesel.rs/&quot;&gt;http://diesel.rs/&lt;/a&gt; より引用&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-611c9211&quot; name=&quot;f-611c9211&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;禁則処理は実装してないです&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-b0b67774&quot; name=&quot;f-b0b67774&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;このサーバーはArchLinuxなんですが，Archのパッケージマネージャで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt;を入れると勝手にバージョンアップされて悲惨なことになるので，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt;のバージョンを固定するためだけにDockerを使っている．&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-63f51d74&quot; name=&quot;f-63f51d74&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;人にもよると思うが&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-19290c41&quot; name=&quot;f-19290c41&quot; class=&quot;footnote-number&quot;&gt;*7&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;の数自体は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/218&quot;&gt;218&lt;/a&gt;ぐらいあるので，割と綺麗に&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E6%B3%95%E5%89%87&quot;&gt;パレートの法則&lt;/a&gt;を満たしている気がします&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-c5dc6986&quot; name=&quot;f-c5dc6986&quot; class=&quot;footnote-number&quot;&gt;*8&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;もはや質問でもない&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-7fc029ba&quot; name=&quot;f-7fc029ba&quot; class=&quot;footnote-number&quot;&gt;*9&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;これは女性は悪口言わないだろうみたいな話ではなく，同性のことをここまで悪し様に描写して異性を持ち上げるやつおるか？という気持ちでした．最近ではそのような男性・女性はしばしばいるということがわかってきたのでなんやという感じですが...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-3108078c&quot; name=&quot;f-3108078c&quot; class=&quot;footnote-number&quot;&gt;*10&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;ちなみにこの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9&quot;&gt;IPアドレス&lt;/a&gt;はその後もいくつか質問をしているのだが，「明日手術を受けるのですが、怖くてたまりません。何か勇気の出る言葉をください」という質問を最後に質問をしなくなっています．&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="Rust" label="Rust" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190331/20190331113046.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>Pythonのコレクション操作をメソッドチェーンでやる</title>
        <link href="https://dawn.hateblo.jp/entry/2019/02/27/131547"/>
        <id>hatenablog://entry/10257846132689799411</id>
        <published>2019-02-27T13:15:47+09:00</published>
        <updated>2019-03-02T22:11:54+09:00</updated>        <summary type="html">以前このような記事を書いた． dawn.hateblo.jp 詳しくはそちらを読んでいただくとして，Pythonのコレクション操作がイケてないという気持ちが僕にはある*1． しかし，Pythonには豊富な資産(numpy，pandas，networkx，scikit-learnなどなど...)があり，Pythonを使わざるをえないことがまれによくある． 上の記事でも書いたように，僕はRubyのコレクション操作のようにmapやfilterをメソッドチェーンするのが好きだ． Pythonでも同様のコレクション操作を実現できないか？というのがこの記事の主題である． *1:異論は認める</summary>
        <content type="html">&lt;p&gt;以前このような記事を書いた．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdawn.hateblo.jp%2Fentry%2F2018%2F12%2F17%2F134744&quot; title=&quot;ダラー演算子とメソッドチェーンとパイプライン演算子に対する気持ち - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/2018/12/17/134744&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;詳しくはそちらを読んでいただくとして，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;のコレクション操作がイケてないという気持ちが僕にはある&lt;a href=&quot;#f-e0beafc4&quot; name=&quot;fn-e0beafc4&quot; title=&quot;異論は認める&quot;&gt;*1&lt;/a&gt;．
しかし，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;には豊富な資産(numpy，pandas，networkx，scikit-learnなどなど...)があり，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;を使わざるをえないことがまれによくある．&lt;/p&gt;

&lt;p&gt;上の記事でも書いたように，僕は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;のコレクション操作のようにmapやfilterをメソッドチェーンするのが好きだ．
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;でも同様のコレクション操作を実現できないか？というのがこの記事の主題である．&lt;/p&gt;

&lt;h2&gt;既存のクラスを拡張する&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;では，既存のクラスに後から&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;メソッドを生やすことができる．&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; networkx &lt;span class=&quot;synStatement&quot;&gt;as&lt;/span&gt; nx

&lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;hoge&lt;/span&gt;(self):
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;&#39;Extended!&#39;&lt;/span&gt;

nx.Graph.my_special_method = hoge

G = nx.Graph()
G.my_special_method() &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; &#39;Extended&#39;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この調子で &lt;code&gt;list&lt;/code&gt; クラスに &lt;code&gt;map&lt;/code&gt; とか &lt;code&gt;filter&lt;/code&gt; を生やせば，メソッドチェーンでコレクション操作が可能になりそうな雰囲気がする．
しかし，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;には&lt;b&gt;組み込みクラスに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9&quot;&gt;インスタンス&lt;/a&gt;メソッドを生やせない&lt;/b&gt;という制約がある．
そして &lt;code&gt;list&lt;/code&gt;  クラスは組み込みクラスである．
従って， &lt;code&gt;list&lt;/code&gt; クラスに &lt;code&gt;map&lt;/code&gt; とか &lt;code&gt;filter&lt;/code&gt; を生やすことはできない．&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(self, func):
    &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; [func(elem) &lt;span class=&quot;synStatement&quot;&gt;for&lt;/span&gt; elem &lt;span class=&quot;synStatement&quot;&gt;in&lt;/span&gt; self]

&lt;span class=&quot;synIdentifier&quot;&gt;list&lt;/span&gt;.&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt; = &lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Error!&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%C6%A5%EC%A1%BC%A5%BF&quot;&gt;イテレータ&lt;/a&gt;ーをラップする新しいクラスを作る&lt;/h2&gt;

&lt;p&gt;既存のクラスの拡張が頓挫したので，別の手段を考える．&lt;/p&gt;

&lt;p&gt;一番単純なのは，適当に新しい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%C6%A5%EC%A1%BC%A5%BF&quot;&gt;イテレータ&lt;/a&gt;ーのクラスを定義してやり，そのコンスト&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF&quot;&gt;ラク&lt;/a&gt;タに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%C6%A5%EC%A1%BC%A5%BF&quot;&gt;イテレータ&lt;/a&gt;ーを渡してやることである．&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;i&lt;/span&gt;(&lt;span class=&quot;synIdentifier&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;__init__&lt;/span&gt;(self, iterator):
        self.iterator = iterator

    &lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(self, func):
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; i(&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(func, self.iterator))

    &lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;filter&lt;/span&gt;(self, func):
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; i(&lt;span class=&quot;synIdentifier&quot;&gt;filter&lt;/span&gt;(func, self.iterator))

    &lt;span class=&quot;synStatement&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;to_list&lt;/span&gt;(self):
        &lt;span class=&quot;synStatement&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;list&lt;/span&gt;(self.iterator)

i([&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;,-&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,-&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;]).&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;lambda&lt;/span&gt; x: x*&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;synIdentifier&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;lambda&lt;/span&gt; x: x &amp;lt;= &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;).to_list()
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [4, 2, -8, -10, -24]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;つまり，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;の組み込みリストをメソッドチェーンが可能な世界に &quot;持ち上げ&quot; て操作を行い，最後に &lt;code&gt;list&lt;/code&gt; として取り出してやればよいのである．
このやり方は一応うまくいく．しかし，問題点もある．&lt;/p&gt;

&lt;h3&gt;問題点1：メソッドチェーン中に改行できない&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;ではメソッドチェーン中に改行することができない．これは長いコレクション操作をするときにめんどくさいことになる．&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;i([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;]).&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(somefunc1)
                         .&lt;span class=&quot;synIdentifier&quot;&gt;filter&lt;/span&gt;(somecondition) &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Syntax error&lt;/span&gt;
                         .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(somefunc2)       &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Syntax error&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;この問題は，行末にバックスラッシュ&lt;code&gt;\&lt;/code&gt;を入れることで一応回避できる&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;i([&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;6&lt;/span&gt;]).&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(somefunc1)&lt;span class=&quot;synSpecial&quot;&gt;\&lt;/span&gt;
                         .&lt;span class=&quot;synIdentifier&quot;&gt;filter&lt;/span&gt;(somecondition)\ &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Ok&lt;/span&gt;
                         .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(somefunc2)       &lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; Ok&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;\&lt;/code&gt;を入れ忘れたり消し忘れたりしてウォアアアーーとなることもあるが...&lt;/p&gt;

&lt;h3&gt;問題点2：持ち上げて戻すのが冗長&lt;/h3&gt;

&lt;p&gt;メソッドチェーンを3つぐらいつなげてると別に気にならないんですが，一回mapしたいだけのときとかだと冗長さが気になってくる．&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;i(lst).&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;).to_list() &lt;span class=&quot;synComment&quot;&gt;# 冗長！&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;結論&lt;/h2&gt;

&lt;p&gt;郷に入っては郷に従え&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-e0beafc4&quot; name=&quot;f-e0beafc4&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;異論は認める&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190227/20190227210446.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>ダラー演算子とメソッドチェーンとパイプライン演算子に対する気持ち</title>
        <link href="https://dawn.hateblo.jp/entry/2018/12/17/134744"/>
        <id>hatenablog://entry/10257846132686051077</id>
        <published>2018-12-17T13:47:44+09:00</published>
        <updated>2018-12-17T18:09:45+09:00</updated>        <summary type="html">tl;dr ダラー演算子，メソッドチェーン，パイプライン演算子は，「関数を次々に適用するとネストが深くなってしまう」という問題を解決する．</summary>
        <content type="html">&lt;h2&gt;tl;dr&lt;/h2&gt;

&lt;p&gt;ダラー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;，メソッドチェーン，パイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;は，「関数を次々に適用するとネストが深くなってしまう」という問題を解決する．&lt;/p&gt;

&lt;h2&gt;disclaimer&lt;/h2&gt;

&lt;p&gt;これは個人の気持ち(ポエム)であり，特定の言語を批判することを目的に書いた文章ではない．また，この記事は言語のある側面を切り出して比較しているという点でフェアな比較ではない．言語ごとのベストプ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF&quot;&gt;ラク&lt;/a&gt;ティスも無視している．&lt;/p&gt;

&lt;p&gt;そもそも関数を次々に適用するのであれば，その結果を毎回変数にbindしろという主張もわかる．しかし，中間変数を使わずに関数を次々に適用したいという気持ちになることもあり，その場合はこのようにすると綺麗に書けるということをこの記事は主張している．&lt;/p&gt;

&lt;p&gt;私の知識不足で間違ったことを言ってるかもしれないのでそのときは教えてください．&lt;/p&gt;

&lt;h2&gt;関数を次々に適用するとネストが深くなってしまう問題&lt;/h2&gt;

&lt;p&gt;「配列の要素を2倍し，10以下の値だけを取り出し，絶対値でソートして，頭の3つを取り出す」という操作を考える．&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;では以下のように書ける．&lt;/p&gt;

&lt;pre class=&quot;code lang-python&quot; data-lang=&quot;python&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;synIdentifier&quot;&gt;sorted&lt;/span&gt;(&lt;span class=&quot;synIdentifier&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;lambda&lt;/span&gt; x: x &amp;lt;= &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;lambda&lt;/span&gt; x: x*&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;,-&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,-&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;])), key=&lt;span class=&quot;synIdentifier&quot;&gt;abs&lt;/span&gt;))[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;]
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [2, 4, -8]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;このコードには&lt;b&gt;ネストが深く読みづらい&lt;/b&gt;という問題がある．&lt;/p&gt;

&lt;p&gt;これを解決するのがダラー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;，メソッドチェーン，パイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;である．&lt;/p&gt;

&lt;h2&gt;ダラー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;($)の場合&lt;/h2&gt;

&lt;p&gt;先程の操作は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Haskell&quot;&gt;Haskell&lt;/a&gt;では以下のように書ける．&lt;/p&gt;

&lt;pre class=&quot;code lang-haskell&quot; data-lang=&quot;haskell&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; Data.List

take &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;$&lt;/span&gt; sortOn abs &lt;span class=&quot;synStatement&quot;&gt;$&lt;/span&gt; filter (&lt;span class=&quot;synStatement&quot;&gt;\&lt;/span&gt;n &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;$&lt;/span&gt; map (&lt;span class=&quot;synStatement&quot;&gt;\&lt;/span&gt;n &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;) [&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;]
&lt;span class=&quot;synComment&quot;&gt;-- =&amp;gt; [2, 4, -8]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;ネストが深く読みづらいという問題が解決されているのがわかる．&lt;/p&gt;

&lt;h2&gt;メソッドチェーンの場合&lt;/h2&gt;

&lt;p&gt;同じ操作を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;で書いてみよう．&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;-4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;-5&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;-12&lt;/span&gt;].map { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n * &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; }.select { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n &amp;lt;=&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; }.sort_by { |&lt;span class=&quot;synIdentifier&quot;&gt;n&lt;/span&gt;| n.abs }.take(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; [2, 4, -8]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;これもダラー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;の場合と同様に，ネストの深さを減らすことに成功している．&lt;/p&gt;

&lt;h2&gt;パイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;(|&gt;)の場合&lt;/h2&gt;

&lt;p&gt;同じ操作をElixirで書くと次のようになる．&lt;/p&gt;

&lt;pre class=&quot;code lang-elixir&quot; data-lang=&quot;elixir&quot; data-unlink&gt;[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;map(&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; n &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;filter(&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; n &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; n &lt;span class=&quot;synStatement&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;sort_by(&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; n &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;abs&lt;/span&gt;(n) &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;take(&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
&lt;/pre&gt;


&lt;p&gt;これもネストの深さを減らすことに成功している．&lt;/p&gt;

&lt;h2&gt;気持ち&lt;/h2&gt;

&lt;p&gt;このように，ネストの深さを減らす手法を3つ挙げた．これらの手法のうち，私はメソッドチェーンとパイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;を好んでいる．&lt;/p&gt;

&lt;p&gt;私がコードを書くときは，データから始まって順に操作を適用していくというふうに書くほうが楽だと感じる．そのような書き方をするとき，ダラー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;は書きづらい．
というのも，コードを書くときはカーソルが左から右に向かって動くからだ．ダラー&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;で書くときは，1ステップ書き終えるごとに左端までカーソルを動かす必要がある．
メソッドチェーンとパイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;の場合は，データの流れの方向とカーソルが動く方向が一致しているため，そのような操作をする必要がない．&lt;/p&gt;

&lt;p&gt;些末な違いだとは思うが，私は「コードの書き心地」を重視する人間なので，メソッドチェーンとパイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;を好んでいる．&lt;/p&gt;

&lt;h2&gt;追記: &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Haskell&quot;&gt;Haskell&lt;/a&gt;におけるパイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Haskell&quot;&gt;Haskell&lt;/a&gt;にもパイプライン&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2&quot;&gt;演算子&lt;/a&gt;のようなものがあると教えてもらった．&lt;/p&gt;

&lt;p&gt;こういう感じで書ける．&lt;/p&gt;

&lt;pre class=&quot;code lang-haskell&quot; data-lang=&quot;haskell&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; Data.List
&lt;span class=&quot;synPreProc&quot;&gt;import&lt;/span&gt; Data.Function

[&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;synStatement&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;12&lt;/span&gt;] &lt;span class=&quot;synStatement&quot;&gt;&amp;amp;&lt;/span&gt; map (&lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;&amp;amp;&lt;/span&gt; filter (&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;&amp;amp;&lt;/span&gt; sortOn abs &lt;span class=&quot;synStatement&quot;&gt;&amp;amp;&lt;/span&gt; take &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;-- &amp;gt; [2, 4, -8]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;これめっちゃいいですね．教えてくれた &lt;a href=&quot;https://twitter.com/ishiy1993&quot;&gt;@ishiy1993&lt;/a&gt; さんありがとうございます :pray: ．&lt;/p&gt;
</content>        
        <category term="Python" label="Python" />
        
        <category term="Elixir" label="Elixir" />
        
        <category term="Ruby" label="Ruby" />
        
        <category term="Haskell" label="Haskell" />
        
        <link rel="enclosure" href="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>ファストフード検索というサービスを作った</title>
        <link href="https://dawn.hateblo.jp/entry/fastfood"/>
        <id>hatenablog://entry/10257846132675720992</id>
        <published>2018-12-13T00:00:00+09:00</published>
        <updated>2019-03-19T16:35:22+09:00</updated>        <summary type="html">この記事は CAMPHOR- Advent Calendar 13日目の記事です． 先日ファストフード検索というWebアプリを作ったので，そのことについて書きます． ff.kuminecraft.xyz</summary>
        <content type="html">&lt;p&gt;この記事は&lt;a href=&quot;https://advent.camph.net/&quot;&gt; CAMPHOR- Advent Calendar&lt;/a&gt; 13日目の記事です．&lt;/p&gt;

&lt;p&gt;先日&lt;a href=&quot;https://ff.kuminecraft.xyz/&quot;&gt;ファストフード検索&lt;/a&gt;というWebアプリを作ったので，そのことについて書きます．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fff.kuminecraft.xyz%2F&quot; title=&quot;ファストフード検索&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://ff.kuminecraft.xyz/&quot;&gt;ff.kuminecraft.xyz&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;経緯&lt;/h2&gt;

&lt;p&gt;ちょっといいメシ屋を探すとき，僕は&lt;a href=&quot;https://ja.foursquare.com/&quot;&gt;Foursquare&lt;/a&gt;というアプリを使います．&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Foursquare&quot;&gt;Foursquare&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB&quot;&gt;スマホ&lt;/a&gt;アプリを開くと「昼食」「カフェ」みたいなカテゴリーが表示され，いずれかを選択すると近隣のおすすめのお店のリストが表示されます．&lt;/p&gt;

&lt;p&gt;便利に使っているのですが，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Foursquare&quot;&gt;Foursquare&lt;/a&gt;は &quot;ちょっといいご飯&quot; を教えてくれるサービスなので，例えば&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%AF%A5%C9&quot;&gt;マクド&lt;/a&gt;ナルドとか&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%C8%CC%EE%B2%C8&quot;&gt;吉野家&lt;/a&gt;とは載ってません&lt;/b&gt;．
しかし，僕はいつでもそういう気合の入った飯が食べたいわけではなく，&lt;b&gt;どこで食っても同じ味がするファストフード&lt;/b&gt;を食いたいと思うこともあります．つまり，「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%B9%A5%C8%A5%D5%A1%BC%A5%C9%C5%B9&quot;&gt;ファストフード店&lt;/a&gt;に特化した&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Foursquare&quot;&gt;Foursquare&lt;/a&gt;」みたいな概念を僕は求めているわけです．&lt;/p&gt;

&lt;p&gt;ところが「現在地近くの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%B9%A5%C8%A5%D5%A1%BC%A5%C9%C5%B9&quot;&gt;ファストフード店&lt;/a&gt;を，チェーンを横断してシュッと検索する手段」というのはなかなかありません．
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Google&quot;&gt;Google&lt;/a&gt; mapはまだそういうファ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC&quot;&gt;ジー&lt;/a&gt;な検索ができるほど賢くはなく，例えば「ファストフード」みたいな括りで検索をしても&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%CF%A5%F3%A5%D0%A1%BC%A5%AC&quot;&gt;ハンバーガ&lt;/a&gt;ー屋しか出ません．&lt;/p&gt;

&lt;p&gt;そういうわけで，現在地近くの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%B9%A5%C8%A5%D5%A1%BC%A5%C9%C5%B9&quot;&gt;ファストフード店&lt;/a&gt;をシュッと表示してくれるサービスがあったら便利だろうと思い，「ファストフード検索」を作りました．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fff.kuminecraft.xyz%2F&quot; title=&quot;ファストフード検索&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://ff.kuminecraft.xyz/&quot;&gt;ff.kuminecraft.xyz&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;リンクを踏むとデ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9&quot;&gt;バイス&lt;/a&gt;の位置情報を取得し，近くにある&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%B9%A5%C8%A5%D5%A1%BC%A5%C9%C5%B9&quot;&gt;ファストフード店&lt;/a&gt;の一覧を表示します．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;アプリのスクリーンショット&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181205/20181205222735.png&quot; alt=&quot;f:id:threetea0407:20181205222735p:plain&quot; title=&quot;f:id:threetea0407:20181205222735p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;アプリの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A1%BC%A5%F3%A5%B7%A5%E7%A5%C3%A5%C8&quot;&gt;スクリーンショット&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;今の所，対応しているチェーンは以下の8つです．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DE%A5%AF%A5%C9&quot;&gt;マクド&lt;/a&gt;ナルド&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E2%A5%B9%A5%D0%A1%BC%A5%AC%A1%BC&quot;&gt;モスバーガー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BE%BE%B2%B0&quot;&gt;松屋&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%B9%A4%AD%B2%C8&quot;&gt;すき家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%C8%CC%EE%B2%C8&quot;&gt;吉野家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%CA%A4%AB%B1%AC&quot;&gt;なか卯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%F3%A5%BF%A5%C3%A5%AD%A1%BC%A5%D5%A5%E9%A5%A4%A5%C9%A5%C1%A5%AD%A5%F3&quot;&gt;ケンタッキーフライドチキン&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DF%A5%B9%A5%BF%A1%BC%A5%C9%A1%BC%A5%CA%A5%C4&quot;&gt;ミスタードーナツ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;このチェーンも追加してくれみたいなのがあったら &lt;a href=&quot;https://twitter.com/genya0407&quot;&gt;@genya0407&lt;/a&gt; にリプを飛ばしてください．&lt;/p&gt;

&lt;h2&gt;作り方&lt;/h2&gt;

&lt;p&gt;作り方は大きく以下の3段階に分かれています．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;する&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;サーバーを作る&lt;/li&gt;
&lt;li&gt;クライアントサイドを作る&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;する&lt;/h3&gt;

&lt;p&gt;まず，店舗の名前と位置情報を取得する必要があります．
初めは&lt;a href=&quot;https://api.gnavi.co.jp/api/&quot;&gt;ぐるなびAPI&lt;/a&gt;とかを使おうと思ってたんですが，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CD%F8%CD%D1%B5%AC%CC%F3&quot;&gt;利用規約&lt;/a&gt;を見ると商用利用はできないとあるので断念&lt;a href=&quot;#f-8868a5b5&quot; name=&quot;fn-8868a5b5&quot; title=&quot;将来広告張ったりするかもしれないし...&quot;&gt;*1&lt;/a&gt;．
結局各チェーンのWebサイトを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;して情報を集めました．&lt;/p&gt;

&lt;p&gt;ここは&lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;でやりました．&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;は用いずに，&lt;a href=&quot;https://github.com/philss/floki&quot;&gt;Floki&lt;/a&gt; と &lt;a href=&quot;https://github.com/fredwu/opq&quot;&gt;OPQ&lt;/a&gt; というライブラリを組み合わせて&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;をやっていきます．&lt;/p&gt;

&lt;h4&gt;Floki&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/philss/floki&quot;&gt;Floki&lt;/a&gt; は，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CSS&quot;&gt;CSS&lt;/a&gt; selectorとかを使ってDOMを探索できるやつです．こういう感じで使います．&lt;/p&gt;

&lt;pre class=&quot;code lang-elixir&quot; data-lang=&quot;elixir&quot; data-unlink&gt;html_string
&lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Floki&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;find(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;#searchResult&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Floki&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;find(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Floki&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;attribute(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
&lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Floki&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;text()
&lt;span class=&quot;synStatement&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;trim()
&lt;span class=&quot;synComment&quot;&gt;#=&amp;gt; &amp;quot;https://twitter.com/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BB%A5%EC%A5%AF%A5%BF&quot;&gt;セレクタ&lt;/a&gt;をchainできるのがいいですね．&lt;/p&gt;

&lt;h4&gt;OPQ&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fredwu/opq&quot;&gt;OPQ&lt;/a&gt; はシンプルなin-memory queueで，ワーカーの数を指定したりインターバルを指定したりしてレート制限が実現できます．こういう感じで使います．&lt;/p&gt;

&lt;pre class=&quot;code lang-elixir&quot; data-lang=&quot;elixir&quot; data-unlink&gt;{&lt;span class=&quot;synConstant&quot;&gt;:ok&lt;/span&gt;, opq} &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;OPQ&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;init(&lt;span class=&quot;synConstant&quot;&gt;workers:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;interval:&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# Queueを初期化&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;OPQ&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;enqueue(opq, &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;puts(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# タスクをenqueue&lt;/span&gt;
&lt;span class=&quot;synType&quot;&gt;OPQ&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;enqueue(opq, &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;.&lt;/span&gt;puts(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;# タスクをenqueue&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; hello&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# |一秒停止|&lt;/span&gt;
&lt;span class=&quot;synComment&quot;&gt;# =&amp;gt; world&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;例えばHTTPリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを全部OPQを介して投げることで，全てのリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トの間に一定の時間間隔を設けることができます&lt;a href=&quot;#f-03489bea&quot; name=&quot;fn-03489bea&quot; title=&quot;クローラが一秒一回を超えてリクエストを投げるのはマナー違反． [http://ascii.jp/elem/000/001/177/1177656/:title]&quot;&gt;*2&lt;/a&gt;．&lt;/p&gt;

&lt;h4&gt;クローラの設計&lt;/h4&gt;

&lt;p&gt;各チェーン店の店舗名と位置情報を取得し，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;ファイルに書き出すということをやっていきます．&lt;/p&gt;

&lt;p&gt;大抵のチェーン店では，「店舗一覧」という画面があって，そこに「店舗詳細」へのURLが列挙されているという構造になっています．
したがって&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;は，&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;店舗一覧ページを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;して店舗詳細ページのURLを抽出する&lt;/li&gt;
&lt;li&gt;それぞれの店舗のURLを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;する&lt;/li&gt;
&lt;li&gt;情報を集約して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;に書き出す&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;という流れでやることになります．&lt;/p&gt;

&lt;p&gt;せっかくElixirを使っているので並行処理でやっていきたい&lt;a href=&quot;#f-8d0ed4a0&quot; name=&quot;fn-8d0ed4a0&quot; title=&quot;一般にクローラを書くときに並行処理でやっていくのは，IOを大量にやるというクローラの特性からするとパフォーマンスが高くなるので良さそうですが，今回の場合は同一のサーバーに連続してリクエストを投げるので，各リクエストの間に1秒以上間隔を開ける必要があり，そっちのほうが律速になるので，並行処理でやってもそんなにパフォーマンスは変わらない気もします．&quot;&gt;*3&lt;/a&gt;わけですが，ちょっと面倒なのが実行した結果を集約するところです．複数のプロセスから同時に書き出すとRace Conditionが起きて結果がめちゃくちゃになるので，各プロセスが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;してきた情報を一箇所に集めて矛盾が生じないようにする必要があります．&lt;/p&gt;

&lt;p&gt;Elixirの並行処理クローラの動作は以下のようになります．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;indexプロセス&lt;/b&gt;は，「一覧ページを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;して，&lt;b&gt;detailプロセス&lt;/b&gt;に詳細ページのURLを送信する」というタスクをOPQにenqueueします&lt;/li&gt;
&lt;li&gt;&lt;b&gt;detailプロセスは&lt;/b&gt;は，「詳細ページを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;して，店舗の情報を&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;プロセス&lt;/b&gt;に送信する」というタスクをOPQにenqueueします&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;プロセス&lt;/b&gt;は，店舗の情報を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;ファイルに書き出します&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;緑の丸がプロセスです．各プロセスがOPQ(赤い丸)にタスクをenqueueして，タスクが次のプロセスに結果を送信するという気持ちです．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;ポンチ絵&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181205/20181205215312.png&quot; alt=&quot;f:id:threetea0407:20181205215312p:plain&quot; title=&quot;f:id:threetea0407:20181205215312p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DD%A5%F3%A5%C1%B3%A8&quot;&gt;ポンチ絵&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;このようにすることで，クローラ全体のHTTPリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トの頻度を制御することが可能になります．&lt;/p&gt;

&lt;p&gt;ここで疑問に思う方もいると思うのですが，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;プロセス以外はプロセスを分ける必要はありません&lt;a href=&quot;#f-a0427497&quot; name=&quot;fn-a0427497&quot; title=&quot;JSONプロセスはファイル書き出しを排他制御するために必須です&quot;&gt;*4&lt;/a&gt;．
例えば，OPQのタスクから直接OPQにタスクを入れる設計にしてもいいわけです．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;ポンチ絵2&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181205/20181205220436.png&quot; alt=&quot;f:id:threetea0407:20181205220436p:plain&quot; title=&quot;f:id:threetea0407:20181205220436p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DD%A5%F3%A5%C1%B3%A8&quot;&gt;ポンチ絵&lt;/a&gt;2&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;しかし，このような設計にすると，&lt;b&gt;「「「タスクを発行するというタスク」を発行するというタスク」を発行する」&lt;/b&gt;みたいな意味のわからんことになります．
初めはそういう設計にしていたのですが，複雑過ぎて頭が爆発てしまったため，一段階ごとに情報を集約するように設計し直して複雑度を減少させました．&lt;/p&gt;

&lt;h4&gt;ファストフードチェーンを増やすのが大変という話&lt;/h4&gt;

&lt;p&gt;そういう感じで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;の方針は立ったわけですが実は大きな問題があって，それはファストフードチェーンごとに全然ページの構造が違うということです．&lt;/p&gt;

&lt;p&gt;前節ではあたかも，全てのファストフードチェーンが「一覧ページ → 詳細ページ」のような構造になっているかのような書き方をしました．
しかし実際には，そもそも一覧ページが無かったり，「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県一覧ページ → その&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県にある店舗一覧ページ → 詳細ページ」のように三段階になっていたり，「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県一覧ページ (→ もしその&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C5%D4%C6%BB&quot;&gt;都道&lt;/a&gt;府県にある店舗が10件以上であれば市区町村一覧ページを表示する) → 詳細ページ」のように二〜三段階になっていたりします．&lt;/p&gt;

&lt;p&gt;このようにチェーンごとにWebページの構造が全然違うので，チェーン毎に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;のコードをほとんど全部書き換えることになりました．
アプリケーションを作成する上で，ここが一番面倒くさかったです．&lt;/p&gt;

&lt;p&gt;余談ですが，店舗一覧などのデータを共有されることに企業側もデメリットはないはずなので，そういうのが &lt;strong&gt;商用利用可能な形で&lt;/strong&gt; 公開される未来が来てほしいと強く思いました．&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EC%A5%A4%A5%D4%A5%F3%A5%B0&quot;&gt;スクレイピング&lt;/a&gt;した結果を公開していいなら今すぐにでもできるんだけど，そういう法律になっていないので難しいですね．&lt;/p&gt;

&lt;h3&gt;2. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;サーバーを作る&lt;/h3&gt;

&lt;p&gt;店舗情報が集まったので&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;サーバーを作っていきます．Elixirでやります．&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;サーバーの仕事は店舗を検索して返すことです．
デ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9&quot;&gt;バイス&lt;/a&gt;からユーザーの現在地(緯度と経度)が飛んできたとき，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/API&quot;&gt;API&lt;/a&gt;サーバーは近くの店舗を距離順にソートして返します．&lt;/p&gt;

&lt;p&gt;構想の段階では&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt;の &lt;a href=&quot;https://postgis.net/&quot;&gt;PostGIS&lt;/a&gt; を使えばいけるやろと思ってたんですが，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt;に拡張を入れるのが面倒くさかったのと，よく考えたらmutableなデータを持つわけじゃないからDB必要ないし，全部プログラムの中でやったほうが高速になりそうだし，&lt;b&gt;スケールしそう&lt;/b&gt;だし簡単じゃんということに気づいてDBは使わないことにしました．&lt;/p&gt;

&lt;h4&gt;店舗情報の読み込み&lt;/h4&gt;

&lt;p&gt;じゃあどうやって店舗情報を読み込むんだという話になります．
一番最初はリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トがくるたびに店舗情報の入った&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;を読みに行ってたんですが，変化しない情報なので毎回読みに行く必要がないなと気付き，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時に店舗情報を実行ファイルに混ぜ込むことにしました．&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;時にデータを混ぜ込む方法についてはQiitaに記事を書いたので，&lt;b&gt;いいねして徳を積んでください&lt;/b&gt;&lt;a href=&quot;#f-0ee5bdef&quot; name=&quot;fn-0ee5bdef&quot; title=&quot;メタプログラミングですね．母語がRubyの人間なのですぐにメタプログラミングをしたくなります．&quot;&gt;*5&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fgenya0407%2Fitems%2F13a1d9dc54a927e21db1&quot; title=&quot;Elixirでコンパイル時にStruct/Mapを生成して埋め込む方法 - Qiita&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://qiita.com/genya0407/items/13a1d9dc54a927e21db1&quot;&gt;qiita.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h4&gt;店舗の検索&lt;/h4&gt;

&lt;p&gt;店舗情報が読み込めたので，あとはユーザーの現在地と店舗位置から距離を計算してソートして，半径10km以内とかの条件でフィルタして，店舗一覧を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;で返してやればいいわけです．&lt;/p&gt;

&lt;p&gt;こ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%B3%A4%CF%A4%C1&quot;&gt;こはち&lt;/a&gt;ょっと計算量を落とす工夫があって&lt;a href=&quot;#f-39275780&quot; name=&quot;fn-39275780&quot; title=&quot;CSクソ雑魚マンなので間違ったこと言ってたらごめんなさい&quot;&gt;*6&lt;/a&gt;，&lt;b&gt;ソートしてからフィルタ&lt;/b&gt;すると店舗数&lt;img src=&quot;https://chart.apis.google.com/chart?cht=tx&amp;chl=n&quot; alt=&quot;n&quot;/&gt;に対して計算量が &lt;img src=&quot;https://chart.apis.google.com/chart?cht=tx&amp;chl=O%28n%5E%202%20%5Clog%28n%29%29&quot; alt=&quot;O(n^ 2 \log(n))&quot;/&gt; になるんですが，順番を逆にして&lt;b&gt;フィルタしてからソート&lt;/b&gt;してやると計算量が&lt;img src=&quot;https://chart.apis.google.com/chart?cht=tx&amp;chl=O%28n%5E%202%20d%20%5Clog%28nd%29%29&quot; alt=&quot;O(n^ 2 d \log(nd))&quot;/&gt;になります．ここで&lt;img src=&quot;https://chart.apis.google.com/chart?cht=tx&amp;chl=d&quot; alt=&quot;d&quot;/&gt;は店舗の &quot;密度&quot; です．&lt;/p&gt;

&lt;p&gt;日本の国土面積が大体40万平方km なので，半径10kmという条件でフィルタすると大体 &lt;img src=&quot;https://chart.apis.google.com/chart?cht=tx&amp;chl=d%20%5Capprox%201%2F1000&quot; alt=&quot;d \approx 1/1000&quot;/&gt; ぐらいになります&lt;a href=&quot;#f-49e5dce6&quot; name=&quot;fn-49e5dce6&quot; title=&quot;ただしファストフードの店舗は日本の国土に均一に存在しているものとする&quot;&gt;*7&lt;/a&gt;．
実際&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%DE%A1%BC%A5%AF&quot;&gt;ベンチマーク&lt;/a&gt;を取ると，&lt;img src=&quot;https://chart.apis.google.com/chart?cht=tx&amp;chl=n%20%5Capprox%2010000&quot; alt=&quot;n \approx 10000&quot;/&gt; のときに1.5倍ぐらいの速度差が出ます．この差は&lt;img src=&quot;https://chart.apis.google.com/chart?cht=tx&amp;chl=n&quot; alt=&quot;n&quot;/&gt;が大きくなると広がるようです&lt;a href=&quot;#f-4a7c88d0&quot; name=&quot;fn-4a7c88d0&quot; title=&quot;30msが18msになるとかの速度感なんであんまり意味ないッスけどね...&quot;&gt;*8&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;余談ですが，こういうことを考えるようになったのは，CAMPHOR-でやっていた「競プロ入門書輪読会」の影響が大きいと思います&lt;a href=&quot;#f-05296bf5&quot; name=&quot;fn-05296bf5&quot; title=&quot;[https://blog.camph.net/event/competitive-programming-introduction-reading-circle/:title]&quot;&gt;*9&lt;/a&gt;&lt;a href=&quot;#f-72519175&quot; name=&quot;fn-72519175&quot; title=&quot;[https://zunda3rd.hatenablog.com/entry/spiral_book:title]&quot;&gt;*10&lt;/a&gt;．
それまでは，遅くなったらキャッシュに載せるということしかできなかったのですが，今回の問題は計算結果をキャッシュするのが難しいのでそれでは高速化できなかっただろうと思います．&lt;/p&gt;

&lt;p&gt;この記事を読んだ関西の学生は&lt;a href=&quot;https://camph.net/&quot;&gt;CAMPHOR-&lt;/a&gt;で一緒に勉強しましょう！(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%EC%A5%AF%A5%C8%A5%DE%A1%BC%A5%B1%A5%C6%A5%A3%A5%F3%A5%B0&quot;&gt;ダイレクトマーケティング&lt;/a&gt;)&lt;/p&gt;

&lt;h4&gt;Webフレームワーク&lt;/h4&gt;

&lt;p&gt;ちなみに，DB使わないのでORMもいらないし，エンドポイントが2個しかないのでコントローラーもいらないということで，&lt;a href=&quot;https://github.com/phoenixframework/phoenix&quot;&gt;Phoenix&lt;/a&gt;は使わず&lt;a href=&quot;https://github.com/hexedpackets/trot&quot;&gt;trot&lt;/a&gt;という小さいWebフレームワークを使っています．こういう感じで書けます．&lt;/p&gt;

&lt;pre class=&quot;code lang-elixir&quot; data-lang=&quot;elixir&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Web&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Trot.Router&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Trot.Template&lt;/span&gt;

  static(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/js&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)
  static(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/images&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;)

  get &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    {&lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;, render_template(&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;index.html.eex&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;, [&lt;span class=&quot;synConstant&quot;&gt;val:&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&amp;quot;&lt;/span&gt;])}
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;3. フロントエンドを作る&lt;/h3&gt;

&lt;p&gt;普段はフロントエンドなんて本当に適当に済ませてしまう人間なんですが，今回はサービスの性質上SPAっぽくせざるを得ない&lt;a href=&quot;#f-fd0b9d2c&quot; name=&quot;fn-fd0b9d2c&quot; title=&quot;JavaScriptで現在位置を取得してサーバーにリクエストを投げないといけない&quot;&gt;*11&lt;/a&gt;ので&lt;a href=&quot;https://jp.vuejs.org/index.html&quot;&gt;Vue.js&lt;/a&gt;をチョット書きました．&lt;/p&gt;

&lt;p&gt;一応PWAになっていて，二回ぐらい見ると「ホーム画面に追加しますか？」みたいなプロンプトが出ると思います．
このアプリは思い立った瞬間にぱっと開けるというのが重要なので渋々実装しました．&lt;/p&gt;

&lt;p&gt;デザインは&lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;を適当にやりました．
Bootstrapは，デザインセンスがない人間が最低限のUIを作るには本当に便利な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;だなと最近強く思います．&lt;/p&gt;

&lt;p&gt;また，レイアウトとかは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Foursquare&quot;&gt;Foursquare&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB&quot;&gt;スマホ&lt;/a&gt;アプリをかなり参考にしました．
画像の位置とか店名の文字色とか，普段使ってる上質なUIは違和感がないので何も思わないですが，いざ自分で似たようなものを作ろうとするとハチャメチャな見た目になるので，デザイナーってすごいという気持ちになりました．&lt;/p&gt;

&lt;p&gt;あとアイコンはちょっと頑張って作りました&lt;a href=&quot;#f-7664fd69&quot; name=&quot;fn-7664fd69&quot; title=&quot;溢れ出る00年代感...&quot;&gt;*12&lt;/a&gt;．
マップピンの頭部が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%CF%A5%F3%A5%D0%A1%BC%A5%AC&quot;&gt;ハンバーガ&lt;/a&gt;ーになっているという気持ちです．&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181126/20181126233936.png&quot; alt=&quot;f:id:threetea0407:20181126233936p:plain:w200&quot; title=&quot;f:id:threetea0407:20181126233936p:plain:w200&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:200px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;参考にしたブログ記事：&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Ftomokortn.hatenablog.com%2Fentry%2Fadvent2017&quot; title=&quot;ノンデザイナーでもできる！イケてるロゴの作り方 - tomokortn&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://tomokortn.hatenablog.com/entry/advent2017&quot;&gt;tomokortn.hatenablog.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;思ったこと&lt;/h2&gt;

&lt;p&gt;よく考えてみたら，不特定多数の人間が使うことを前提としたサービスを真面目に作るのは初めて&lt;a href=&quot;#f-4056e2cf&quot; name=&quot;fn-4056e2cf&quot; title=&quot;前に作った「嫌いになった企業ランキング 理由検索(今はelasticsearchが落ちてるせいで動きません)」というサービスもありますが，あれはジョークで作ったものなので自分の中では別カテゴリーです．質問箱クローンも自分が使うためのものなので別カテゴリー．&quot;&gt;*13&lt;/a&gt;でした．今までは寮生が使う業務アプリケーション的なものを作ったことしかなかったので．&lt;/p&gt;

&lt;p&gt;鍛えたWeb力でサービスをガシガシ開発して&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C9%D4%CF%AB%BD%EA%C6%C0&quot;&gt;不労所得&lt;/a&gt;で暮らしたい．&lt;/p&gt;

&lt;h2&gt;追記&lt;/h2&gt;

&lt;p&gt;既に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB&quot;&gt;スマホ&lt;/a&gt;アプリが存在していた...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jfmap.com/&quot;&gt;http://jfmap.com/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-8868a5b5&quot; name=&quot;f-8868a5b5&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;将来広告張ったりするかもしれないし...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-03489bea&quot; name=&quot;f-03489bea&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;クローラが一秒一回を超えてリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げるのはマナー違反． &lt;a href=&quot;http://ascii.jp/elem/000/001/177/1177656/&quot;&gt;http://ascii.jp/elem/000/001/177/1177656/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-8d0ed4a0&quot; name=&quot;f-8d0ed4a0&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;一般にクローラを書くときに並行処理でやっていくのは，IOを大量にやるというクローラの特性からするとパフォーマンスが高くなるので良さそうですが，今回の場合は同一のサーバーに連続してリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げるので，各リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トの間に1秒以上間隔を開ける必要があり，そっちのほうが&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CE%A7%C2%AE&quot;&gt;律速&lt;/a&gt;になるので，並行処理でやってもそんなにパフォーマンスは変わらない気もします．&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-a0427497&quot; name=&quot;f-a0427497&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JSON&quot;&gt;JSON&lt;/a&gt;プロセスはファイル書き出しを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C7%D3%C2%BE%C0%A9%B8%E6&quot;&gt;排他制御&lt;/a&gt;するために必須です&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-0ee5bdef&quot; name=&quot;f-0ee5bdef&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0&quot;&gt;メタプログラミング&lt;/a&gt;ですね．&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CA%EC%B8%EC&quot;&gt;母語&lt;/a&gt;が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;の人間なのですぐに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0&quot;&gt;メタプログラミング&lt;/a&gt;をしたくなります．&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-39275780&quot; name=&quot;f-39275780&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;CSクソ雑魚マンなので間違ったこと言ってたらごめんなさい&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-49e5dce6&quot; name=&quot;f-49e5dce6&quot; class=&quot;footnote-number&quot;&gt;*7&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;ただしファストフードの店舗は日本の国土に均一に存在しているものとする&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-4a7c88d0&quot; name=&quot;f-4a7c88d0&quot; class=&quot;footnote-number&quot;&gt;*8&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;30msが18msになるとかの速度感なんであんまり意味ないッスけどね...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-05296bf5&quot; name=&quot;f-05296bf5&quot; class=&quot;footnote-number&quot;&gt;*9&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a href=&quot;https://blog.camph.net/event/competitive-programming-introduction-reading-circle/&quot;&gt;&amp;#x7AF6;&amp;#x30D7;&amp;#x30ED;&amp;#x5165;&amp;#x9580;&amp;#x66F8;&amp;#x8F2A;&amp;#x8AAD;&amp;#x4F1A; - CAMPHOR- Blog&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-72519175&quot; name=&quot;f-72519175&quot; class=&quot;footnote-number&quot;&gt;*10&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a href=&quot;https://zunda3rd.hatenablog.com/entry/spiral_book&quot;&gt;&amp;#x87BA;&amp;#x65CB;&amp;#x672C;&amp;#x8F2A;&amp;#x8AAD;&amp;#x4F1A;&amp;#x306B;&amp;#x53C2;&amp;#x52A0;&amp;#x3057;&amp;#x305F;&amp;#x8A71; - zunda2nd&amp;rsquo;s diary&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-fd0b9d2c&quot; name=&quot;f-fd0b9d2c&quot; class=&quot;footnote-number&quot;&gt;*11&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;で現在位置を取得してサーバーにリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げないといけない&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-7664fd69&quot; name=&quot;f-7664fd69&quot; class=&quot;footnote-number&quot;&gt;*12&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;溢れ出る00年代感...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-4056e2cf&quot; name=&quot;f-4056e2cf&quot; class=&quot;footnote-number&quot;&gt;*13&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;前に作った「&lt;a href=&quot;https://hate-reason.kuminecraft.xyz/&quot;&gt;嫌いになった企業ランキング 理由検索&lt;/a&gt;(今はelasticsearchが落ちてるせいで動きません)」というサービスもありますが，あれはジョークで作ったものなので自分の中では別カテゴリーです．質問箱クローンも自分が使うためのものなので別カテゴリー．&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="Elixir" label="Elixir" />
        
        <category term="Vue.js" label="Vue.js" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181126/20181126233936.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>高校の文化祭の食販の注文フローを電子化した話</title>
        <link href="https://dawn.hateblo.jp/entry/kebab-system"/>
        <id>hatenablog://entry/10257846132661019413</id>
        <published>2018-12-03T00:00:00+09:00</published>
        <updated>2019-03-31T11:26:56+09:00</updated>        <summary type="html">この記事は CAMPHOR- Advent Calendar 2018 3日目の記事です． 高校の文化祭の食販の注文フローを電子するべくWebアプリケーションを作り，当時*1はWeb素人だったためクソ実装になったが，役には立ったという話をします． *1:2013年</summary>
        <content type="html">&lt;p&gt;この記事は &lt;a href=&quot;https://advent.camph.net/&quot;&gt;CAMPHOR- Advent Calendar 2018&lt;/a&gt; 3日目の記事です．&lt;/p&gt;

&lt;p&gt;高校の文化祭の食販の注文フローを電子するべくWebアプリケーションを作り，当時&lt;a href=&quot;#f-31e11675&quot; name=&quot;fn-31e11675&quot; title=&quot;2013年&quot;&gt;*1&lt;/a&gt;はWeb素人だったためクソ実装になったが，役には立ったという話をします．&lt;/p&gt;

&lt;h2&gt;背景&lt;/h2&gt;

&lt;p&gt;僕の母校の高校には，三年生が文化祭で食販をやるという慣習があり，僕のクラスは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;を販売することになりました．
母校の家庭科の教員は衛生管理に大変厳しい人で，食販を行う場合は以下の条件を満たさないと許可が降りませんでした&lt;a href=&quot;#f-0a7d18ef&quot; name=&quot;fn-0a7d18ef&quot; title=&quot;屋外の石窯でピザを焼いていたクラスだけはなぜかその制約を逃れていたので謎&quot;&gt;*2&lt;/a&gt;．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;調理は調理室のみで行う(教室で調理してはいけない)&lt;/li&gt;
&lt;li&gt;作り置きは禁止&lt;a href=&quot;#f-c54cf927&quot; name=&quot;fn-c54cf927&quot; title=&quot;厳密には，作ってから10分経った食品は廃棄みたいなルールだったと思う&quot;&gt;*3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;これらの制約を満たすため，多くのクラスは以下のような流れで食販を行っていました．&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;教室で注文を受け，注文を何件か溜める&lt;/li&gt;
&lt;li&gt;注文を持って調理室に向かう&lt;/li&gt;
&lt;li&gt;注文を伝え，調理が完了するのを待つ&lt;/li&gt;
&lt;li&gt;料理を運ぶ&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;このフローには問題があります．
まず，2に「調理室に向かう」とありますが，調理室までの廊下は大変混んでおり，たどり着くまでに時間がかかります&lt;a href=&quot;#f-f07eb2f7&quot; name=&quot;fn-f07eb2f7&quot; title=&quot;だから1で注文を &quot;バッファリング&quot; している&quot;&gt;*4&lt;/a&gt;．
次に，3で「調理が完了するのを待つ」とありますが，作り置きが禁止されているため待ち時間が発生します．&lt;/p&gt;

&lt;p&gt;これらが原因で，お客さんは注文してから料理が届くまで長い間待たされていました．
この待ち時間を短縮するべく，注文フローを電子化することにしました．&lt;/p&gt;

&lt;h2&gt;仕様&lt;/h2&gt;

&lt;p&gt;以下が電子化された注文フローです．&lt;/p&gt;

&lt;p&gt;注文フローには大きく分けて3種類の人間が登場します．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受付

&lt;ul&gt;
&lt;li&gt;教室で注文を聞き，Webアプリに入力する(&lt;b&gt;注文&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;調理者

&lt;ul&gt;
&lt;li&gt;Webアプリの注文を見て調理室で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;を作る(&lt;b&gt;確認&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運搬者

&lt;ul&gt;
&lt;li&gt;調理室から教室まで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;を運び，注文完了フラグを立てる(&lt;b&gt;記録&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;これらの人間がWebアプリを介して図のように協調するわけです．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;ポンチ絵&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181128/20181128211604.png&quot; alt=&quot;f:id:threetea0407:20181128211604p:plain&quot; title=&quot;f:id:threetea0407:20181128211604p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DD%A5%F3%A5%C1%B3%A8&quot;&gt;ポンチ絵&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h2&gt;実装&lt;/h2&gt;

&lt;p&gt;動くものはこちら:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kebab-sub.appspot.com/order&quot;&gt;注文画面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kebab-sub.appspot.com/view&quot;&gt;確認画面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kebab-sub.appspot.com/del&quot;&gt;記録画面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;実装の全ては &lt;a href=&quot;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b&quot;&gt;gist&lt;/a&gt; に置きました．読みたい人は読んでください．&lt;/p&gt;

&lt;p&gt;以下ではこのコードを抜粋して&lt;b&gt;クソ実装ポイント&lt;/b&gt;を解説します．&lt;/p&gt;

&lt;p&gt;実装に興味がない人は &lt;a href=&#39;#problem&#39;&gt;文化祭当日の話&lt;/a&gt; までジャンプしてください．&lt;/p&gt;

&lt;h3&gt;クソ実装ポイント1: HTMLを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;の文字列に直書きしている&lt;/h3&gt;

&lt;p&gt;当時は若く，テンプレートエンジンという概念を知りませんでした．
そのためHTMLを&lt;b&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;のコードの中に直書き&lt;/b&gt;しています．&lt;/p&gt;

&lt;p&gt;迫力がありますね．&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181201/20181201002806.png&quot; alt=&quot;f:id:threetea0407:20181201002806p:plain&quot; title=&quot;f:id:threetea0407:20181201002806p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L187&quot;&gt;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L187&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;少しでも共&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD&quot;&gt;通化&lt;/a&gt;しようとする涙ぐましい努力が感じられます．&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181201/20181201002946.png&quot; alt=&quot;f:id:threetea0407:20181201002946p:plain&quot; title=&quot;f:id:threetea0407:20181201002946p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L69&quot;&gt;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L69&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Python&quot;&gt;Python&lt;/a&gt;の文字列の中にHTMLを書いてるので，HTMLの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;ハイライトは一切効きません．当然&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B7%A5%F3%A5%BF%A5%C3%A5%AF%A5%B9&quot;&gt;シンタックス&lt;/a&gt;ハイライトも効きません．
これは実際開発中に問題を起こしており，コードに色がついていなかったため&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;中のクォーテーションマーク(&#39;)が&lt;b&gt;全角になっているのに気づかず&lt;/b&gt;，丸一日&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0&quot;&gt;デバッグ&lt;/a&gt;で溶かしたという記憶があります．&lt;/p&gt;

&lt;p&gt;これが原因で当時悪夢を見た．
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xe394d98)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;絶対自分では書いてないコードをソースの中に見つけて、その処理の内容も全くわからず、ずっと悩み続けるという悪夢を見ました。&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/376438317539012608?ref_src=twsrc%5Etfw&quot;&gt;September 7, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3&gt;クソ実装ポイント2:  全てのPOSTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを単一のエンドポイントに投げている&lt;/h3&gt;

&lt;p&gt;なんでそうしたのか本当に覚えていません．フォームに &lt;code&gt;type&lt;/code&gt; という属性を付与して，その値で分岐しています&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181201/20181201003145.png&quot; alt=&quot;f:id:threetea0407:20181201003145p:plain&quot; title=&quot;f:id:threetea0407:20181201003145p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L110&quot;&gt;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L110&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なんでこんなことをしたんですかね...&lt;/p&gt;

&lt;p&gt;多分エンドポイントを増やすのが面倒みたいな理由だと思うんですが覚えてない．&lt;/p&gt;

&lt;h3&gt;クソ実装ポイント3:  全てのリダイレクトを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;で実現している&lt;/h3&gt;

&lt;p&gt;POSTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを受けた後などのリダイレクトしたくなる全ての場面で &lt;code&gt;location.href=&quot;/path&quot;&lt;/code&gt; が使われています．&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181201/20181201003252.png&quot; alt=&quot;f:id:threetea0407:20181201003252p:plain&quot; title=&quot;f:id:threetea0407:20181201003252p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L131&quot;&gt;https://gist.github.com/genya0407/d8af63f8fd0730bedf1408f8a9b29a8b#file-main-py-L131&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当時は&lt;b&gt;HTTPのレスポンスでリダイレクトを表現できることを知らなかった&lt;/b&gt;のでこういう実装になりました．&lt;/p&gt;

&lt;h2&gt;&lt;span id=&#39;problem&#39;&gt;文化祭当日の話&lt;/span&gt;&lt;/h2&gt;

&lt;h3&gt;発生した致命的な問題&lt;/h3&gt;

&lt;p&gt;実際に運用したところ，1日目の午後から，「作ったはずの注文に完了フラグが立たず，&lt;b&gt;古い注文が永遠に表示され続ける&lt;/b&gt;」という現象が発生しました．
こうなると新しい注文が表示されないので，調理者は完全にストップします．
そして教室には注文を待つお客さんが溢れ，いつまで経っても&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;が届かない...という&lt;b&gt;地獄が発生します&lt;/b&gt;．&lt;/p&gt;

&lt;p&gt;結局その日は途中で手作業にフォールバックし，どうにか残りの注文を捌きました．&lt;/p&gt;

&lt;p&gt;その日の夜，クラス委員で集まって2日目をどうするかということを議論しました(文化祭は二日間ある)．
また同じ現象が起こるかもしれないという不安があるため，僕は手作業の方が安全だという主張をしました．
しかし，調理者側の責任者が「手作業よりも&lt;b&gt;Webアプリの方が全然楽だ&lt;/b&gt;」と強く主張したため，翌日もWebアプリで行くことになりました&lt;a href=&quot;#f-0281468f&quot; name=&quot;fn-0281468f&quot; title=&quot;これは自分の中で結構革命的な体験だった．というのも，それまでもプログラムを書いたことはあったが，「役に立つプログラムを書いて，しかもそれを人に褒められる」というのは初めての体験だったからだ．&quot;&gt;*5&lt;/a&gt;．&lt;/p&gt;

&lt;h3&gt;原因&lt;/h3&gt;

&lt;p&gt;とはいえ，問題を解決しなければ翌日も地獄が発生する可能性があります．
しかしコードを見てもバグっぽいところは見つからないし，そもそも午前中は正しく動いていたのです．&lt;/p&gt;

&lt;p&gt;午前中に動いていたシステムが，午後になって突然動かなくなるなんてことがあるか？午前と午後で変わるものって何だ？
というところまで考えて，この現象は「&lt;b&gt;運搬者が記録ボタンを押し忘れている&lt;/b&gt;」ことに起因するのではないかということに思い当たりました．&lt;/p&gt;

&lt;p&gt;運搬者はシフト交代がありました&lt;a href=&quot;#f-81abf864&quot; name=&quot;fn-81abf864&quot; title=&quot;もちろん受付・調理者もシフト制ですが． &quot;&gt;*6&lt;/a&gt;．
午前中はみんなちゃんと記録ボタンを押していたのだが，午後のシフトの誰かが記録ボタンをよく押し忘れる人だったという仮説を立てるとこの現象を説明できます&lt;a href=&quot;#f-68d67716&quot; name=&quot;fn-68d67716&quot; title=&quot;もちろん使い方の説明はしたんですが，事前の訓練とかは特にしてないのでミスが出るのは仕方がない．&quot;&gt;*7&lt;/a&gt;．&lt;/p&gt;

&lt;p&gt;他の人間と違って運搬者は，運搬/記録 という2つの独立した作業をする必要があります．
記録はしなくても運搬はできてしまうので，&lt;b&gt;記録するのを忘れやすい構造&lt;/b&gt;になっています．&lt;/p&gt;

&lt;h3&gt;解決策&lt;/h3&gt;

&lt;p&gt;原因がわかったところで，どうやって解決するのかという話になります．&lt;/p&gt;

&lt;p&gt;問題は結局，人間に&lt;b&gt;間違いやすい行動をさせるのが悪い&lt;/b&gt;というところに帰着されます．
では，間違いやすい行動を人間にさせないためにはどうすればよいでしょうか？&lt;/p&gt;

&lt;p&gt;これは，間違いやすい行動を&lt;b&gt;複数の簡単な行動に分割する&lt;/b&gt;ことで実現できます．&lt;/p&gt;

&lt;p&gt;このことを踏まえ，注文フローを以下のように修正しました．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受付

&lt;ul&gt;
&lt;li&gt;教室で客の注文を聞き，Webアプリに入力する(注文)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;調理者

&lt;ul&gt;
&lt;li&gt;Webアプリの注文を見て調理室で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;を作る(確認)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運搬者

&lt;ul&gt;
&lt;li&gt;調理室から教室まで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;を運ぶ(&lt;b&gt;記録はしない&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;管理者&lt;/b&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;が運び出されたのを確認して注文完了フラグを立てる(&lt;b&gt;記録&lt;/b&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;つまり，運搬者に記録をさせるのをやめて，記録するだけの人間(=管理者)を新たに作ったということです．
管理者は記録という業務に集中できるので，記録忘れをすることは基本的にありません．&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;figure-image figure-image-fotolife&quot; title=&quot;ポンチ絵2&quot;&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20181129/20181129001905.png&quot; alt=&quot;f:id:threetea0407:20181129001905p:plain&quot; title=&quot;f:id:threetea0407:20181129001905p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;figcaption&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DD%A5%F3%A5%C1%B3%A8&quot;&gt;ポンチ絵&lt;/a&gt;2&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;これの何が嬉しいのかというと，&lt;b&gt;新しく機能を作らなくて済む&lt;/b&gt;という点です．
アプリケーションを修正するのではなく，運用方法を修正することで対応したわけです．&lt;/p&gt;

&lt;p&gt;これに加えて，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B1%A5%D0%A5%D6&quot;&gt;ケバブ&lt;/a&gt;の注文状況と出荷状況が把握できる管理者用画面を作りました．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kebab-sub.appspot.com/check&quot;&gt;管理者用画面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;これを見れば，問題なく注文が捌けているのか一目瞭然です．&lt;/p&gt;

&lt;p&gt;このように注文フローを修正することで，2日目は特に障害もなくWebアプリが動作しました．&lt;/p&gt;

&lt;p&gt;めでたしめでたし．&lt;/p&gt;

&lt;h2&gt;考察/学び&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;知識は大事である．テンプレートエンジンやHTTPの知識などを含めたWebシステムにおけるベストプ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF&quot;&gt;ラク&lt;/a&gt;ティスを知らなかったのでこういうクソコードを書くことになった．&lt;/li&gt;
&lt;li&gt;&lt;b&gt;人は間違いをする&lt;/b&gt;ということを前提にシステムを作る必要がある．

&lt;ul&gt;
&lt;li&gt;人に作業をさせるときは，それをチェックする仕組みとミスしたときに修正する仕組みを用意しなければならない．&lt;/li&gt;
&lt;li&gt;ミスの原因は，人にあると考えるのではなく，業務にあると考える．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;クソコードでも役には立つ&lt;/b&gt;．&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;現在の文化祭はもっとハイテクになっていた&lt;/h2&gt;

&lt;p&gt;...というようなことを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;で連投していたところ，母校の後輩から以下のようなツイートが飛んできました．&lt;/p&gt;

&lt;h3&gt;2016年&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xe394d98)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;高校の文化祭といえば、まだ日本語ドキュメントもないFirebaseのHostingとRealtime DBで注文システム作ったの大変懐かしい &lt;a href=&quot;https://t.co/2yrVy7hNW7&quot;&gt;pic.twitter.com/2yrVy7hNW7&lt;/a&gt;&lt;/p&gt;&amp;mdash; ど(∩❛ڡ❛∩)ら (@_dorayaki_) &lt;a href=&quot;https://twitter.com/_dorayaki_/status/1067770969916231680?ref_src=twsrc%5Etfw&quot;&gt;November 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3&gt;2018年&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xe394d98)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;でも今年のとか見たらもっとハイテクでびっくりしますよ… &lt;a href=&quot;https://t.co/pbHLi4ldcv&quot;&gt;pic.twitter.com/pbHLi4ldcv&lt;/a&gt;&lt;/p&gt;&amp;mdash; ど(∩❛ڡ❛∩)ら (@_dorayaki_) &lt;a href=&quot;https://twitter.com/_dorayaki_/status/1067774511129407488?ref_src=twsrc%5Etfw&quot;&gt;November 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;


&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;食販ハイテクムーブメントの始祖になれたということで一つ...&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;HASH(0xe394d98)&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;来年5年ぶりに母校の文化祭行ってみようかな&lt;/p&gt;&amp;mdash; 𝑨𝒓𝒓𝒂𝒚-𝒔𝒂𝒏 (@genya0407) &lt;a href=&quot;https://twitter.com/genya0407/status/1067776195452784640?ref_src=twsrc%5Etfw&quot;&gt;November 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;追記&lt;/h2&gt;

&lt;p&gt;このブログを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Facebook&quot;&gt;Facebook&lt;/a&gt;に投稿したところ，他にも様々な面で電子化が進んでいるとの情報を高校の先生からいただきました．&lt;/p&gt;

&lt;p&gt;例えば，アト&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF&quot;&gt;ラク&lt;/a&gt;ションを出し物にしているクラスが得点ランキングの表示を電子化したり，各団体の待ち時間が廊下のディスプレイに表示されたりしているそうです．
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C7%A5%B8%A5%BF%A5%EB%A5%CD%A5%A4%A5%C6%A5%A3%A5%D6&quot;&gt;デジタルネイティブ&lt;/a&gt;の波を感じますね．&lt;/p&gt;

&lt;h2&gt;関連記事&lt;/h2&gt;

&lt;p&gt;4年間の修行の末，もっといい感じのWebアプリを作れるようになった．&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdawn.hateblo.jp%2Fentry%2Fwrite-code-kumano-dormitory&quot; title=&quot; 熊野寮でコードを書いて感謝された話 - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/write-code-kumano-dormitory&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdawn.hateblo.jp%2Fentry%2F2018%2F02%2F03%2F200552&quot; title=&quot;職人じゃないけどAAがしたい！ - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/2018/02/03/200552&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdawn.hateblo.jp%2Fentry%2F2018%2F09%2F11%2F202511&quot; title=&quot;「熊野寮で電子化した話」というタイトルでLTした - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/2018/09/11/202511&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-31e11675&quot; name=&quot;f-31e11675&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;2013年&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-0a7d18ef&quot; name=&quot;f-0a7d18ef&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;屋外の石窯でピザを焼いていたクラスだけはなぜかその制約を逃れていたので謎&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-c54cf927&quot; name=&quot;f-c54cf927&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;厳密には，作ってから10分経った食品は廃棄みたいなルールだったと思う&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-f07eb2f7&quot; name=&quot;f-f07eb2f7&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;だから1で注文を &quot;バッファリング&quot; している&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-0281468f&quot; name=&quot;f-0281468f&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;これは自分の中で結構革命的な体験だった．というのも，それまでもプログラムを書いたことはあったが，「役に立つプログラムを書いて，しかもそれを人に褒められる」というのは初めての体験だったからだ．&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-81abf864&quot; name=&quot;f-81abf864&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;もちろん受付・調理者もシフト制ですが． &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-68d67716&quot; name=&quot;f-68d67716&quot; class=&quot;footnote-number&quot;&gt;*7&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;もちろん使い方の説明はしたんですが，事前の訓練とかは特にしてないのでミスが出るのは仕方がない．&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="Python" label="Python" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190331/20190331112637.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>「熊野寮で電子化した話」というタイトルでLTした</title>
        <link href="https://dawn.hateblo.jp/entry/2018/09/11/202511"/>
        <id>hatenablog://entry/10257846132627228643</id>
        <published>2018-09-11T20:25:11+09:00</published>
        <updated>2019-03-31T11:37:10+09:00</updated>        <summary type="html">bit-valley.jp 先日BIT VALLEY 2018というイベントがあり、そのAFTER PARTY(懇親会)で「熊野寮で電子化した話」というタイトルでLTをした。 これがその時のスライド。 熊野寮で電子化した話 from Yusuke Sangenya 内容としては、手作業の塊みたいな地獄のタスクがあり、これをWebアプリ化して担当者の仕事量を削減したという話。</summary>
        <content type="html">&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fbit-valley.jp%2F&quot; title=&quot;BIT VALLEY 2019 「モノづくりは、新たな領域へ」 | ビットバレー 2019&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://bit-valley.jp/&quot;&gt;bit-valley.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;先日BIT VALLEY 2018というイベントがあり、そのAFTER PARTY(懇親会)で「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;で電子化した話」というタイトルでLTをした。
これがその時のスライド。&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/4yAtaz7tzVZU6R&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;p&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/yusukesangenya/ss-113899132&quot; title=&quot;熊野寮で電子化した話&quot; target=&quot;_blank&quot;&gt;熊野寮で電子化した話&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/yusukesangenya&quot; target=&quot;_blank&quot;&gt;Yusuke Sangenya&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;内容としては、手作業の塊みたいな地獄のタスクがあり、これをWebアプリ化して担当者の仕事量を削減したという話。&lt;/p&gt;

&lt;p&gt;LTをやったのは僕の他にも2人いて、うち1人とはうっかり内容が被ってしまうところだった&lt;a href=&quot;#f-05d542b3&quot; name=&quot;fn-05d542b3&quot; title=&quot;被せたわけではなく、被りそうになったことがわかったのは当日だった&quot;&gt;*1&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/shiba6v/yi-chuan-de-arugorizumudesihutozu-miwozi-dong-hua-sitahua&quot;&gt;&amp;#x907A;&amp;#x4F1D;&amp;#x7684;&amp;#x30A2;&amp;#x30EB;&amp;#x30B4;&amp;#x30EA;&amp;#x30BA;&amp;#x30E0;&amp;#x3067;&amp;#x30B7;&amp;#x30D5;&amp;#x30C8;&amp;#x7D44;&amp;#x307F;&amp;#x3092;&amp;#x81EA;&amp;#x52D5;&amp;#x5316;&amp;#x3057;&amp;#x305F;&amp;#x8A71; - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;勢いだけで起業して壁にぶち当たった話(スライド未公開)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;LTなので5分という制約があり、また会場の客層もよくわからなかったため、あまり詳細な話はしなかった。この記事でもっと詳しく書こうと思う。&lt;/p&gt;

&lt;p&gt;（LT自体は結構うまくいったと感じていて、笑いも2つ3つとれたので満足している）&lt;/p&gt;

&lt;h2&gt;作ったWebアプリケーションの説明&lt;/h2&gt;

&lt;p&gt;スライドにだいたい書いた。ここではスライドに書いていないことを補足する。&lt;/p&gt;

&lt;p&gt;このアプリの主な機能は以下である：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;シフト提出をする&lt;/li&gt;
&lt;li&gt;シフト提出を一定時間ごとにメールで催促する&lt;/li&gt;
&lt;li&gt;シフトを作成する&lt;/li&gt;
&lt;li&gt;作成したシフトをメールで通知する&lt;/li&gt;
&lt;li&gt;各寮生の仕事回数をカウントする&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;今回も &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails&quot;&gt;Ruby on Rails&lt;/a&gt; をつかった&lt;a href=&quot;#f-37b45857&quot; name=&quot;fn-37b45857&quot; title=&quot;こいついっつもレールズ書いてんな&quot;&gt;*2&lt;/a&gt;。また、サーバーとしてはConoHaを採用した。&lt;a href=&quot;#f-f6868b3f&quot; name=&quot;fn-f6868b3f&quot; title=&quot;別にGMOのステマというわけではない。&quot;&gt;*3&lt;/a&gt;&lt;a href=&quot;#f-56a331f5&quot; name=&quot;fn-56a331f5&quot; title=&quot;オタクなのでかわいい女の子の絵があると使いたくなってしまう。&quot;&gt;*4&lt;/a&gt;。コードは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/github&quot;&gt;github&lt;/a&gt;で管理しているが、デプロイ情報が載っているので公開はしない。デプロイは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/travis&quot;&gt;travis&lt;/a&gt; ciと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/capistrano&quot;&gt;capistrano&lt;/a&gt;を使っている。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/capistrano&quot;&gt;capistrano&lt;/a&gt;初めて使ったわ。自動デプロイ便利だね。&lt;/p&gt;

&lt;h2&gt;仕事を電子化するということ&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;は50年も前からある組織だ。50年前は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3&quot;&gt;スマートフォン&lt;/a&gt;など存在しないので、紙とペンと人力に頼った手続きで仕事が行われていた。その手続きが50年間引き継がれ、未だに人力で仕事が行われている。Japanese Traditional Big Companyも真っ青なアナログさである。スライドで紹介した「シフト組み」という仕事は、まさにこの”アナログな仕事”の一例だ。&lt;/p&gt;

&lt;p&gt;アナログな仕事には良い面もある。原始的なので誰でも理解できるし、「人は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3&quot;&gt;スマートフォン&lt;/a&gt;を持っている」という仮定を置かなくても良い&lt;a href=&quot;#f-e201052f&quot; name=&quot;fn-e201052f&quot; title=&quot;2018年の現在においても、スマートフォンを持たない大学生というのは、ごく少数ながら存在しているのだ!&quot;&gt;*5&lt;/a&gt;。
一方で、こういう仕事のやり方は非効率的で担当者の負担も大きい。人間の労働力に大きく依存するので、人間のやる気がなくなったときに適切に仕事が執り行われなくなる。&lt;/p&gt;

&lt;p&gt;そういう問題意識から今回発表したようなWebアプリケーションを作った。結果として、実際に担当者の仕事が減って喜ばれている。しかし、都合の良い事ばかりではない。というのも、このWebアプリケーションをメンテナンスできるのは現時点で僕しかいないのである。障害が起こったら僕が直すしか無いし、修正や機能追加が必要になったら僕がやるしか無い。今までシフト組み担当者が抱えていたタスクを、代わりに僕が抱えるようになっただけと見ることもできる。&lt;/p&gt;

&lt;p&gt;とはいえこちらの仕事は人力の仕事とは違って、一度労力を払ってしまえば以降は同じ苦労はしなくて済む。長い目で見れば仕事の量は減っていると信じたい。&lt;/p&gt;

&lt;h2&gt;仕事回数が可視化された話&lt;/h2&gt;

&lt;p&gt;また、人間の仕事量が減ったことで、以前ではできなかったことができるようになった。それは、「誰が何回シフトに入ったのか」をシフトを組んだ瞬間にカウントするということである。&lt;/p&gt;

&lt;p&gt;大前提として、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;での仕事は無給である&lt;a href=&quot;#f-707dcec8&quot; name=&quot;fn-707dcec8&quot; title=&quot;これは学生の仕事が無給ということであって、寮で働く大人の人達にはちゃんと給料が払われている。念の為。&quot;&gt;*6&lt;/a&gt;&lt;a href=&quot;#f-c2cea52b&quot; name=&quot;fn-c2cea52b&quot; title=&quot;すべての仕事に給与をつけて、財源として寮費を上げれば良いのではないかという議論も当然存在するが、それは本稿の担当範囲ではない。&quot;&gt;*7&lt;/a&gt;。従って、仕事を平等に負担するということが重要になってくる。&lt;/p&gt;

&lt;p&gt;では、仕事を平等に負担させるにはどうすればよいだろうか？まずは、仕事の偏りを明らかにする必要がある。つまり、「Aさんはもう10回もシフトに入っているが、Bさんはまだ1回しかシフトに入っていない」という情報をひねり出す必要がある&lt;a href=&quot;#f-c6f16cbf&quot; name=&quot;fn-c6f16cbf&quot; title=&quot;ここにはもう一つ、仕事の負担を「回数」でカウントしてよいのかという議論がある。事務室当番１回と食器洗い当番１回は、本当に等価な労働量なのだろうか？&quot;&gt;*8&lt;/a&gt;。
アナログ時代は、年度末にシフトの紙をかき集めて、誰が何回仕事をしたのかを手作業で集計していた。
そして、仕事回数が少ない人間には圧力をかけて、もっと仕事をするように要請していた&lt;a href=&quot;#f-cba8af0e&quot; name=&quot;fn-cba8af0e&quot; title=&quot;このあたりの具体的な話は居住するフロアによってやり方が異なっている。熊野寮は自治寮だが、その中にも「フロア自治」があるのだ。&quot;&gt;*9&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;このやり方には問題がある。年度末にならないと仕事の偏り具合がわからないのである。このため偏りの是正は後手に回ることになる。最悪なケースとしては、仕事を全くせずに2月ぐらいに退寮していく&lt;del&gt;カス&lt;/del&gt;面の皮が厚い人間などもいる。&lt;/p&gt;

&lt;p&gt;電子化したことで仕事回数が即座にカウントされるようになった。これにより、回数が少ない人間に対して先手を打って圧力をかけることが可能になった。では、回数の偏りは実際に是正されたのか？電子化してからまだ半年しか経っていないのでまだなんとも言えないが、現時点ではそれほど大きな偏りは見られない。これに関してはまた別の機会に考察できたらと思う。&lt;/p&gt;

&lt;h2&gt;引き継ぎの問題&lt;/h2&gt;

&lt;p&gt;昨年の &lt;a href=&quot;https://advent.camph.net/&quot;&gt;CAMPHOR- Advent Calendar&lt;/a&gt; にも似たような話を書いた。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdawn.hateblo.jp%2Fentry%2Fwrite-code-kumano-dormitory&quot; title=&quot; 熊野寮でコードを書いて感謝された話 - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/write-code-kumano-dormitory&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;このときはシフト組みではなく、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%B7%A5%A7%A5%A2%A5%EA%A5%F3%A5%B0&quot;&gt;カーシェアリング&lt;/a&gt;サービスを電子化した話を書いたのだが、印象的な&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D6%A5%B3%A5%E1&quot;&gt;ブコメ&lt;/a&gt;があった。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&quot;hatena-bookmark-comment&quot;&gt;&lt;a class=&quot;comment-info&quot; href=&quot;http://b.hatena.ne.jp/entry/350635201/comment/keijak&quot; data-user-id=&quot;keijak&quot; data-entry-url=&quot;http://b.hatena.ne.jp/entry/s/dawn.hateblo.jp/entry/write-code-kumano-dormitory&quot; data-original-href=&quot;https://dawn.hateblo.jp/entry/write-code-kumano-dormitory&quot; data-entry-favicon=&quot;https://cdn-ak2.favicon.st-hatena.com/?url=https%3A%2F%2Fdawn.hateblo.jp%2Fentry%2Fwrite-code-kumano-dormitory&quot; data-user-icon=&quot;/users/keijak/profile.png&quot;&gt;熊野寮でコードを書いて感謝された話 - さんちゃのblog&lt;/a&gt;&lt;br&gt;&lt;p style=&quot;clear: left&quot;&gt;いい話だけど、次のステップとして運用できる人を育てて引き継げるようにしないとずっと一人でメンテする羽目になるので頑張って。&lt;/p&gt;&lt;a class=&quot;datetime&quot; href=&quot;http://b.hatena.ne.jp/keijak/20171202#bookmark-350635201&quot;&gt;&lt;span class=&quot;datetime-body&quot;&gt;2017/12/02 20:30&lt;/span&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;script src=&quot;https://b.st-hatena.com/js/comment-widget.js&quot; charset=&quot;utf-8&quot; async&gt;&lt;/script&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://b.hatena.ne.jp/entry/350635201/comment/keijak&quot;&gt;b.hatena.ne.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;このコメントは正しい。現状、これらのサービスのメンテナンスができるのは自分しかおらず、それなりに大きな負担になっている。さらに、私が大学を卒業したあとにメンテナンスをする人間の目処は未だに立っていない&lt;a href=&quot;#f-99b386cd&quot; name=&quot;fn-99b386cd&quot; title=&quot;もちろんプログラマ無しで完結するように頑張ってはいるが、プログラマなしで完結するようにするのにも工数がかかり...&quot;&gt;*10&lt;/a&gt;&lt;a href=&quot;#f-8f4b66af&quot; name=&quot;fn-8f4b66af&quot; title=&quot;熊野寮ならプログラミング人材が沢山いそうという旨のブコメもあったがそれは幻想である。熊野寮においてはプログラミングができる学生は貴重な存在だ。&quot;&gt;*11&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;しかし、これに関して私が思うのは、「自分がいなくなったあとにそれを維持できないから」という理由で電子化を諦めるのは正しくないということだ&lt;a href=&quot;#f-143ecea8&quot; name=&quot;fn-143ecea8&quot; title=&quot;これは電子化に限った話ではなく、新しい制度や組織の創設にも言えることだ。&quot;&gt;*12&lt;/a&gt;。自分が作ったアプリケーションが真に有用であって、絶対に使い続けたいと寮生が思ったのであれば、外注したりプログラミングを勉強したりすることでメンテナンスを続けることは可能である。そのような手段が取れない場合は、以前のアナログな仕組みにフォールバックすればいいだけだ。アナログな手段は理解しやすく誰にでも実行可能なので、フォールバックするのは簡単だ。&lt;/p&gt;

&lt;p&gt;むしろ、そのような&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BF%B4%CD%FD%C5%AA&quot;&gt;心理的&lt;/a&gt;障壁があることで改善が進まないことこそが問題である。&lt;/p&gt;

&lt;h2&gt;@_6v_ の自動化アプリと連携したい話&lt;/h2&gt;

&lt;p&gt;他のLTと内容が被りそうになったと冒頭に書いた。 シバニャン(&lt;a href=&quot;https://twitter.com/_6v_&quot;&gt;@_6v_&lt;/a&gt;)は私とは異なるアプローチでシフト組みを自動化しようとしている。&lt;/p&gt;

&lt;p&gt;詳しくは&lt;a href=&quot;https://speakerdeck.com/shiba6v/yi-chuan-de-arugorizumudesihutozu-miwozi-dong-hua-sitahua&quot;&gt;そちらのスライド&lt;/a&gt;を参照していただきたいのだが、要約すると、私がシフトを &lt;strong&gt;集める&lt;/strong&gt; というところに焦点を当てているのに対し、シバニャンはシフトを &lt;strong&gt;組む&lt;/strong&gt; というところに焦点を当てている。&lt;/p&gt;

&lt;p&gt;私の作ったアプリケーションでは、シフトを提出させるというところまでは自動化がされているが、誰をどのシフトに割り当てるのかを決めるのは人間である&lt;a href=&quot;#f-15c5e589&quot; name=&quot;fn-15c5e589&quot; title=&quot;とはいえブラウザに表示されたチェックボックスをポチポチするだけなので、そこまで重労働というわけではない。&quot;&gt;*13&lt;/a&gt;。一方でシバニャンは、シフトを集めるところは外部の&lt;i&gt;予定調整サイト&lt;/i&gt;に任せ、その情報を集約してシフトを組むところを自動化している。&lt;/p&gt;

&lt;p&gt;この2つのアプローチは、協調することによってより便利になると私は考えている。シバニャンにはシフト組み&quot;AI&quot;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;を共有してもらっている（感謝！）。これを私のアプリケーションにも組み込むことで、更に作業を減らすことができるはずだ&lt;a href=&quot;#f-06697ce3&quot; name=&quot;fn-06697ce3&quot; title=&quot;もちろん私のWebアプリのソースコードもシバニャンに共有している&quot;&gt;*14&lt;/a&gt;。やる気が出次第取り組みたい。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;BIT VALLEY 2018 AFTER PARTY でLTをした。LTの内容は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;にWebアプリを導入した話である。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;で自動化/電子化を行う際には考えるべきことがいろいろあり、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BF%B4%CD%FD%C5%AA&quot;&gt;心理的&lt;/a&gt;な障壁もある。しかし、最悪なのは仕事の改善をしないということであり、寮生は電子化に限らず仕事の改善を積極的に行ってほしい&lt;a href=&quot;#f-38f31260&quot; name=&quot;fn-38f31260&quot; title=&quot;とはいえこういう話は全部無給なので、一歩間違うと五輪ボランティアと同様の問題を抱えることになる。実際、一部の人間の仕事のしすぎ(させられすぎ)が問題として取り上げられることは多い。&quot;&gt;*15&lt;/a&gt;。また、私の他にも仕事の自動化を試みる寮生はおり、彼ら彼女らと協力してよりよい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;をやっていきたい。&lt;/p&gt;

&lt;h2&gt;追記(2019/03/19)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;引き継いでくれる人材が見つかったので，とりあえず来年もこのWebアプリを運用できそう&lt;/li&gt;
&lt;li&gt;仕事回数の平滑化に関してはある程度達成されたっぽい

&lt;ul&gt;
&lt;li&gt;酷い年はノルマ回数が5回に対して20回仕事入ってる人とかいたんですが，今年は最高でも10回ぐらいに抑えられている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4月の時点で寮に在籍してなかった人(研究で東京に行ってた人とか)のユーザー登録に漏れがあって，そもそもシフト登録メールが届いてなかったということがあった

&lt;ul&gt;
&lt;li&gt;おそらくこれは導入初年度だけ起こる問題で，来年度以降は起こらないと思う&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Related articles&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdawn.hateblo.jp%2Fentry%2Fwrite-code-kumano-dormitory&quot; title=&quot; 熊野寮でコードを書いて感謝された話 - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/write-code-kumano-dormitory&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-05d542b3&quot; name=&quot;f-05d542b3&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;被せたわけではなく、被りそうになったことがわかったのは当日だった&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-37b45857&quot; name=&quot;f-37b45857&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;こいついっつもレールズ書いてんな&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-f6868b3f&quot; name=&quot;f-f6868b3f&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;別に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/GMO&quot;&gt;GMO&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A5%DE&quot;&gt;ステマ&lt;/a&gt;というわけではない。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-56a331f5&quot; name=&quot;f-56a331f5&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;オタクなのでかわいい女の子の絵があると使いたくなってしまう。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-e201052f&quot; name=&quot;f-e201052f&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;2018年の現在においても、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A1%BC%A5%C8%A5%D5%A5%A9%A5%F3&quot;&gt;スマートフォン&lt;/a&gt;を持たない大学生というのは、ごく少数ながら存在しているのだ!&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-707dcec8&quot; name=&quot;f-707dcec8&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;これは学生の仕事が無給ということであって、寮で働く大人の人達にはちゃんと給料が払われている。念の為。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-c2cea52b&quot; name=&quot;f-c2cea52b&quot; class=&quot;footnote-number&quot;&gt;*7&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;すべての仕事に給与をつけて、財源として寮費を上げれば良いのではないかという議論も当然存在するが、それは本稿の担当範囲ではない。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-c6f16cbf&quot; name=&quot;f-c6f16cbf&quot; class=&quot;footnote-number&quot;&gt;*8&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;ここにはもう一つ、仕事の負担を「回数」でカウントしてよいのかという議論がある。事務室当番１回と食器洗い当番１回は、本当に等価な労働量なのだろうか？&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-cba8af0e&quot; name=&quot;f-cba8af0e&quot; class=&quot;footnote-number&quot;&gt;*9&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;このあたりの具体的な話は居住するフロアによってやり方が異なっている。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%AB%BC%A3&quot;&gt;自治&lt;/a&gt;寮だが、その中にも「フロア&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%AB%BC%A3&quot;&gt;自治&lt;/a&gt;」があるのだ。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-99b386cd&quot; name=&quot;f-99b386cd&quot; class=&quot;footnote-number&quot;&gt;*10&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;もちろん&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE&quot;&gt;プログラマ&lt;/a&gt;無しで完結するように頑張ってはいるが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE&quot;&gt;プログラマ&lt;/a&gt;なしで完結するようにするのにも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B9%A9%BF%F4&quot;&gt;工数&lt;/a&gt;がかかり...&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-8f4b66af&quot; name=&quot;f-8f4b66af&quot; class=&quot;footnote-number&quot;&gt;*11&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;ならプログラミング人材が沢山いそうという旨の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D6%A5%B3%A5%E1&quot;&gt;ブコメ&lt;/a&gt;もあったがそれは幻想である。&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;においてはプログラミングができる学生は貴重な存在だ。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-143ecea8&quot; name=&quot;f-143ecea8&quot; class=&quot;footnote-number&quot;&gt;*12&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;これは電子化に限った話ではなく、新しい制度や組織の創設にも言えることだ。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-15c5e589&quot; name=&quot;f-15c5e589&quot; class=&quot;footnote-number&quot;&gt;*13&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;とはいえブラウザに表示された&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%C1%A5%A7%A5%C3%A5%AF%A5%DC%A5%C3%A5%AF%A5%B9&quot;&gt;チェックボックス&lt;/a&gt;をポチポチするだけなので、そこまで重労働というわけではない。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-06697ce3&quot; name=&quot;f-06697ce3&quot; class=&quot;footnote-number&quot;&gt;*14&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;もちろん私のWebアプリの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9&quot;&gt;ソースコード&lt;/a&gt;もシバニャンに共有している&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-38f31260&quot; name=&quot;f-38f31260&quot; class=&quot;footnote-number&quot;&gt;*15&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;とはいえこういう話は全部無給なので、一歩間違うと五輪ボランティアと同様の問題を抱えることになる。実際、一部の人間の仕事のしすぎ(させられすぎ)が問題として取り上げられることは多い。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="Rails" label="Rails" />
        
        <category term="Ruby" label="Ruby" />
        
        <category term="熊野寮" label="熊野寮" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190331/20190331113653.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>MySQLの中身を時系列プロットするワンライナー</title>
        <link href="https://dawn.hateblo.jp/entry/2018/09/07/223959"/>
        <id>hatenablog://entry/10257846132623362794</id>
        <published>2018-09-07T22:39:59+09:00</published>
        <updated>2018-12-15T00:56:08+09:00</updated>        <summary type="html">MySQLに入ってるデータの傾向をグラフで見たい、しかしgrafanaとかkibanaとかは導入したくないし、グラフを描画するプログラムを書くなんて論外という事があると思います。

そういうときにおすすめなのがこのワンライナー！必要なのはmysqlクライアントとgnuplotだけ！</summary>
        <content type="html">&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;に入ってるデータの傾向をグラフで見たい、しかしgrafanaとかkibanaとかは導入したくないし、グラフを描画するプログラムを書くなんて論外という事があると思います。&lt;/p&gt;

&lt;p&gt;そういうときにおすすめなのがこの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EF%A5%F3%A5%E9%A5%A4%A5%CA%A1%BC&quot;&gt;ワンライナー&lt;/a&gt;！必要なのは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/mysql&quot;&gt;mysql&lt;/a&gt;クライアントと&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gnuplot&quot;&gt;gnuplot&lt;/a&gt;だけ！&lt;/p&gt;

&lt;p&gt;はい。&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;$ mysql dbname -u root --password=passwd -e &amp;#34;SELECT timestamp, value FROM tbl WHERE some=condition&amp;#34; | gnuplot -e &amp;#39;set terminal dumb 150 30; set xdata time; set timefmt &amp;#34;%s&amp;#34;; plot &amp;#34;&amp;lt;cat&amp;#34; using 1:2 with line;&amp;#39;&lt;/pre&gt;


&lt;p&gt;&lt;a href=&quot;https://gist.github.com/5e6cb1eb0b6d56bf5642471d18e0ad2f&quot;&gt;gist5e6cb1eb0b6d56bf5642471d18e0ad2f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180907/20180907215322.png&quot; alt=&quot;f:id:threetea0407:20180907215322p:plain&quot; title=&quot;f:id:threetea0407:20180907215322p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;まず、&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;gnuplot -e &amp;#39;set terminal dumb 150 30; set xdata time; set timefmt &amp;#34;%s&amp;#34;; plot &amp;#34;&amp;lt;cat&amp;#34; using 1:2 with line;&amp;#39;&lt;/pre&gt;


&lt;p&gt;について解説します。&lt;/p&gt;

&lt;h3&gt;set terminal dump&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gnuplot&quot;&gt;gnuplot&lt;/a&gt;で &lt;code&gt;set terminal dumb&lt;/code&gt; とすると、プロットの結果をターミナルに&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A5%A2%A1%BC%A5%C8&quot;&gt;アスキーアート&lt;/a&gt;で出力することができます。&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;set terminal dump width height&lt;/code&gt; のようにwidthとheightを指定すると、プロットの大きさを指定することができます。&lt;/p&gt;

&lt;h3&gt;set xdata time&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gnuplot&quot;&gt;gnuplot&lt;/a&gt;で &lt;code&gt;set xdata time&lt;/code&gt; とすると、X軸を時系列データとして解釈してくれるようになります。&lt;/p&gt;

&lt;h3&gt;set timefmt &quot;%s&quot;;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;set timefmt &quot;%s&quot;&lt;/code&gt; は、時系列データのフォーマットを規定しています。&lt;code&gt;%s&lt;/code&gt; は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/UNIX&quot;&gt;UNIX&lt;/a&gt;時間に対応しています。&lt;/p&gt;

&lt;p&gt;もし時系列データが他のフォーマットで渡ってくる場合は、 &lt;code&gt;%Y-%m-%dT%H:%M:%S&lt;/code&gt; のように適当に変えてやる必要があります。&lt;/p&gt;

&lt;h3&gt;plot &quot;&amp;lt;cat&quot; using 1:2 with line&lt;/h3&gt;

&lt;p&gt;通常&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gnuplot&quot;&gt;gnuplot&lt;/a&gt;の &lt;code&gt;plot&lt;/code&gt; コマンドの第一引数には、プロットするデータが入ったファイルの名前を指定します。ここに &lt;code&gt;&quot;&amp;lt;cat&quot;&lt;/code&gt; を指定することで、標準入力の内容をプロットするデータとして解釈するようになります。&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;からデータを渡してやる&lt;/h3&gt;

&lt;p&gt;あとは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;からデータを取ってきてTSVにして、これを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/gnuplot&quot;&gt;gnuplot&lt;/a&gt;の標準入力に食わせてやればグラフが描けます。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/MySQL&quot;&gt;MySQL&lt;/a&gt;からデータを取ってきてTSVにして標準出力に出す&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EF%A5%F3%A5%E9%A5%A4%A5%CA%A1%BC&quot;&gt;ワンライナー&lt;/a&gt;です:&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;mysql dbname -u root --password=passwd -e &amp;#34;SELECT timestamp, value FROM tbl WHERE condition=hoge &amp;#34;&lt;/pre&gt;


&lt;p&gt;1列目に時系列データ、2列目にプロットする値を持ってくるのが重要です。&lt;/p&gt;

&lt;h2&gt;制約&lt;/h2&gt;

&lt;p&gt;この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EF%A5%F3%A5%E9%A5%A4%A5%CA%A1%BC&quot;&gt;ワンライナー&lt;/a&gt;は2つ以上の列を1つのグラフにプロットできません。例えば、CPU使用率とメモリ使用率を1つのグラフにプロットするというようなことができません。&lt;/p&gt;

&lt;p&gt;そういう複雑なグラフが見たくなったらgrafanaなどを使うべきということですね。導入がちょっと面倒ですが...&lt;/p&gt;
</content>        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180907/20180907215322.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>トップレベルスタイルSinatraの起動プロセス</title>
        <link href="https://dawn.hateblo.jp/entry/2018/05/07/195026"/>
        <id>hatenablog://entry/17391345971642073068</id>
        <published>2018-05-07T19:50:26+09:00</published>
        <updated>2019-03-31T20:09:37+09:00</updated>        <summary type="html">Sinatraのトップレベルスタイルで書かれたWebサーバーが，どのように起動するのかを解説します．</summary>
        <content type="html">&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sinatra&quot;&gt;Sinatra&lt;/a&gt;のトッ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9&quot;&gt;プレベ&lt;/a&gt;ルスタイルで書かれたWebサーバーが，どのように起動するのかを解説します．&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;トッ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9&quot;&gt;プレベ&lt;/a&gt;ルスタイル&lt;/strong&gt; とは、以下のような書き方のことを指します：&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hogehoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;このスタイルで書かれた&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sinatra&quot;&gt;Sinatra&lt;/a&gt;のWebサーバーには，サーバーを起動するような記述が一切ありません．どのようにWebサーバーが起動しているのでしょうか？&lt;/p&gt;

&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;以下のようなトッ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9&quot;&gt;プレベ&lt;/a&gt;ルスタイルの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sinatra&quot;&gt;Sinatra&lt;/a&gt;アプリケーションは、&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;以下のようなコードと概ね等価ということです：&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 空のモジュラーアプリの定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra/base&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Sinatra&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DSLの定義&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;:get&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:put&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:delete&lt;/span&gt;].each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;method_name&lt;/span&gt;|
  define_method method_name &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |*&lt;span class=&quot;synIdentifier&quot;&gt;args&lt;/span&gt;, &amp;amp;&lt;span class=&quot;synIdentifier&quot;&gt;blk&lt;/span&gt;|
    &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;.send(method_name, *args, &amp;amp;blk)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Webサーバー起動処理の登録&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;at_exit&lt;/span&gt; { &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;.run! }

&lt;span class=&quot;synComment&quot;&gt;# アプリケーションの定義&lt;/span&gt;
get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;h2&gt;解説&lt;/h2&gt;

&lt;h3&gt;モジュラースタイル&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sinatra&quot;&gt;Sinatra&lt;/a&gt;では、上記のようなトッ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9&quot;&gt;プレベ&lt;/a&gt;ルスタイルを用いる以外にも、 &lt;strong&gt;モジュラースタイル&lt;/strong&gt; を用いる方法があります。&lt;/p&gt;

&lt;p&gt;モジュラースタイルというのは、以下のような書き方を指します：&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra/base&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;MySinatraApplication&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Sinatra&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
  get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/hello&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hogehoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;MySinatraApplication&lt;/span&gt;.run!
&lt;/pre&gt;


&lt;p&gt;この用に定義されたWebアプリケーションのことを &lt;strong&gt;モジュラーアプリ&lt;/strong&gt; と呼びます。&lt;/p&gt;

&lt;h3&gt;空のモジュラーアプリの定義&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;require &#39;sinatra&#39;&lt;/code&gt; と書くと、 &lt;code&gt;Sinatra::Application&lt;/code&gt; という名前の空のモジュラーアプリが定義されます。&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;の定義&lt;/h3&gt;

&lt;p&gt;また、&lt;code&gt;require &#39;sinatra&#39;&lt;/code&gt; が実行されることで、 &lt;code&gt;Sinatra::Delegator&lt;/code&gt; というモジュールがグローバルに &lt;code&gt;extend&lt;/code&gt; され、&lt;code&gt;get&lt;/code&gt; とか &lt;code&gt;post&lt;/code&gt; などの、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sinatra&quot;&gt;Sinatra&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/DSL&quot;&gt;DSL&lt;/a&gt;で使われるメソッドが定義されます。&lt;/p&gt;

&lt;p&gt;これらのメソッドは &lt;code&gt;Sinatra::Application.get&lt;/code&gt; や &lt;code&gt;Sinatra::Application.post&lt;/code&gt; に”リダイレクト”されます。&lt;/p&gt;

&lt;p&gt;つまり、以下のコードは、&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;以下のコードと等価です：&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synType&quot;&gt;Sinatra&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;.get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;詳しい実装が気になる人は &lt;a href=&quot;https://github.com/sinatra/sinatra/blob/master/lib/sinatra/base.rb#L1921&quot;&gt;sinatra/base.rb at master &amp;middot; sinatra/sinatra &amp;middot; GitHub&lt;/a&gt; を読んで下さい。
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0&quot;&gt;メタプログラミング&lt;/a&gt;のお手本のような使い方だと思います。&lt;/p&gt;

&lt;h3&gt;サーバーの起動&lt;/h3&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby&quot;&gt;Ruby&lt;/a&gt;には &lt;code&gt;Kernel.#at_exit&lt;/code&gt; というメソッドがあります。
このメソッドにブロックを与えると、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A5%D7%A5%EA%A5%BF&quot;&gt;インタプリタ&lt;/a&gt;終了時にそのブロックが実行されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Application::Sinatra&lt;/code&gt; の定義の中で &lt;code&gt;at_exit&lt;/code&gt; が呼び出されている部分があり、Webサーバーの起動処理が登録されています。&lt;/p&gt;

&lt;p&gt;これによって、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8&quot;&gt;スクリプト&lt;/a&gt;の実行終了時にWebサーバーが起動します。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;つまり、以下のようなトッ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%EC%A5%D9&quot;&gt;プレベ&lt;/a&gt;ルスタイルの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sinatra&quot;&gt;Sinatra&lt;/a&gt;アプリケーションは、&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;以下のようなコードと概ね等価ということです：&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# 空のモジュラーアプリの定義&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra/base&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt; &amp;lt; &lt;span class=&quot;synType&quot;&gt;Sinatra&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# DSLの定義&lt;/span&gt;
[&lt;span class=&quot;synConstant&quot;&gt;:get&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:post&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:put&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;:delete&lt;/span&gt;].each &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |&lt;span class=&quot;synIdentifier&quot;&gt;method_name&lt;/span&gt;|
  define_method method_name &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt; |*&lt;span class=&quot;synIdentifier&quot;&gt;args&lt;/span&gt;, &amp;amp;&lt;span class=&quot;synIdentifier&quot;&gt;blk&lt;/span&gt;|
    &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;.send(method_name, *args, &amp;amp;blk)
  &lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;synComment&quot;&gt;# Webサーバー起動処理の登録&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;at_exit&lt;/span&gt; { &lt;span class=&quot;synType&quot;&gt;Application&lt;/span&gt;.run! }

&lt;span class=&quot;synComment&quot;&gt;# アプリケーションの定義&lt;/span&gt;
get &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;

</content>        
        <category term="Ruby" label="Ruby" />
        
        <category term="Sinatra" label="Sinatra" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190331/20190331200659.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>SinatraでaタグからPUTリクエストを投げる</title>
        <link href="https://dawn.hateblo.jp/entry/2018/03/22/011129"/>
        <id>hatenablog://entry/17391345971628086015</id>
        <published>2018-03-22T01:11:29+09:00</published>
        <updated>2019-03-31T20:14:10+09:00</updated>        <summary type="html">Ruby on Railsで記述したWebアプリケーションでは，ERBファイルに&lt;%= link_to &#39;/hogehoge&#39;, method: :put %&gt;などと記述することにより，aタグがクリックされたときにPUTリクエストを投げることができます．POST，DELETEに関しても同様の記述でリクエストを投げることができます． 本記事では，Sinatraで記述したWebアプリケーションについても同様に，aタグがクリックされたときに任意のHTTPメソッドでリクエストを投げる方法を解説します．</summary>
        <content type="html">&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails&quot;&gt;Ruby on Rails&lt;/a&gt;で記述したWebアプリケーションでは，ERBファイルに&lt;code&gt;&amp;lt;%= link_to &#39;/hogehoge&#39;, method: :put %&amp;gt;&lt;/code&gt;などと記述することにより，aタグがクリックされたときにPUTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げることができます．POST，DELETEに関しても同様の記述でリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げることができます．&lt;/p&gt;

&lt;p&gt;本記事では，&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Sinatra&quot;&gt;Sinatra&lt;/a&gt;で記述したWebアプリケーションについても同様に，aタグがクリックされたときに任意のHTTPメソッドでリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げる方法を解説します．&lt;/p&gt;

&lt;h2&gt;やりかた&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;app.rb&lt;/code&gt; を↓のように書き、&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;
&lt;span class=&quot;synPreProc&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;sinatra&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;

&lt;span class=&quot;synPreProc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;Rack&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;MethodOverride&lt;/span&gt;
  &lt;span class=&quot;synType&quot;&gt;ALLOWED_METHODS&lt;/span&gt;=&lt;span class=&quot;synSpecial&quot;&gt;%w[&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;POST GET&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;synPreProc&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;method_override&lt;/span&gt;(env)
    req = &lt;span class=&quot;synType&quot;&gt;Rack&lt;/span&gt;::&lt;span class=&quot;synType&quot;&gt;Request&lt;/span&gt;.new(env)
    method = req.params[&lt;span class=&quot;synType&quot;&gt;METHOD_OVERRIDE_PARAM_KEY&lt;/span&gt;] || env[&lt;span class=&quot;synType&quot;&gt;HTTP_METHOD_OVERRIDE_HEADER&lt;/span&gt;]
    method.to_s.upcase
  &lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;synPreProc&quot;&gt;end&lt;/span&gt;

enable &lt;span class=&quot;synConstant&quot;&gt;:method_override&lt;/span&gt;

put &lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;/hoge&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;synComment&quot;&gt;# do awesome things&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;htmlの方で↓のように &lt;code&gt;a&lt;/code&gt; タグを書きます。&lt;/p&gt;

&lt;pre class=&quot;code lang-html&quot; data-lang=&quot;html&quot; data-unlink&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; &lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;synConstant&quot;&gt;&#39;/hoge?_method=PUT&amp;amp;hoge=fuga&#39;&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;synUnderlined&quot;&gt;PUTを投げる&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;このリンクをクリックすると、&lt;code&gt;hoge=fuga&lt;/code&gt;という内容のPUTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トが飛びます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 注意 &lt;/strong&gt; ：クローラがやってくるとPOST/PUT/DELETEリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トが飛びまくります。クローラがやってくるWebアプリケーションでこれをやるのは絶対にやめたほうが良いでしょう。&lt;/p&gt;

&lt;h2&gt;解説&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;enable :method_override&lt;/code&gt; によってRack::MethodOverride&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%DF%A5%C9%A5%EB%A5%A6%A5%A7%A5%A2&quot;&gt;ミドルウェア&lt;/a&gt;を有効にし、その挙動を変えています。&lt;/p&gt;

&lt;p&gt;以下でこれを説明します。&lt;/p&gt;

&lt;h3&gt;Rack::MethodOverride とはなにか&lt;/h3&gt;

&lt;p&gt;Rack::MethodOverrideとは、 リク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トに含まれる &lt;code&gt;_method&lt;/code&gt;というパラメータを読み取って、HTTPのmethodを書き換えてくれるRack middlewareです。
例えば &lt;code&gt;_method=PUT&lt;/code&gt; という値をリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トに入れると、PUTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トとして処理されるわけです。&lt;/p&gt;

&lt;p&gt;しかし、Rack::MethodOverrideが「method書き換え」をしてくれるのは、元々のmethodが &lt;strong&gt;POSTの場合だけ&lt;/strong&gt; です。
従って、GETリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トで&lt;code&gt;_method&lt;/code&gt;パラメータを指定してもmethod書き換えは起こりません。&lt;/p&gt;

&lt;p&gt;また、 &lt;code&gt;_method&lt;/code&gt; という値はPOSTパラメータに入っている必要があります。
このため、Query Stringに &lt;code&gt;_method=PUT&lt;/code&gt; と書いてリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げてもPUTリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トにならないというわけです。&lt;/p&gt;

&lt;h3&gt;Rack::MethodOverride の挙動を変更する&lt;/h3&gt;

&lt;p&gt;では、目的であるところの「 &lt;code&gt;a&lt;/code&gt; タグがクリックされたときに POST/PUT/DELETE のリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トを投げる」を実現するためには、 Rack::MethodOverrideの挙動をどのように変更すれば良いでしょうか。&lt;/p&gt;

&lt;p&gt;これは簡単で、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GETリク&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9&quot;&gt;エス&lt;/a&gt;トについても「method書き換え」をするようにする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_method&lt;/code&gt; パラメータをQuery Stringからも読み取るようにする&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;の2点について変更すれば良いわけです。&lt;/p&gt;

&lt;p&gt;前者に関しては、&lt;code&gt;Rack::MethodOverride::ALLOWED_METHODS&lt;/code&gt; の値を &lt;code&gt;%w[POST]&lt;/code&gt; から &lt;code&gt;%w[POST GET]&lt;/code&gt; に変更してやれば良いです。&lt;/p&gt;

&lt;p&gt;また、後者に関しては、&lt;code&gt;Rack::MethodOverride#method_override&lt;/code&gt; をオーバーライドして、↓のように&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;req.params&lt;/code&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; から &lt;code&gt;_method&lt;/code&gt; パラメータを取得するようにすれば良いです。&lt;/p&gt;

&lt;pre class=&quot;code lang-ruby&quot; data-lang=&quot;ruby&quot; data-unlink&gt;&lt;span class=&quot;synComment&quot;&gt;# before&lt;/span&gt;
method = req.POST[&lt;span class=&quot;synType&quot;&gt;METHOD_OVERRIDE_PARAM_KEY&lt;/span&gt;] || env[&lt;span class=&quot;synType&quot;&gt;HTTP_METHOD_OVERRIDE_HEADER&lt;/span&gt;]

&lt;span class=&quot;synComment&quot;&gt;# afrer&lt;/span&gt;
method = req.params[&lt;span class=&quot;synType&quot;&gt;METHOD_OVERRIDE_PARAM_KEY&lt;/span&gt;] || env[&lt;span class=&quot;synType&quot;&gt;HTTP_METHOD_OVERRIDE_HEADER&lt;/span&gt;]
&lt;/pre&gt;


&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/rightgo09_ruby/20130830/p1&quot;&gt;Rack::MethodOverride&amp;#x3092;&amp;#x5C11;&amp;#x3057;&amp;#x3044;&amp;#x3058;&amp;#x3063;&amp;#x305F;&amp;#x8A71; - &amp;#x3010;&amp;#x65E7;&amp;#x3011;Perler&amp;#x306E;Ruby&amp;#x65E5;&amp;#x8A18;-&amp;gt;&amp;#x306F;&amp;#x3066;&amp;#x306A;&amp;#x30D6;&amp;#x30ED;&amp;#x30B0;&amp;#x306B;&amp;#x79FB;&amp;#x884C;&amp;#x3057;&amp;#x307E;&amp;#x3057;&amp;#x305F;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rubydoc.info/gems/rack/Rack/MethodOverride&quot;&gt;Class: Rack::MethodOverride &amp;mdash; Documentation for rack (2.0.6)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B07BDPS9VJ/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/51njUObfppL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;はじめてのRuby Sinatra入門: 軽量RubyフレームワークSinatraとPaizaCloudを使って10分でWebサービスを作る&quot; title=&quot;はじめてのRuby Sinatra入門: 軽量RubyフレームワークSinatraとPaizaCloudを使って10分でWebサービスを作る&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/B07BDPS9VJ/genya040704-22 /&quot;&gt;はじめてのRuby Sinatra入門: 軽量RubyフレームワークSinatraとPaizaCloudを使って10分でWebサービスを作る&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; 吉岡恒夫&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2018/03/11&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Kindle&quot;&gt;Kindle&lt;/a&gt;版&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/B07BDPS9VJ/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873117437/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/5102wwx0VzL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;メタプログラミングRuby 第2版&quot; title=&quot;メタプログラミングRuby 第2版&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873117437/genya040704-22 /&quot;&gt;メタプログラミングRuby 第2版&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; Paolo Perrotta,&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%D1%C0%AC%C5%B5&quot;&gt;角征典&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3&quot;&gt;オライリージャパン&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2015/10/10&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 大型本&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873117437/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (3件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;実際のコードはエラー処理が入っており、もう少し複雑である(&lt;a href=&quot;https://github.com/rack/rack/blob/bfd4c155a9ba2fb1fcee8daab433fbdef582cce2/lib/rack/method_override.rb#L27&quot;&gt;https://github.com/rack/rack/blob/bfd4c155a9ba2fb1fcee8daab433fbdef582cce2/lib/rack/method_override.rb#L27&lt;/a&gt;)&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;&lt;code&gt;req.params&lt;/code&gt; はQuery Stringのパラメータとrequest bodyのパラメータが合成されたもの&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</content>        
        <category term="Ruby" label="Ruby" />
        
        <category term="Sinatra" label="Sinatra" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190331/20190331200659.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>職人じゃないけどAAがしたい！</title>
        <link href="https://dawn.hateblo.jp/entry/2018/02/03/200552"/>
        <id>hatenablog://entry/8599973812343437627</id>
        <published>2018-02-03T20:05:52+09:00</published>
        <updated>2019-03-31T19:57:27+09:00</updated>        <summary type="html">作ったもの： https://image2aa.herokuapp.com/ AA(アスキーアート)とは AA(アスキーアート)というのは、上の画像のように文字で書かれた絵のことです。一般には「AA職人」が職人芸で作ります。 元々は画像が貼れない2chで絵を表現するための手段だったと思われますが、近年はフォントの違いによって絵が崩れるのを防ぐためにAAの画像を貼るまとめブログなどもあるようです。 アスキーアートを自動で生成したい！ AA作成には特殊な技術が必要なので、一般人はAAを作れません。 僕だって好きなキャラクターのAAを作りたいのに... AAを画像から生成できればいいのに... それ…</summary>
        <content type="html">&lt;p&gt;作ったもの：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://image2aa.herokuapp.com/&quot;&gt;https://image2aa.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;AA(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A5%A2%A1%BC%A5%C8&quot;&gt;アスキーアート&lt;/a&gt;)とは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://kaomojich.com/wp-content/uploads/yaruo/yaruo_03.gif&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://kaomojich.com/wp-content/uploads/yaruo/yaruo_03.gif&quot; class=&quot;http-image&quot; alt=&quot;http://kaomojich.com/wp-content/uploads/yaruo/yaruo_03.gif&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AA(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A5%A2%A1%BC%A5%C8&quot;&gt;アスキーアート&lt;/a&gt;)というのは、上の画像のように文字で書かれた絵のことです。一般には「AA職人」が職人芸で作ります。&lt;/p&gt;

&lt;p&gt;元々は画像が貼れない&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/2ch&quot;&gt;2ch&lt;/a&gt;で絵を表現するための手段だったと思われますが、近年はフォントの違いによって絵が崩れるのを防ぐために&lt;b&gt;AAの画像&lt;/b&gt;を貼るまとめブログなどもあるようです。&lt;/p&gt;

&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A5%A2%A1%BC%A5%C8&quot;&gt;アスキーアート&lt;/a&gt;を自動で生成したい！&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180203/20180203174748.png&quot; alt=&quot;f:id:threetea0407:20180203174748p:plain:w400&quot; title=&quot;f:id:threetea0407:20180203174748p:plain:w400&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:400px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AA作成には特殊な技術が必要なので、一般人はAAを作れません。&lt;/p&gt;

&lt;p&gt;僕だって好きなキャ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF&quot;&gt;ラク&lt;/a&gt;ターのAAを作りたいのに...&lt;/p&gt;

&lt;p&gt;AAを&lt;b&gt;画像から生成&lt;/b&gt;できればいいのに...&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 200%&quot;&gt;それRustでできるよ&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;画像からAAを自動生成するWebアプリ&lt;/h2&gt;

&lt;h3&gt;デモ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://image2aa.herokuapp.com/&quot;&gt;画像からAAを自動生成するWebアプリ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180203/20180203194043.gif&quot; alt=&quot;f:id:threetea0407:20180203194043g:plain&quot; title=&quot;f:id:threetea0407:20180203194043g:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;この&lt;a href=&quot;https://image2aa.herokuapp.com/&quot;&gt;Webアプリ&lt;/a&gt;は&lt;a href=&quot;https://www.rust-lang.org/ja-JP/&quot;&gt;Rust言語&lt;/a&gt;で作成されています💪&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/genya0407/image2aa-web&quot;&gt;GitHub - genya0407/image2aa-web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/genya0407/image2aa&quot;&gt;GitHub - genya0407/image2aa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;どうやって実現しているのか&lt;/h2&gt;

&lt;p&gt;以下の3段階の処理を行ないます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;線画を抽出する&lt;/li&gt;
&lt;li&gt;画像を分割する&lt;/li&gt;
&lt;li&gt;部分画像ごとに文字を割り当てる&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;1. 線画を抽出する&lt;/h3&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180203/20180203180347.png&quot; alt=&quot;f:id:threetea0407:20180203180347p:plain&quot; title=&quot;f:id:threetea0407:20180203180347p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;まずは線画を抽出します。&lt;/p&gt;

&lt;p&gt;線画を抽出するには、以下の2段階の処理を行います。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ソーベルフィルタをかける&lt;/li&gt;
&lt;li&gt;2値化する&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;ソーベルフィルタ&lt;/h4&gt;

&lt;p&gt;↓こういう畳込みフィルタを掛けます。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180203/20180203180738.png&quot; alt=&quot;f:id:threetea0407:20180203180738p:plain:w200&quot; title=&quot;f:id:threetea0407:20180203180738p:plain:w200&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:200px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-size: 80%&quot;&gt;
  &lt;a href=&quot;http://ipr20.cs.ehime-u.ac.jp/column/gazo_syori/chapter5.html&quot;&gt;http://ipr20.cs.ehime-u.ac.jp/column/gazo_syori/chapter5.html&lt;/a&gt; より引用
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;これをすると「周囲との差が大きい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;」は値が大きくなり、「周囲との差が小さい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;」は値が小さくなります。&lt;/p&gt;

&lt;h4&gt;2値化&lt;/h4&gt;

&lt;p&gt;画像において「線」は「周囲との差が大きい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;」の集合です。
なので、ソーベルフィルタの結果に対して「ある値より大きい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;は白色、ある値より小さい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;は黒色」というように2値化すると、線画が生成されます。&lt;/p&gt;

&lt;h2&gt;2. 画像を分割する&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180203/20180203183433.png&quot; alt=&quot;f:id:threetea0407:20180203183433p:plain&quot; title=&quot;f:id:threetea0407:20180203183433p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;図のように、線画を適当な大きさのブロックに分割します。&lt;/p&gt;

&lt;h3&gt;3. 文字を割り当てる&lt;/h3&gt;

&lt;p&gt;各ブロックに似た文字を割り当てることで、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A5%A2%A1%BC%A5%C8&quot;&gt;アスキーアート&lt;/a&gt;を得ることができます。
上図の例では「縦棒の画像」を「｜」に割り当てています。&lt;/p&gt;

&lt;p&gt;ここで問題になるのは&lt;b&gt;各ブロックに似た文字とはなんぞや？&lt;/b&gt;ということです。&lt;/p&gt;

&lt;h4&gt;「似ている」とはどういうことか&lt;/h4&gt;

&lt;p&gt;画像と文字が「似ている」とはどういうことでしょうか？&lt;/p&gt;

&lt;p&gt;いろいろな方法で「似ている度合い」を計算することはできるでしょうが、ここでは「直線の傾き」に着目します。
つまり、「画像の直線の傾き」と「文字の直線の傾き」を比較して、それらが近い時に「画像と文字が似ている」とします。&lt;/p&gt;

&lt;p&gt;上の画像の例だと、「縦棒の直線の傾き」と「｜の傾き」が近いため、「｜」を割り当てるということです。&lt;/p&gt;

&lt;h4&gt;直線の傾きをどう求めるのか？&lt;/h4&gt;

&lt;p&gt;では、直線の傾きはどのように求めればよいのでしょうか？&lt;/p&gt;

&lt;p&gt;これについてもいろいろな手法があるでしょうが、ここでは&lt;b&gt;ハフ変換&lt;/b&gt;というのを使います。
ハフ変換を使うと、画像内に含まれる直線の傾きと、その直線の原点からの距離を求めることができます。&lt;/p&gt;

&lt;p&gt;あとは、画像の直線の傾きと文字の直線の傾きを比較して、近いものを割り当てれば&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A5%A2%A1%BC%A5%C8&quot;&gt;アスキーアート&lt;/a&gt;が得られます。&lt;/p&gt;

&lt;h2&gt;完成 🙌&lt;/h2&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20180203/20180203185136.png&quot; alt=&quot;f:id:threetea0407:20180203185136p:plain&quot; title=&quot;f:id:threetea0407:20180203185136p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;このように、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;線画を抽出する&lt;/li&gt;
&lt;li&gt;画像を分割する&lt;/li&gt;
&lt;li&gt;部分画像ごとに文字を割り当てる&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;の3段階の処理を行なうことで、画像から&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%B9%A5%AD%A1%BC%A5%A2%A1%BC%A5%C8&quot;&gt;アスキーアート&lt;/a&gt;を生成することができます。&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/1491927283/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/51cdXICI6nL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;Programming Rust: Fast, Safe Systems Development&quot; title=&quot;Programming Rust: Fast, Safe Systems Development&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/1491927283/genya040704-22 /&quot;&gt;Programming Rust: Fast, Safe Systems Development&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; Jim Blandy,Jason Orendorff&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; O&#39;Reilly Media&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2017/12/21&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; ペーパーバック&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/1491927283/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873118379/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/51PnbcCkunL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;詳解 OpenCV 3 ―コンピュータビジョンライブラリを使った画像処理・認識&quot; title=&quot;詳解 OpenCV 3 ―コンピュータビジョンライブラリを使った画像処理・認識&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873118379/genya040704-22 /&quot;&gt;詳解 OpenCV 3 ―コンピュータビジョンライブラリを使った画像処理・認識&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; Gary Bradski,Adrian Kaehler,松田晃一,小沼千絵,永田雅人,花形理&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3&quot;&gt;オライリージャパン&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2018/05/26&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 単行本（ソフトカバー）&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873118379/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</content>        
        <category term="Rust" label="Rust" />
        
        <category term="画像処理" label="画像処理" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190331/20190331195706.gif" type="image/gif" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>「熊野寮生だけど質問ある？」</title>
        <link href="https://dawn.hateblo.jp/entry/qfkd"/>
        <id>hatenablog://entry/8599973812324300253</id>
        <published>2017-12-07T00:00:00+09:00</published>
        <updated>2019-03-19T16:49:39+09:00</updated>        <summary type="html">CAMPHOR- Advent Calendar 2017 の 7日目 の記事です。 CAMPHOR-運営メンバーの @genya0407 です。 熊野寮ネタばかりで恐縮ですが、「熊野寮生だけど質問ある？」というWebサービスを作った話をします。</summary>
        <content type="html">&lt;p&gt;&lt;a href=&quot;https://advent.camph.net/&quot;&gt;CAMPHOR- Advent Calendar 2017&lt;/a&gt; の 7日目 の記事です。&lt;/p&gt;

&lt;p&gt;CAMPHOR-運営メンバーの &lt;a href=&quot;https://twitter.com/?lang=ja&quot;&gt;@genya0407&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;ネタばかりで恐縮ですが、「&lt;a href=&quot;https://qfk.herokuapp.com/&quot;&gt;&amp;#x718A;&amp;#x91CE;&amp;#x5BEE;&amp;#x751F;&amp;#x3060;&amp;#x3051;&amp;#x3069;&amp;#x8CEA;&amp;#x554F;&amp;#x3042;&amp;#x308B;&amp;#xFF1F;&lt;/a&gt;」という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9&quot;&gt;Webサービス&lt;/a&gt;を作った話をします。&lt;/p&gt;

&lt;h2&gt;「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生だけど質問ある？」とは？&lt;/h2&gt;

&lt;p&gt;「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生だけど質問ある？」は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生に匿名で質問ができる&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9&quot;&gt;Webサービス&lt;/a&gt;です。
質問を投げると&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生から回答がつきます。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;祭の企画の一つとして作りました。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20171206/20171206233101.png&quot; alt=&quot;f:id:threetea0407:20171206233101p:plain:w600&quot; title=&quot;f:id:threetea0407:20171206233101p:plain:w600&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:600px&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;なんでこの企画をやろうと思ったの？&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Twitter&quot;&gt;Twitter&lt;/a&gt;で&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A8%A5%B4%A5%B5&quot;&gt;エゴサ&lt;/a&gt;かける度に、みんな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;のこと誤解してるんだなぁと感じます。
特にガサ入れ直後とかはひどくて、目を覆いたくなるようなツイートもたくさんあります。&lt;/p&gt;

&lt;p&gt;これは、テレビで流れるのはガサの報道か「変人の巣窟」という観点のバラエティ番組ばかりで、そういう情報しか目に触れることがないことが大きな要因だと思います。
さらに、インターネット上にある情報も「廃墟」とか「やばい場所」とか、あるいは「過激派の巣窟」という一面的な切り口でしか&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;を語っていません。
こうした状況では、世間の人々が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;に対して偏見を持つのも仕方ないと思います。&lt;/p&gt;

&lt;p&gt;じゃあ、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;公式で情報発信をすればいいじゃないかという話になりますが、これは結構難しいです。
というのも、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%AB%BC%A3&quot;&gt;自治&lt;/a&gt;会として情報を発信するためには寮全体で合意を取る必要があるからです。
これはハードルがなかなか高いですし、単純に時間がかかります。&lt;/p&gt;

&lt;p&gt;そこで、「実際のところ○○ってどうなん？」みたいなことを「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%AB%BC%A3&quot;&gt;自治&lt;/a&gt;会」ではなく「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生個人」に聞くことができたら、毎度寮全体で合意を取る必要もなく、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;に関する誤解も解けていくのではないかという気持ちがあり、このサービスを作成しました。&lt;/p&gt;

&lt;h2&gt;実際公開してみてどうなん？&lt;/h2&gt;

&lt;p&gt;想定していた使い方とはちょっと違う使われ方をしていると感じます。&lt;/p&gt;

&lt;p&gt;どういうことかというと、質問してくる人が、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;に全く関わりのない人というよりは、例えば京大生だったり、京都周辺に住んでいる人が多いということです。
つまり、ある程度&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;についての知識がある人が質問してきているという感触があります。&lt;/p&gt;

&lt;p&gt;これは、そもそも&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;に関わりのない人に対してこのサービスが知られていないということが、大きな原因としてあると考えられます。
現状「&lt;a href=&quot;https://qfk.herokuapp.com/&quot;&gt;&amp;#x718A;&amp;#x91CE;&amp;#x5BEE;&amp;#x751F;&amp;#x3060;&amp;#x3051;&amp;#x3069;&amp;#x8CEA;&amp;#x554F;&amp;#x3042;&amp;#x308B;&amp;#xFF1F;&lt;/a&gt;」への&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%CE%AE%C6%FE&quot;&gt;流入&lt;/a&gt;経路は、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生のツイートと、&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/permanent.html#event124&quot;&gt;熊野寮祭の企画一覧ページ&lt;/a&gt;の２箇所しかありません。
これでは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生の友人や、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;そのものに興味がある人にしかリーチすることができず、当初の目的とは対象がズレてしまっています。&lt;/p&gt;

&lt;p&gt;サービスを作るときには、ただ単にソフトウェアを開発するだけではなく、ターゲットにリーチするための努力も必要だという知見が得られました。&lt;/p&gt;

&lt;h2&gt;今後はどうするの？&lt;/h2&gt;

&lt;p&gt;当初は寮祭終了とともにクローズするつもりで始めたのですが、もっと続けたほうがいいという声もあり、ひとまず継続しようと思っています。サービス自体はまだ完成していないと思っているので、ぼちぼち改善していきます。&lt;/p&gt;

&lt;p&gt;検索とかお気に入りとかカテゴリ分けとか回答者ごとの並び替えとかやっていきたいし、デザインも改善していきたい。&lt;/p&gt;

&lt;p&gt;12/12 追記：回答者内で議論した結果、一旦質問の募集を打ち切ることになりました。既存の質問や回答は引き続き公開します。入試の時期や春先、ガサが入ったときなどに再度質問を受ける期間を設けようと思います。&lt;/p&gt;
</content>        
        <category term="熊野寮" label="熊野寮" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20171206/20171206233101.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title> 熊野寮でコードを書いて感謝された話</title>
        <link href="https://dawn.hateblo.jp/entry/write-code-kumano-dormitory"/>
        <id>hatenablog://entry/8599973812322747172</id>
        <published>2017-12-02T00:00:00+09:00</published>
        <updated>2018-12-15T00:56:08+09:00</updated>        <summary type="html">CAMPHOR- Advent Calendar 2017 の 2日目 の記事です。 CAMPHOR-運営メンバーの @genya0407 です。 熊野寮でコードを書いて感謝された話をします。</summary>
        <content type="html">&lt;p&gt;&lt;a href=&quot;https://advent.camph.net/&quot;&gt;CAMPHOR- Advent Calendar 2017&lt;/a&gt; の 2日目 の記事です。&lt;/p&gt;

&lt;p&gt;CAMPHOR-運営メンバーの &lt;a href=&quot;https://twitter.com/genya0407&quot;&gt;@genya0407&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;でコードを書いて感謝された話をします。&lt;/p&gt;

&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;僕は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%FE%C5%D4%C2%E7%B3%D8&quot;&gt;京都大学&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%AB%BC%A3&quot;&gt;自治&lt;/a&gt;寮である&lt;a href=&quot;https://kumano-ryo.jimdo.com/&quot;&gt;熊野寮&lt;/a&gt;に住んでいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://image.jimcdn.com/app/cms/image/transf/dimension=436x10000:format=jpg/path/se413120fb88ca7d2/image/idf343008c3b6950f/version/1479838001/image.jpg&quot; alt=&quot;熊野寮の様子&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ガサが来たり過激派が住んでたりしますが、基本的には自由で楽しいところです。&lt;/p&gt;

&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%B7%A5%A7%A5%A2%A5%EA%A5%F3%A5%B0&quot;&gt;カーシェアリング&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;には&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%B7%A5%A7%A5%A2%A5%EA%A5%F3%A5%B0&quot;&gt;カーシェアリング&lt;/a&gt;というサービスがあります&lt;a href=&quot;#f-1f76bffc&quot; name=&quot;fn-1f76bffc&quot; title=&quot;自治会公式でやっているわけではなく個人がサービスを提供している&quot;&gt;*1&lt;/a&gt;。
これは、自動車を共有して安く利用しようというサービスです。会員登録をし、年会費を払い、乗った分だけ追加で料金を払います。&lt;/p&gt;

&lt;p&gt;廉価に車を使えるので僕も利用しているのですが、割と昔からあるサービスということもあって理不尽な手作業を強いられることが多く辟易していました。&lt;/p&gt;

&lt;h2&gt;理不尽な手作業&lt;/h2&gt;

&lt;p&gt;理不尽な手作業とは何かというと、それは乗車の手続きのことです。&lt;/p&gt;

&lt;p&gt;車に乗る時の手続きをまとめると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;乗ろうとしている車が予約されていないか確認するために、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8&quot;&gt;メーリングリスト&lt;/a&gt;を検索する&lt;/li&gt;
&lt;li&gt;今から車に乗る旨のメッセージを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8&quot;&gt;メーリングリスト&lt;/a&gt;に流す&lt;/li&gt;
&lt;li&gt;乗車時の走行距離メーターの値をノートに書く&lt;/li&gt;
&lt;li&gt;降車時の走行距離メーターの値をノートに書く&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;のようになります。クッソ面倒ですね。最悪のユーザー体験です。&lt;/p&gt;

&lt;h2&gt;なんでこんなにめんどい手続きが必要なのか&lt;/h2&gt;

&lt;p&gt;なんでこういう煩雑な手続きが必要なのかというと、利用料金を計算するためです。「使った分だけお金を払う」を実現するためには、「どれだけ車に乗ったのか」ということを記録しなければなりません。&lt;/p&gt;

&lt;p&gt;例えば、タイムズがやっている&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%B7%A5%A7%A5%A2%A5%EA%A5%F3%A5%B0&quot;&gt;カーシェアリング&lt;/a&gt;サービスの場合は、車の鍵を開けてから締めるまでの時間が計測されており、それを元に料金を自動で算出します。
そのため、ユーザーは特別な作業をする必要はありません。車に乗って降りるだけで料金が自動で計算されます。&lt;/p&gt;

&lt;p&gt;一方&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;の場合は、そんなオシャレなシステムを搭載するお金も技術も無いので、上記のような煩雑な手続きが発生していました。&lt;/p&gt;

&lt;h2&gt;Webアプリの導入&lt;/h2&gt;

&lt;p&gt;こうした煩雑な手続きをなくすために、&lt;a href=&quot;https://github.com/genya0407/sharecar-rails&quot;&gt;Webアプリ&lt;/a&gt;を作り、導入＆移行しました。
ユーザーは、メーターの値と帰宅時刻を入力するだけで車に乗れます&lt;a href=&quot;#f-bf6421b7&quot; name=&quot;fn-bf6421b7&quot; title=&quot;理想的にはタイムズのシステムみたいに鍵開けたときと閉めたときのメーターの値を記録するようにしたいけど、現状鍵からユーザーを特定できる作りにはなってないので難しい。
&quot;&gt;*2&lt;/a&gt;。
その上、予約中に乗ろうとすると警告されるので、予約をいちいち確認する必要もありません。&lt;/p&gt;

&lt;p&gt;また、以前のやり方だと、使用料金を算出するために半年に一度ノートに書いてある走行距離を&lt;b&gt;秘伝の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Excel&quot;&gt;Excel&lt;/a&gt;シートに手入力&lt;/b&gt;してマクロを走らせる必要がありました。この手入力という作業が本当にひどくて、一度やらされたときは6時間ぐらいかかって本当に発狂するかと思いました。&lt;/p&gt;

&lt;p&gt;Webアプリに移行したことでこの手入力という地獄のタスクが無くなり、僕がバッチを回せば使用料金が算出されるようになりました。最高のユーザー体験です。&lt;/p&gt;

&lt;h2&gt;非ITコミュニティでプログラムを書くこと&lt;/h2&gt;

&lt;p&gt;このWebアプリはみんな大好き&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails&quot;&gt;Ruby on Rails&lt;/a&gt;で作成されています。
フロントエンドも普通にHTMLを吐き出しているだけで、今時のイケてるJS&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;などは使っていません&lt;a href=&quot;#f-2ada8c88&quot; name=&quot;fn-2ada8c88&quot; title=&quot;materialize.cssというcssフレームワークは使った&quot;&gt;*3&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;こういう雑なWebアプリが作れるだけでも、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;ではものすごく重宝されて褒められます。
このアプリを作ったときも、「めっちゃ便利！」という反応をいただきました。
レベルの高いエンジニアの中で切磋琢磨するのも楽しいですが、こういうIT力の低い組織でいろいろやるのも楽しいです。&lt;/p&gt;

&lt;p&gt;みなさんも自分の所属する非IT系コミュニティなどで、自分のIT力を活かしていろいろやってみたら楽しいかもしれませんよ。おすすめです。&lt;/p&gt;

&lt;h2&gt;結論&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ユーザーの体験は大幅に改善され、みんな快適に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%B7%A5%A7%A5%A2%A5%EA%A5%F3%A5%B0&quot;&gt;カーシェアリング&lt;/a&gt;できるようになりました。めでたい。&lt;/li&gt;
&lt;li&gt;承認欲求が満たされたい&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE&quot;&gt;プログラマ&lt;/a&gt;の人はぜひ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;に入寮しましょう。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Related articles&lt;/h2&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdawn.hateblo.jp%2Fentry%2Fkebab-system&quot; title=&quot;高校の文化祭の食販の注文フローを電子化した話 - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/kebab-system&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdawn.hateblo.jp%2Fentry%2F2018%2F09%2F11%2F202511&quot; title=&quot;「熊野寮で電子化した話」というタイトルでLTした - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/2018/09/11/202511&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774165166/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/51gar5P8bEL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;パーフェクト Ruby on Rails&quot; title=&quot;パーフェクト Ruby on Rails&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4774165166/genya040704-22 /&quot;&gt;パーフェクト Ruby on Rails&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; すがわらまさのり,前島真一,近藤宇智朗,橋立友宏&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2&quot;&gt;技術評論社&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2014/06/06&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 大型本&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4774165166/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (8件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4063723224/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/51ZF3jyTOsL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;レッド(1) (KCデラックス)&quot; title=&quot;レッド(1) (KCデラックス)&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4063723224/genya040704-22 /&quot;&gt;レッド(1) (KCデラックス)&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BB%B3%CB%DC%C4%BE%BC%F9&quot;&gt;山本直樹&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B9%D6%C3%CC%BC%D2&quot;&gt;講談社&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2007/09/21&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; コミック&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;購入&lt;/span&gt;: 15人 &lt;span class=&quot;hatena-asin-detail-label&quot;&gt;クリック&lt;/span&gt;: 221回&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4063723224/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログ (168件) を見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-1f76bffc&quot; name=&quot;f-1f76bffc&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%AB%BC%A3&quot;&gt;自治&lt;/a&gt;会公式でやっているわけではなく個人がサービスを提供している&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-bf6421b7&quot; name=&quot;f-bf6421b7&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;理想的にはタイムズのシステムみたいに鍵開けたときと閉めたときのメーターの値を記録するようにしたいけど、現状鍵からユーザーを特定できる作りにはなってないので難しい。
&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-2ada8c88&quot; name=&quot;f-2ada8c88&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;materialize.&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;という&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/css&quot;&gt;css&lt;/a&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF&quot;&gt;フレームワーク&lt;/a&gt;は使った&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="熊野寮" label="熊野寮" />
        
        <category term="Rails" label="Rails" />
        
        <category term="Ruby" label="Ruby" />
        
        <category term="Webサービス" label="Webサービス" />
        
        <link rel="enclosure" href="https://image.jimcdn.com/app/cms/image/transf/dimension=436x10000:format=jpg/path/se413120fb88ca7d2/image/idf343008c3b6950f/version/1479838001/image.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>寮外の人でも楽しめる熊野寮祭の企画</title>
        <link href="https://dawn.hateblo.jp/entry/2017/11/28/055018"/>
        <id>hatenablog://entry/8599973812321739038</id>
        <published>2017-11-28T05:50:18+09:00</published>
        <updated>2019-03-19T16:51:42+09:00</updated>        <summary type="html">熊野寮祭において、寮生でなくても楽しめる企画を列挙し、概要を説明します。 熊野寮祭とは 熊野寮祭とは、京都大学の学生自治寮である熊野寮が毎年開催している祭りです。例年11月末〜12月初頭まで開催されます。今年はちょっと長いですが、11月29日〜12月10日の間開催されます。 問題意識 熊野寮祭は、基本的には寮生内輪で楽しむお祭りです。というか、寮生でないと楽しめない企画や、寮外の方が参加することを想定していない企画が混ざっています。 そのため、寮外の方は企画に参加してよいのか悪いのかわからず、結局参加しないという状態になっている気がします。 この記事では、合計100を超える企画の中から「寮外の…</summary>
        <content type="html">&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;祭において、寮生でなくても楽しめる企画を列挙し、概要を説明します。&lt;/p&gt;

&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;祭とは&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;祭とは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%FE%C5%D4%C2%E7%B3%D8&quot;&gt;京都大学&lt;/a&gt;の学生&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%AB%BC%A3&quot;&gt;自治&lt;/a&gt;寮である&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;が毎年開催している祭りです。例年11月末〜12月初頭まで開催されます。今年はちょっと長いですが、11月29日〜12月10日の間開催されます。&lt;/p&gt;

&lt;h2&gt;問題意識&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;祭は、基本的には寮生内輪で楽しむお祭りです。というか、寮生でないと楽しめない企画や、寮外の方が参加することを想定していない企画が混ざっています。
そのため、寮外の方は企画に参加してよいのか悪いのかわからず、結局参加しないという状態になっている気がします。&lt;/p&gt;

&lt;p&gt;この記事では、合計100を超える企画の中から「寮外の方も楽しめる企画」「寮外の方が参加することを想定している企画」を主観によりチョイスし、軽く解説します。&lt;/p&gt;

&lt;h2&gt;寮外の方も楽しめる企画一覧&lt;/h2&gt;

&lt;p&gt;以下、企画一覧です。
ちなみに、すべての企画は&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/&quot;&gt;公式HP&lt;/a&gt;に詳細が載っています。詳しく知りたい方はそちらを参照してください。&lt;/p&gt;

&lt;h3&gt;寮の外でやる企画&lt;/h3&gt;

&lt;h4&gt;時計台占拠&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-11-29.html#event3&quot;&gt;&lt;b&gt;時計台占拠&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B5%FE%C5%D4%C2%E7%B3%D8&quot;&gt;京都大学&lt;/a&gt;のシンボル「時計台」で何かが起こる。恒例企画。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1129/senkyo.jpg&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1129/senkyo.jpg&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1129/senkyo.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;四条大運動会&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-03.html#event32&quot;&gt;&lt;b&gt;四条大運動会&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BB%CD%BE%F2%C4%CC&quot;&gt;四条通&lt;/a&gt;で運動会をする。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1203/shijou.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1203/shijou.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1203/shijou.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%AB&quot;&gt;イカ&lt;/a&gt;ダレース&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-02.html#event22&quot;&gt;&lt;b&gt;イカダレース&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%AB&quot;&gt;イカ&lt;/a&gt;ダを作って鴨川を下る。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/ikada.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/ikada.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/ikada.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;京都駅大階段グリコ&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-09.html#event84&quot;&gt;&lt;b&gt;京都駅大階段グリコ&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;京都駅の大階段でたむろしている&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%C3%A5%D7&quot;&gt;カップ&lt;/a&gt;ルとじゃんけんして、グリコの要領で階段をのぼる。速く登った人が勝ち。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1209/guriko.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1209/guriko.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1209/guriko.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;飲食&lt;/h3&gt;

&lt;h4&gt;BAR KUMA&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/permanent.html#event98&quot;&gt;&lt;b&gt;BAR KUMA&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;寮にバーが出現する。リーズナブルな料金でドリンクを提供する。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/barkuma.jpg&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/barkuma.jpg&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/barkuma.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;たこ焼き&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/permanent.html#event103&quot;&gt;&lt;b&gt;たこ焼き&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;たこ焼きを売る。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/takoyaki.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/takoyaki.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/takoyaki.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;寮祭無限酒&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/permanent.html#event117&quot;&gt;&lt;b&gt;寮祭無限酒&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;カンパを払って酒を無限に飲む。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/mugensake.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/mugensake.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/mugensake.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%CA%A5%ED%A5%B0%A5%B2%A1%BC%A5%E0&quot;&gt;アナログゲーム&lt;/a&gt;関連&lt;/h3&gt;

&lt;h4&gt;賞金付きポーカー大会&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-02.html#event21&quot;&gt;&lt;b&gt;賞金付きポーカー大会&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4日間に渡ってポーカー大会をする。賞金総額10万円。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/poker.jpg&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/poker.jpg&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/poker.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;麻将皇帝戦&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-07.html#event66&quot;&gt;&lt;b&gt;麻将皇帝戦&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;麻雀大会。例年は80人ぐらい参加する。寮外の方のほうが多い珍しい企画。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1207/masyou.jpg&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1207/masyou.jpg&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1207/masyou.jpg&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;耐久&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%BF%A5%F3&quot;&gt;カタン&lt;/a&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-02.html#event28&quot;&gt;&lt;b&gt;耐久カタン&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12時間ぐらいぶっつづけで&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AB%A5%BF%A5%F3&quot;&gt;カタン&lt;/a&gt;をやる。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/katan.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/katan.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/katan.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;耐久&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF&quot;&gt;レジスタ&lt;/a&gt;ンス・アヴァロン&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-05.html#event51&quot;&gt;&lt;b&gt;耐久レジスタンス・アヴァロン&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;できるだけ長くアヴァロンをプレイし続ける。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1129/avalon.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1129/avalon.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1129/avalon.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/TRPG&quot;&gt;TRPG&lt;/a&gt;小会&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-10.html#event91&quot;&gt;&lt;b&gt;TRPG小会&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/TRPG&quot;&gt;TRPG&lt;/a&gt;をやる。飛び入りOK。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1210/trpg.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1210/trpg.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1210/trpg.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;例のアレ&lt;/h3&gt;

&lt;h4&gt;鉄扉&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-04.html#event48&quot;&gt;&lt;b&gt;鉄扉&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;の地下にある鉄の扉の部屋で飲み屋を開く。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1204/teppi.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1204/teppi.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1204/teppi.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;野菜販売&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/permanent.html#event105&quot;&gt;&lt;b&gt;野菜販売&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;千葉県&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C0%AE%C5%C4%BB%D4&quot;&gt;成田市&lt;/a&gt;産の野菜を売る&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/yasai.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/yasai.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/permanent/yasai.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%B0%BB%B3%B9%B1%B0%EC&quot;&gt;外山恒一&lt;/a&gt;関連の企画&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-11-30.html#event10&quot;&gt;&lt;b&gt;「よいテロリストのための教科書」を大声で読む&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-01.html#event17&quot;&gt;&lt;b&gt;「続・よいテロリストのための教科書」を書く&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/2017-12-02.html#event25&quot;&gt;&lt;b&gt;外山恒一座談会&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/zadankai.png&quot; class=&quot;http-image&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/zadankai.png&quot; class=&quot;http-image&quot; alt=&quot;https://kumano-dormitory.github.io/ryosai2017/base_data/images/1202/zadankai.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B3%B0%BB%B3%B9%B1%B0%EC&quot;&gt;外山恒一&lt;/a&gt;が来ることもあってか、今年はそれに関連した企画がいくつかあります。&lt;/p&gt;

&lt;h3&gt;ネット上で見れる企画&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/permanent.html#event124&quot;&gt;&lt;b&gt;熊野寮生だけど質問ある？&lt;/b&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;生に匿名で質問できるWebアプリ。寮生の有志が匿名で回答する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/permanent.html#event109&quot;&gt;&lt;b&gt;意識高い熊野寮HP制作&lt;/b&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;意識高そうな&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%B7%A7%CC%EE%CE%C0&quot;&gt;熊野寮&lt;/a&gt;のHPを作る。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;その他の企画について&lt;/h2&gt;

&lt;p&gt;上に挙げたもの以外にもたくさんの企画があります。興味のある方は、&lt;a href=&quot;https://kumano-dormitory.github.io/ryosai2017/events.html&quot;&gt;企画一覧のページ&lt;/a&gt;をご覧ください。&lt;/p&gt;
</content>        
        <category term="熊野寮" label="熊野寮" />
        
        <link rel="enclosure" href="https://kumano-dormitory.github.io/ryosai2017/base_data/images/1129/senkyo.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>PNGを端末に表示するプログラムをRustで書いた</title>
        <link href="https://dawn.hateblo.jp/entry/2017/10/22/212635"/>
        <id>hatenablog://entry/8599973812310292343</id>
        <published>2017-10-22T21:26:35+09:00</published>
        <updated>2018-12-15T00:56:08+09:00</updated>        <summary type="html">PNGを端末に表示するプログラムを作りました。 github.com 使い方 cargo run /Path/to/Windows_logo.png とすると、👇のように端末に画像が表示されます。透過画像も表示できます。 ちなみに、PNGの画像形式は何パターンかあるのですが、そのすべてに対応してるわけではないので、表示できない画像もあります。あしからず。</summary>
        <content type="html">&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;を端末に表示するプログラムを作りました。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fgenya0407%2Fpng_print&quot; title=&quot;genya0407/png_print&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/genya0407/png_print&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;使い方&lt;/h2&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;cargo run /Path/to/Windows_logo.png&lt;/pre&gt;


&lt;p&gt;とすると、👇のように端末に画像が表示されます。透過画像も表示できます。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;の画像形式は何パターンかあるのですが、そのすべてに対応してるわけではないので、表示できない画像もあります。あしからず。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;a href=&quot;http://f.hatena.ne.jp/threetea0407/20171022173244&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;url&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20171022/20171022173244.png&quot; alt=&quot;f:id:threetea0407:20171022173244p:image:w300&quot; title=&quot;f:id:threetea0407:20171022173244p:image:w300&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:300px&quot; itemprop=&quot;image&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;メイキング&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;の規格が理解できたら、あとは流れで作れると思うので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;の規格を理解しましょう。
&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;の規格は&lt;a href=&quot;https://tools.ietf.org/html/rfc2083&quot;&gt;RFCで公開されている&lt;/a&gt;ので、それを読んでください。&lt;/p&gt;

&lt;p&gt;...というわけにも行かないので、解説記事を読んで下さい 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=http%3A%2F%2Fdawn.hateblo.jp%2Fentry%2F2017%2F10%2F22%2F205417&quot; title=&quot;PNGの規格を簡単に説明する - さんちゃのblog&quot; class=&quot;embed-card embed-blogcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;http://dawn.hateblo.jp/entry/2017/10/22/205417&quot;&gt;dawn.hateblo.jp&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;とはいえ、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RFC&quot;&gt;RFC&lt;/a&gt;の英語は簡単だし読みやすいので、読むのもそこまで大変ではないと思います。&lt;/p&gt;

&lt;h2&gt;なぜやったのか&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/mixi&quot;&gt;mixi&lt;/a&gt;の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3&quot;&gt;インターン&lt;/a&gt;期間中に開催された「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3&quot;&gt;インターン&lt;/a&gt;生vs社員LT大会」で、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3&quot;&gt;インターン&lt;/a&gt;生の人がzip圧縮に関する発表をしていました。その人は、zipの規格を読んでそれを元にzip圧縮するソフトを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;で実装したそうです。&lt;br /&gt;
なんでわざわざ&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;でやったんですか？とその人に聞いたところ、バイト列の扱いがLLなどに比べてやりやすいからだという返事が返ってきました。&lt;/p&gt;

&lt;p&gt;なるほどな〜やっぱり人間は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;を書かなきゃいけないんやな〜ってその時は思ったんですが、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3&quot;&gt;インターン&lt;/a&gt;が終わるぐらいのときに、Rustはそういう低レイヤーなものを書くのに向いているのではないか、と思うようになりました。&lt;/p&gt;

&lt;p&gt;そういうお気持ちだったときに、「ディジタル情報処理」という授業の先生が「ディジタル情報処理に関係するプログラム書いたら単位出すで」と言っていたので、いっちょうやったるかという機運が高まり、プログラムが作成されました&lt;a href=&quot;#f-2abd379d&quot; name=&quot;fn-2abd379d&quot; title=&quot;ちなみにこのプログラムを先生に見せたら「ディジタル情報処理に関係してるかっていうと微妙だねぇ」という返答が返ってきました。先生的には離散フーリエ変換とかしてほしかったみたいです。&quot;&gt;*1&lt;/a&gt;&lt;a href=&quot;#f-f7139cfe&quot; name=&quot;fn-f7139cfe&quot; title=&quot;エッジの検出してAAに変換するとかすれば、ディジタル情報処理とみなせると言われました。次の課題はこれです。&quot;&gt;*2&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;Rustに関する感想&lt;/h2&gt;

&lt;h3&gt;バイト列の取り扱いはいい感じだった&lt;/h3&gt;

&lt;p&gt;結論から言うと、Rustでバイト列を取り扱うのは結構やりやすいです&lt;a href=&quot;#f-b4746aaf&quot; name=&quot;fn-b4746aaf&quot; title=&quot;僕はバイト列をゴニョゴニョするようなことは普段やらないし、ましてやC++なんて書いたこともないので、あくまで「LLに比べて」やりやすいということです&quot;&gt;*3&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;例えば、&lt;code&gt;u8&lt;/code&gt;の配列から4つづつ読み出して、&lt;code&gt;u32&lt;/code&gt;と見做して値を取得したいというような課題があるわけです。
そういうとき、Rustには&lt;a href=&quot;https://crates.io/crates/byteorder&quot;&gt;byteorder&lt;/a&gt;というcrateがあって、👇のようにして数値に変換できます。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;byteorder&lt;/span&gt;;
&lt;span class=&quot;synStatement&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;byteorder&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;{BigEndian, ReadBytesExt};

&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; bytes: &lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;];

    &lt;span class=&quot;synPreProc&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;bytes[&lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;]).&lt;span class=&quot;synIdentifier&quot;&gt;read_u32&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;unwrap&lt;/span&gt;()); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 257&lt;/span&gt;
    &lt;span class=&quot;synPreProc&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;synType&quot;&gt;&amp;amp;&lt;/span&gt;bytes[&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;8&lt;/span&gt;]).&lt;span class=&quot;synIdentifier&quot;&gt;read_u32&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;BigEndian&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;unwrap&lt;/span&gt;()); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 258&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;こういうcrateがあって、そこそこ人気がある（&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/github&quot;&gt;github&lt;/a&gt;で200スターぐらい）っていうことは、低レイヤーな処理をRustにやらせたいという需要はやはり一定あるのかな、と感じます。&lt;/p&gt;

&lt;p&gt;他にも、Rustにはプリミティブな数値型が&lt;a href=&quot;https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/primitive-types.html#%E6%95%B0%E5%80%A4%E5%9E%8B&quot;&gt;たくさん&lt;/a&gt;あって、用途に応じて使い分けられるのは良いと思いました。&lt;/p&gt;

&lt;p&gt;また、オーバーフローが起きたときにエラーを出してくれるのですが、各数値型には&lt;code&gt;wrapping_add&lt;/code&gt;のようなメソッドが生えておりまして、このメソッドを通して計算をすると、オーバーフローが起こったときにスルーしてくれます。こういうのが明示的に書けるのは良いですね。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
  &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; a: &lt;span class=&quot;synType&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;;
  &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; b: &lt;span class=&quot;synType&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;200&lt;/span&gt;;
  
  &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; c: &lt;span class=&quot;synType&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;synStatement&quot;&gt;+&lt;/span&gt; b;             &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; panic!&lt;/span&gt;
  &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; c: &lt;span class=&quot;synType&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; a.&lt;span class=&quot;synIdentifier&quot;&gt;wrapping_add&lt;/span&gt;(b); &lt;span class=&quot;synComment&quot;&gt;// =&amp;gt; 144&lt;/span&gt;
}
&lt;/pre&gt;


&lt;h3&gt;Rustの学習コストはやっぱり高い&lt;/h3&gt;

&lt;p&gt;一方で、やはりRustの学習コストは高いなぁと思いました。
僕自身はライフタイムや型システムを（一応）理解しているので、謎の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;エラーに悩まされるという初心者あるある現象が発生することはなかったですが、&lt;code&gt;move&lt;/code&gt;を避けるために&lt;code&gt;.clone()&lt;/code&gt;を乱発するコードになってしまい、メモリをうまく使えていないなあという気持ちになりました。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%BC%D6%CE%D8%A4%CE%BA%C6%C8%AF%CC%C0&quot;&gt;車輪の再発明&lt;/a&gt;を通して学んでいきたい。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FPistonDevelopers%2Fimage&quot; title=&quot;PistonDevelopers/image&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://github.com/PistonDevelopers/image&quot;&gt;github.com&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-2abd379d&quot; name=&quot;f-2abd379d&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;ちなみにこのプログラムを先生に見せたら「ディジタル情報処理に関係してるかっていうと微妙だねぇ」という返答が返ってきました。先生的には離散&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D5%A1%BC%A5%EA%A5%A8%CA%D1%B4%B9&quot;&gt;フーリエ変換&lt;/a&gt;とかしてほしかったみたいです。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-f7139cfe&quot; name=&quot;f-f7139cfe&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;エッジの検出してAAに変換するとかすれば、ディジタル情報処理とみなせると言われました。次の課題はこれです。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-b4746aaf&quot; name=&quot;f-b4746aaf&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;僕はバイト列をゴニョゴニョするようなことは普段やらないし、ましてや&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/C%2B%2B&quot;&gt;C++&lt;/a&gt;なんて書いたこともないので、あくまで「LLに比べて」やりやすいということです&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <category term="Rust" label="Rust" />
        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20171022/20171022155958.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
    <entry>
        <title>PNGの規格を簡単に説明する</title>
        <link href="https://dawn.hateblo.jp/entry/2017/10/22/205417"/>
        <id>hatenablog://entry/8599973812310374768</id>
        <published>2017-10-22T20:54:17+09:00</published>
        <updated>2019-03-31T11:23:20+09:00</updated>        <summary type="html">PNGの規格を勉強する機会があったので、その内容を簡単に説明します*1。 PNGはいくつかの&quot;チャンク&quot;が集まって構成されています。例えば、IHDRチャンクやIDATチャンク、PLTEチャンクなどがあります。では、PNGファイルという単なるバイト列から、どのようにチャンクを抽出すれば良いのでしょうか？ これは、PNGファイルの構造を知ることでわかります。 *1:PNGの規格自体はRFCで公開されている</summary>
        <content type="html">&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;の規格を勉強する機会があったので、その内容を簡単に説明します&lt;a href=&quot;#f-195c01ee&quot; name=&quot;fn-195c01ee&quot; title=&quot;PNGの規格自体はRFCで公開されている&quot;&gt;*1&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;はいくつかの&quot;チャンク&quot;が集まって構成されています。例えば、&lt;code&gt;IHDR&lt;/code&gt;チャンクや&lt;code&gt;IDAT&lt;/code&gt;チャンク、&lt;code&gt;PLTE&lt;/code&gt;チャンクなどがあります。では、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;ファイルという単なるバイト列から、どのようにチャンクを抽出すれば良いのでしょうか？&lt;/p&gt;

&lt;p&gt;これは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;ファイルの構造を知ることでわかります。&lt;/p&gt;

&lt;h2&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;ファイルの構造&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;ファイルの構造は、以下のようになっています：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイル先頭の8byteは &lt;em&gt;必ず&lt;/em&gt; &lt;code&gt;137, 80, 78, 71, 13, 10, 26, 10&lt;/code&gt;である&lt;/li&gt;
&lt;li&gt;それ以降のバイト列は、次の構造の繰り返しである

&lt;ul&gt;
&lt;li&gt;先頭の4byteは、チャンクのサイズを表す(&lt;em&gt;Length&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;次の4byteは、チャンクの種類を表す(&lt;em&gt;Chunk Type&lt;/em&gt;)

&lt;ul&gt;
&lt;li&gt;例えば&lt;code&gt;IHDR&lt;/code&gt;とか&lt;code&gt;IDAT&lt;/code&gt;とか&lt;code&gt;PLTE&lt;/code&gt;になったりする&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;次の&lt;em&gt;n&lt;/em&gt;byteは、チャンクのデータを表す(Chunk Data)

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;n&lt;/em&gt;はLengthの値&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;次の4byteは、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRC&quot;&gt;CRC&lt;/a&gt;を表す(&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/CRC&quot;&gt;CRC&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;いわゆる誤り検出のためのデータ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;この構造に従って&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;ファイルをパースすると、複数のチャンクを取りだすことができます。&lt;br /&gt;
あとはこれらのチャンクを画像として解釈すればいっちょう上がりというわけです。&lt;/p&gt;

&lt;h2&gt;重要なチャンク&lt;/h2&gt;

&lt;p&gt;画像データを取得するために必須のチャンクについて解説します。&lt;/p&gt;

&lt;h3&gt;IHDRチャンク&lt;/h3&gt;

&lt;p&gt;まず、チャンクの中から、&lt;code&gt;IHDR&lt;/code&gt;チャンクを探してきましょう。こいつはいわゆるヘッダーです。&lt;br /&gt;
&lt;code&gt;Width&lt;/code&gt;, &lt;code&gt;Height&lt;/code&gt;, &lt;code&gt;Color Type&lt;/code&gt;の３つのデータが含まれています&lt;a href=&quot;#f-4ff9d049&quot; name=&quot;fn-4ff9d049&quot; title=&quot;本当はもっとある&quot;&gt;*2&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;Color Type&lt;/code&gt;というのが何を表しているのかというと、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&quot;パレット&quot;を使っているか&lt;/li&gt;
&lt;li&gt;白黒画像なのか、カラー画像なのか&lt;/li&gt;
&lt;li&gt;アルファチャンネルが使用されているか（透過画像かどうか）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という３つの情報を表しています。&lt;/p&gt;

&lt;h3&gt;PLTEチャンク&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Color Type&lt;/code&gt;を見て、&quot;パレット&quot;が使われているというのであれば、必ず&lt;code&gt;PLTE&lt;/code&gt;チャンクが存在します。&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;PLTE&lt;/code&gt;チャンクというのは、「画像内で使われ得るすべての色」の情報を持っています。
例えば、赤一色の画像であれば&lt;code&gt;rgb = [255,0,0]&lt;/code&gt;という値だけを持ちますし、赤と白の二色だけの画像であれば&lt;code&gt;rgb = [255, 0, 0]&lt;/code&gt;に加えて&lt;code&gt;rgb = [255,255,255]&lt;/code&gt;という値も持ちます。また、アルファチャンネルが使用されている場合は、RGBの三色に加えてもう一つ「透過度」を表すbyteが存在します。例えば、「赤色で全く透明ではない色」は&lt;code&gt;[255, 0, 0, 255]&lt;/code&gt;になるわけですね。&lt;/p&gt;

&lt;p&gt;PLTEチャンクのバイト列から色情報を取得するのは簡単で、RGBなら３つづつ（RGB+αなら４つづつ）先頭のバイトからグループ化していけば良いです。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;なんでこんなものが存在するのかというと、その方が画像のサイズを落とせるからです。例えば、３色しか使われない画像を圧縮するとき、すべての&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;ごとに色情報を持つのは容量の無駄です。&lt;br /&gt;
それよりも、その３色にそれぞれ番号を振っておいて、「この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;はn番の色、この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;はm番の色、この&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;は...」というようにデータを持っておくほうが、使う色が少ない場合は容量が少なくて済みます。&lt;/p&gt;

&lt;h3&gt;IDATチャンク&lt;/h3&gt;

&lt;p&gt;ここが画像データの本体です。&lt;code&gt;IDAT&lt;/code&gt;チャンクには、実際の画像データが格納されています&lt;a href=&quot;#f-2dd8d5ee&quot; name=&quot;fn-2dd8d5ee&quot; title=&quot; IDATチャンクは１つのファイルに２つ以上含まれることがあります。これは、チャンクの長さに制限がある一方で、画像データのサイズには制限がないからです。 &quot;&gt;*3&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IDAT&lt;/code&gt;チャンクに格納されている画像データはDeflate圧縮されています。そのため、&lt;code&gt;IDAT&lt;/code&gt;チャンクから画像データを取得するためには展開する必要があります&lt;a href=&quot;#f-b2e1d620&quot; name=&quot;fn-b2e1d620&quot; title=&quot;Deflateのアルゴリズムに関してはこの記事の解説すべき範囲を外れるので特に解説しないが、実際にはDeflateを取り扱うライブラリが多くの言語で用意されているのでそれに突っ込めば良い。&quot;&gt;*4&lt;/a&gt;。展開されたデータは、👇のように、左上から右下に向かって１&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D4%A5%AF%A5%BB%A5%EB&quot;&gt;ピクセル&lt;/a&gt;づつ色の情報が並んでいます&lt;a href=&quot;#f-39cfde30&quot; name=&quot;fn-39cfde30&quot; title=&quot;インターレースとかが出てくると例外はあります&quot;&gt;*5&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20171022/20171022184226.png&quot; alt=&quot;f:id:threetea0407:20171022184226p:plain&quot; title=&quot;f:id:threetea0407:20171022184226p:plain&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;image&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;画像データを取得する&lt;/h2&gt;

&lt;p&gt;ここまでのチャンクを解釈して画像データを取得するわけですが、結構複雑です。&lt;/p&gt;

&lt;h3&gt;&quot;パレット&quot;を使用する場合&lt;/h3&gt;

&lt;p&gt;この場合は簡単で、画像データを1byteづつ読んで、その値を「パレットのインデックス」として解釈します。&lt;/p&gt;

&lt;p&gt;例えば、PLTEのデータが&lt;code&gt;RGBs = [[255, 0, 0], [0, 255, 0], [0, 0, 255]]&lt;/code&gt;であり、IDATのデータが&lt;code&gt;pixels = [0, 1, 2, 0, 1, 2]&lt;/code&gt;であれば、画像の色データは&lt;code&gt;colors = [[255, 0, 0], [0, 255, 0], [0, 0, 255], [255, 0, 0], [0, 255, 0], [0, 0, 255]]&lt;/code&gt;になるということです&lt;a href=&quot;#f-35dc4d04&quot; name=&quot;fn-35dc4d04&quot; title=&quot;従って、IDATに含まれる各byteの値は、PLTEのデータの長さを超えることはありません。&quot;&gt;*6&lt;/a&gt;。&lt;/p&gt;

&lt;h3&gt;&quot;パレット&quot;を使用しない場合&lt;/h3&gt;

&lt;p&gt;この場合は、&lt;code&gt;IDAT&lt;/code&gt;のデータを直接解釈します。ここが結構複雑です。&lt;/p&gt;

&lt;p&gt;まず、&lt;code&gt;IDAT&lt;/code&gt;のバイト列を&lt;code&gt;Height&lt;/code&gt;の数に分割します。例えば、&lt;code&gt;Height&lt;/code&gt;が100pixelの画像であれば、100個の等しい長さのバイト列に分割するわけです。&lt;br /&gt;
そして、ここがややこしいのですが、各バイト列の先頭1byteは&lt;code&gt;filter method&lt;/code&gt;を表しています。従って、色情報そのものは2byte目から始まるわけです。&lt;code&gt;filter method&lt;/code&gt;は、&lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Sub&lt;/code&gt;, &lt;code&gt;Up&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, &lt;code&gt;Paeth&lt;/code&gt;の５種類があり、それぞれ違う方法で解釈しないと正しい色情報が得られません。&lt;/p&gt;

&lt;p&gt;ところで、&lt;code&gt;filter method&lt;/code&gt;は各行ごとに設定されています。従って、各行ごとに違う&lt;code&gt;filter method&lt;/code&gt;を使うということができます。&lt;br /&gt;
実際に、&lt;a href=&quot;https://ja.wikipedia.org/wiki/Portable_Network_Graphics&quot;&gt;Portable Network Graphics - Wikipedia&lt;/a&gt;にデモ画像として掲載されているサイコロの画像(👇)は、行ごとに異なるfilter methodが設定されているようです。&lt;/p&gt;

&lt;p&gt;&lt;span itemscope itemtype=&quot;http://schema.org/Photograph&quot;&gt;&lt;a href=&quot;http://f.hatena.ne.jp/threetea0407/20171022201829&quot; class=&quot;hatena-fotolife&quot; itemprop=&quot;url&quot;&gt;&lt;img src=&quot;https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20171022/20171022201829.png&quot; alt=&quot;f:id:threetea0407:20171022201829p:image:w300&quot; title=&quot;f:id:threetea0407:20171022201829p:image:w300&quot; class=&quot;hatena-fotolife&quot; style=&quot;width:300px&quot; itemprop=&quot;image&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;ファイルの規格の説明は以上です。&lt;br /&gt;
あとはプログラムを書けば、実際の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;ファイルを解釈することができます。&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873118379/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/51PnbcCkunL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;詳解 OpenCV 3 ―コンピュータビジョンライブラリを使った画像処理・認識&quot; title=&quot;詳解 OpenCV 3 ―コンピュータビジョンライブラリを使った画像処理・認識&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873118379/genya040704-22 /&quot;&gt;詳解 OpenCV 3 ―コンピュータビジョンライブラリを使った画像処理・認識&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; Gary Bradski,Adrian Kaehler,松田晃一,小沼千絵,永田雅人,花形理&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3&quot;&gt;オライリージャパン&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2018/05/26&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; 単行本（ソフトカバー）&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/4873118379/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-195c01ee&quot; name=&quot;f-195c01ee&quot; class=&quot;footnote-number&quot;&gt;*1&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/PNG&quot;&gt;PNG&lt;/a&gt;の規格自体は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/RFC&quot;&gt;RFC&lt;/a&gt;で&lt;a href=&quot;https://tools.ietf.org/html/rfc2083&quot;&gt;公開されている&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-4ff9d049&quot; name=&quot;f-4ff9d049&quot; class=&quot;footnote-number&quot;&gt;*2&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;本当は&lt;a href=&quot;https://tools.ietf.org/html/rfc2083#section-4&quot;&gt;もっとある&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-2dd8d5ee&quot; name=&quot;f-2dd8d5ee&quot; class=&quot;footnote-number&quot;&gt;*3&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt; IDATチャンクは１つのファイルに２つ以上含まれることがあります。これは、チャンクの長さに制限がある一方で、画像データのサイズには制限がないからです。 &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-b2e1d620&quot; name=&quot;f-b2e1d620&quot; class=&quot;footnote-number&quot;&gt;*4&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;Deflateの&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0&quot;&gt;アルゴリズム&lt;/a&gt;に関してはこの記事の解説すべき範囲を外れるので特に解説しないが、実際にはDeflateを取り扱うライブラリが多くの言語で用意されているのでそれに突っ込めば良い。&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-39cfde30&quot; name=&quot;f-39cfde30&quot; class=&quot;footnote-number&quot;&gt;*5&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%EC%A1%BC%A5%B9&quot;&gt;インターレース&lt;/a&gt;とかが出てくると例外はあります&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn-35dc4d04&quot; name=&quot;f-35dc4d04&quot; class=&quot;footnote-number&quot;&gt;*6&lt;/a&gt;&lt;span class=&quot;footnote-delimiter&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;footnote-text&quot;&gt;従って、IDATに含まれる各byteの値は、PLTEのデータの長さを超えることはありません。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content>        
        <link rel="enclosure" href="https://cdn-ak.f.st-hatena.com/images/fotolife/t/threetea0407/20190331/20190331112300.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>機能追加と同時にリファクタリングをしてもいいか</title>
        <link href="https://dawn.hateblo.jp/entry/2017/10/07/000345"/>
        <id>hatenablog://entry/8599973812305530293</id>
        <published>2017-10-07T00:03:45+09:00</published>
        <updated>2019-03-19T16:53:00+09:00</updated>        <summary type="html">「機能追加と同時にリファクタリングをしてもいい」という記事がはてブに上がっていたので、思うところを述べる。 scrapbox.io 結論 機能追加とリファクタリングを同時にするのは 👍 機能追加とリファクタリングを混ぜてPRを出すのは 👎</summary>
        <content type="html">&lt;p&gt;「機能追加と同時に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;をしてもいい」という記事が&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A5%D6&quot;&gt;はてブ&lt;/a&gt;に上がっていたので、思うところを述べる。&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&quot;https://hatenablog-parts.com/embed?url=https%3A%2F%2Fscrapbox.io%2Fshokai%2F%25E6%25A9%259F%25E8%2583%25BD%25E8%25BF%25BD%25E5%258A%25A0%25E3%2581%25A8%25E5%2590%258C%25E6%2599%2582%25E3%2581%25AB%25E3%2583%25AA%25E3%2583%2595%25E3%2582%25A1%25E3%2582%25AF%25E3%2582%25BF%25E3%2583%25AA%25E3%2583%25B3%25E3%2582%25B0%25E3%2582%2592%25E3%2581%2597%25E3%2581%25A6%25E3%2582%2582%25E3%2581%2584%25E3%2581%2584&quot; title=&quot;機能追加と同時にリファクタリングをしてもいい - 橋本商会&quot; class=&quot;embed-card embed-webcard&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;&quot;&gt;&lt;/iframe&gt;&lt;cite class=&quot;hatena-citation&quot;&gt;&lt;a href=&quot;https://scrapbox.io/shokai/%E6%A9%9F%E8%83%BD%E8%BF%BD%E5%8A%A0%E3%81%A8%E5%90%8C%E6%99%82%E3%81%AB%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%82%92%E3%81%97%E3%81%A6%E3%82%82%E3%81%84%E3%81%84&quot;&gt;scrapbox.io&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;

&lt;h2&gt;結論&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;機能追加と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;を同時にするのは 👍&lt;/li&gt;
&lt;li&gt;機能追加と&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0&quot;&gt;リファクタリング&lt;/a&gt;を混ぜてPRを出すのは 👎&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;問題意識&lt;/h2&gt;

&lt;p&gt;機能追加をするときにリファクタは避けられない。既存の処理を共&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD&quot;&gt;通化&lt;/a&gt;して再利用して機能を追加した方が効率的だからである。&lt;/p&gt;

&lt;p&gt;しかし、機能追加とリファクタが混ざったPRを出すのはダメだ。なぜなら、リファクタによって機能が失われていないかどうか確認するのが面倒になるからだ。&lt;/p&gt;

&lt;h2&gt;解決策&lt;/h2&gt;

&lt;p&gt;では、どうすればよいのか？&lt;/p&gt;

&lt;p&gt;開発中はリファクタと機能追加を平行して行い、リファクタと機能追加のPull Requestを別々に出せば良いのである。&lt;/p&gt;

&lt;h2&gt;手順&lt;/h2&gt;

&lt;p&gt;この解決策を実行するには以下のようにする：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;開発中はリファクタと機能追加を同時並行で行い、適宜コミットする。&lt;/li&gt;
&lt;li&gt;PRを作成する前に&lt;code&gt;git rebase -i&lt;/code&gt;で &lt;strong&gt;コミットを入れ替え&lt;/strong&gt; 、「リファクタのみのブランチ」と「機能追加のみのブランチ」を作成する。&lt;/li&gt;
&lt;li&gt;それぞれのブランチについてPull Requestを作成する。&lt;/li&gt;
&lt;li&gt;レビュアーは、「リファクタのみのブランチ」をレビュー＆マージした後に、「機能追加のみのブランチ」のレビューを行う。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;つまり、開発完了時の&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;* implement B &amp;lt;-- some_new_feature
*  refactor Y
* implement A
*  refactor X
*        base&lt;/pre&gt;


&lt;p&gt;という歴史を、&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;* implement B &amp;lt;-- some_new_feature
* implement A
*  refactor Y &amp;lt;-- refactor_for_new_feature
*  refactor X
*        base&lt;/pre&gt;


&lt;p&gt;のように書き換え、２つのPull Requestを作成するのである。&lt;/p&gt;

&lt;p&gt;このようにすれば、「機能追加とリファクタは同時にやりたい」という欲求と、「機能追加とリファクタは別にレビューしたい」という欲求を両立させることができる。&lt;/p&gt;

&lt;h2&gt;元記事に対する感想&lt;/h2&gt;

&lt;p&gt;「リファクタと機能実装を分けると、リファクタの方のPRでは「設計が壊れ」ているコードをレビューしなければいけないので良くない」みたいな記述があったが、ちゃんと意味のあるリファクタであれば、それはそれとして独立した一つのPRになると思う。「リファクタのPRは『設計が壊れ』ている」ことは、変なリファクタをしてるからなのではないかと思う。&lt;/p&gt;

&lt;p&gt;また、「&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/github&quot;&gt;github&lt;/a&gt;のクソUIのせいで、リファクタと機能実装が混ぜ込まれたPRがレビューしづらい」という意味の記述があったが、ほならねとしか言えない。そもそもdiffを出してるのは、変更範囲だけを見たいという欲求があるからであって、「全体を見てもらえばもっとわかりやすいんです！！！」というのはレビュワーに対する負荷を増やすだけだ。&lt;/p&gt;
</content>        
        <link rel="enclosure" href="https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png" type="image/png" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
    
    
    <entry>
        <title>iter()とinto_iter()の違いを整理した</title>
        <link href="https://dawn.hateblo.jp/entry/2017/07/24/165933"/>
        <id>hatenablog://entry/8599973812282380778</id>
        <published>2017-07-24T16:59:33+09:00</published>
        <updated>2018-12-15T00:56:08+09:00</updated>        <summary type="html">VectorをIteratorに変換する時にいつも混乱していたので整理した。 混乱 あるVectorの要素すべてを3倍するコードを考える。 fn main() { let vec1 = vec![1,2,3,4,5]; let vec2 = vec1.iter() .map(|i| i * 3) .collect::&lt;Vec&lt;i32&gt;&gt;(); println!(&quot;{:?}&quot;, vec1); println!(&quot;{:?}&quot;, vec2); } このコードはコンパイルできるが、以下のような疑問がある。 5行目で vec1はなぜ使えるのか？ 3行目の vec1.iter()で使われているじゃないか！…</summary>
        <content type="html">&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Iterator&quot;&gt;Iterator&lt;/a&gt;に変換する時にいつも混乱していたので整理した。&lt;/p&gt;

&lt;h2&gt;混乱&lt;/h2&gt;

&lt;p&gt;ある&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;の要素すべてを3倍するコードを考える。&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec1 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;];
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec2 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; vec1.&lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;()
                   .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;i&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; i &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
                   .&lt;span class=&quot;synIdentifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();

    &lt;span class=&quot;synPreProc&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;, vec1);
    &lt;span class=&quot;synPreProc&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;, vec2);
}
&lt;/pre&gt;


&lt;p&gt;このコードは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;できるが、以下のような疑問がある。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;5行目で &lt;code&gt;vec1&lt;/code&gt;はなぜ使えるのか？ 3行目の &lt;code&gt;vec1.iter()&lt;/code&gt;で使われているじゃないか！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map(|i| i * 3)&lt;/code&gt;の &lt;code&gt;i&lt;/code&gt;は参照なのか値なのか？&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;これらの疑問に関する答えは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;iter()&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;をmoveしない。&lt;code&gt;into_iter()&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;をmoveする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iter()&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;から「参照のコレクションである&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Iterator&quot;&gt;Iterator&lt;/a&gt;」を作成し、&lt;code&gt;into_iter()&lt;/code&gt;は&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;から「値のコレクションである&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Iterator&quot;&gt;Iterator&lt;/a&gt;」を作成する。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;ということになる。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;into_iter()&lt;/code&gt;の挙動&lt;/h2&gt;

&lt;h3&gt;呼び出し元の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;の所有権&lt;/h3&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec1 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;];
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec2 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; vec1.&lt;span class=&quot;synIdentifier&quot;&gt;into_iter&lt;/span&gt;()
                   .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;i&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; i &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
                   .&lt;span class=&quot;synIdentifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();

    &lt;span class=&quot;synPreProc&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;, vec1); &lt;span class=&quot;synComment&quot;&gt;// Error!&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;このコードは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;できない。というのも、3行目の &lt;code&gt;into_iter()&lt;/code&gt;は&lt;code&gt;vec1&lt;/code&gt;をmoveするからである。&lt;/p&gt;

&lt;p&gt;このように、 &lt;code&gt;into_iter()&lt;/code&gt;は、呼び出し元の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;をmoveする。&lt;/p&gt;

&lt;h3&gt;mapに渡される要素は参照なのか？&lt;/h3&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec1 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;];
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec2 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; vec1.&lt;span class=&quot;synIdentifier&quot;&gt;into_iter&lt;/span&gt;()
                   .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;i&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*&lt;/span&gt;i &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;// Error!&lt;/span&gt;
                   .&lt;span class=&quot;synIdentifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
}
&lt;/pre&gt;


&lt;p&gt;このコードは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;できない。というのも、4行目の &lt;code&gt;map(|i| *i * 3)&lt;/code&gt;の &lt;code&gt;i&lt;/code&gt;は、参照ではなく値だからである。&lt;/p&gt;

&lt;p&gt;このように、&lt;code&gt;into_iter()&lt;/code&gt;に連なる &lt;code&gt;map&lt;/code&gt;には、参照ではなく&lt;strong&gt;値&lt;/strong&gt;が渡される。&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;iter()&lt;/code&gt;の挙動&lt;/h2&gt;

&lt;h3&gt;呼び出し元の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;の所有権&lt;/h3&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec1 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;];
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec2 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; vec1.&lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;()
                   .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;i&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; i &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;)
                   .&lt;span class=&quot;synIdentifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();

    &lt;span class=&quot;synPreProc&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;synConstant&quot;&gt;&amp;quot;{:?}&amp;quot;&lt;/span&gt;, vec1); &lt;span class=&quot;synComment&quot;&gt;// OK!&lt;/span&gt;
}
&lt;/pre&gt;


&lt;p&gt;このコードは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;できる。&lt;code&gt;iter()&lt;/code&gt;は&lt;code&gt;vec1&lt;/code&gt;をmoveしないからである。&lt;/p&gt;

&lt;p&gt;このように、 &lt;code&gt;iter()&lt;/code&gt;は、呼び出し元の&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;をmoveしない。&lt;/p&gt;

&lt;h3&gt;mapに渡される要素は参照なのか？&lt;/h3&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec1 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;vec!&lt;/span&gt;[&lt;span class=&quot;synConstant&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;synConstant&quot;&gt;5&lt;/span&gt;];
    &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec2 &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; vec1.&lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;()
                   .&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;i&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;synType&quot;&gt;*&lt;/span&gt;i &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;synComment&quot;&gt;// OK!&lt;/span&gt;
                   .&lt;span class=&quot;synIdentifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();
}
&lt;/pre&gt;


&lt;p&gt;このコードは&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB&quot;&gt;コンパイル&lt;/a&gt;できる。4行目の &lt;code&gt;map(|i| *i * 3)&lt;/code&gt;の &lt;code&gt;i&lt;/code&gt;は、値ではなく参照だからである。&lt;/p&gt;

&lt;p&gt;このように、&lt;code&gt;iter()&lt;/code&gt;に連なる &lt;code&gt;map&lt;/code&gt;には、参照が渡される。&lt;/p&gt;

&lt;h2&gt;結論&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;を&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Iterator&quot;&gt;Iterator&lt;/a&gt;に変換して処理を行いたいとき、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;その&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;を後で利用するなら&lt;code&gt;iter()&lt;/code&gt;を使う。その場合、&lt;code&gt;map&lt;/code&gt;には要素の参照が渡される。&lt;/li&gt;
&lt;li&gt;その&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/Vector&quot;&gt;Vector&lt;/a&gt;を後で利用しないなら&lt;code&gt;into_iter()&lt;/code&gt;を使う。その場合、&lt;code&gt;map&lt;/code&gt;には要素の値が渡される。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;速度について&lt;/h2&gt;

&lt;p&gt;一応簡単に&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%DE%A1%BC%A5%AF&quot;&gt;ベンチマーク&lt;/a&gt;して、&lt;code&gt;iter()&lt;/code&gt;と&lt;code&gt;into_iter()&lt;/code&gt;の間に速度的な差があるのか検証した。
なんとなく&lt;code&gt;iter()&lt;/code&gt;の方が遅いような気がするが、誤差幅を考えるとほとんど差がないように見える。&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A5%D9%A5%F3%A5%C1%A5%DE%A1%BC%A5%AF&quot;&gt;ベンチマーク&lt;/a&gt;のコード：&lt;/p&gt;

&lt;pre class=&quot;code lang-rust&quot; data-lang=&quot;rust&quot; data-unlink&gt;&lt;span class=&quot;synPreProc&quot;&gt;#![feature(test)]&lt;/span&gt;

&lt;span class=&quot;synStatement&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;test&lt;/span&gt;;

&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;(vec: &lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;) {
    vec.&lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;i&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; i &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;synIdentifier&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;();
}

&lt;span class=&quot;synStatement&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;into_iter&lt;/span&gt;(vec: &lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;) {
    vec.&lt;span class=&quot;synIdentifier&quot;&gt;into_iter&lt;/span&gt;().&lt;span class=&quot;synIdentifier&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt;i&lt;span class=&quot;synStatement&quot;&gt;|&lt;/span&gt; i &lt;span class=&quot;synStatement&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;2&lt;/span&gt;).&lt;span class=&quot;synIdentifier&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&lt;/span&gt;();
}

&lt;span class=&quot;synPreProc&quot;&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class=&quot;synStatement&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;tests&lt;/span&gt; {
    &lt;span class=&quot;synStatement&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;*&lt;/span&gt;;
    &lt;span class=&quot;synStatement&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;synPreProc&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;Bencher;

    &lt;span class=&quot;synPreProc&quot;&gt;#[bench]&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;bench_iter&lt;/span&gt;(b: &lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; Bencher) {
        &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; range &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;100000&lt;/span&gt;;
        &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; range.&lt;span class=&quot;synIdentifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();

        b.&lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;(vec.&lt;span class=&quot;synIdentifier&quot;&gt;clone&lt;/span&gt;()));
    }

    &lt;span class=&quot;synPreProc&quot;&gt;#[bench]&lt;/span&gt;
    &lt;span class=&quot;synStatement&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;bench_into_iter&lt;/span&gt;(b: &lt;span class=&quot;synType&quot;&gt;&amp;amp;mut&lt;/span&gt; Bencher) {
        &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; range &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;synConstant&quot;&gt;0&lt;/span&gt;..&lt;span class=&quot;synConstant&quot;&gt;100000&lt;/span&gt;;
        &lt;span class=&quot;synStatement&quot;&gt;let&lt;/span&gt; vec &lt;span class=&quot;synStatement&quot;&gt;=&lt;/span&gt; range.&lt;span class=&quot;synIdentifier&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;synSpecial&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;synType&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;synStatement&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;();

        b.&lt;span class=&quot;synIdentifier&quot;&gt;iter&lt;/span&gt;(&lt;span class=&quot;synStatement&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;synIdentifier&quot;&gt;into_iter&lt;/span&gt;(vec.&lt;span class=&quot;synIdentifier&quot;&gt;clone&lt;/span&gt;()));
    }
}
&lt;/pre&gt;


&lt;p&gt;結果：&lt;/p&gt;

&lt;pre class=&quot;code&quot; data-lang=&quot;&quot; data-unlink&gt;&amp;gt; cargo bench
   Compiling iterator-bench v0.1.0
    Finished release [optimized] target(s) in 0.61 secs
     Running target/release/deps/iterator_bench-b01db65774dc9996

running 2 tests
test tests::bench_into_iter ... bench:      38,553 ns/iter (+/- 14,812)
test tests::bench_iter      ... bench:      39,507 ns/iter (+/- 20,207)

test result: ok. 0 passed; 0 failed; 0 ignored; 2 measured; 0 filtered out&lt;/pre&gt;


&lt;p&gt;&lt;div class=&quot;hatena-asin-detail&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/1491927283/genya040704-22 /&quot;&gt;&lt;img src=&quot;https://images-fe.ssl-images-amazon.com/images/I/51cdXICI6nL._SL160_.jpg&quot; class=&quot;hatena-asin-detail-image&quot; alt=&quot;Programming Rust: Fast, Safe Systems Development&quot; title=&quot;Programming Rust: Fast, Safe Systems Development&quot;&gt;&lt;/a&gt;&lt;div class=&quot;hatena-asin-detail-info&quot;&gt;&lt;p class=&quot;hatena-asin-detail-title&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/1491927283/genya040704-22 /&quot;&gt;Programming Rust: Fast, Safe Systems Development&lt;/a&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;作者:&lt;/span&gt; Jim Blandy,Jason Orendorff&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;出版社/メーカー:&lt;/span&gt; O&#39;Reilly Media&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;発売日:&lt;/span&gt; 2017/12/21&lt;/li&gt;&lt;li&gt;&lt;span class=&quot;hatena-asin-detail-label&quot;&gt;メディア:&lt;/span&gt; ペーパーバック&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/asin/1491927283/genya040704-22 &quot; target=&quot;_blank&quot;&gt;この商品を含むブログを見る&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;hatena-asin-detail-foot&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
</content>        
        <category term="Rust" label="Rust" />
        
        <link rel="enclosure" href="https://images-fe.ssl-images-amazon.com/images/I/51cdXICI6nL._SL160_.jpg" type="image/jpeg" length="0" />

        <author>
            <name>threetea0407</name>
        </author>
    </entry>
    
  
</feed>
